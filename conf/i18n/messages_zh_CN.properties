# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:43
# args: accountUuid,userUuid
no\ pemission\ to\ do\ the\ operation\ for\ [accountUuid\:%s,\ userUuid\:%s] = \u6CA1\u6709\u53EF\u5BF9[AccountUuId\uFF1A{0}\uFF0CUserUuId\uFF1A{1}]\u6267\u884C\u64CD\u4F5C\u7684pEmission

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:50
# args: 
If\ a\ specified\ Accesskey\ is\ expected,\ the\ AccesskeyId\ and\ the\ AccesskeySecret\ must\ be\ provided\ at\ the\ same\ time. = \u5982\u679C\u9700\u8981\u6307\u5B9A\u7684AccessKey\uFF0C\u5219\u5FC5\u987B\u540C\u65F6\u63D0\u4F9BAccessKeyId\u548CAccessKeySecret\u3002

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:72
# args: msg.getAccountUuid(),msg.getUserUuid()
[accountId\:\ %s,\ userID\:\ %s]\ is\ not\ valid\ account\ or\ iam2\ porject/user = [\u5E10\u6237ID\uFF1A{0}\uFF0C\u7528\u6237ID\uFF1A{1}]\u4E0D\u662F\u6709\u6548\u7684\u5E10\u6237\u6216IAM2\u5BF9\u8C61/\u7528\u6237

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:91
# args: msg.getAccountUuid(),msg.getUserUuid()
accessKey\ number\ for\ [accountId\:\ %s,\ userID\:\ %s]exceeds\ the\ max = [AccountId\uFF1A{0}\uFF0CUserId\uFF1A{1}]\u7684AccessKey\u7F16\u53F7\u8D85\u51FA\u6700\u5927\u503C

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:92
# args: ipVer
not\ support\ the\ ip\ version\ %d = \u4E0D\u652F\u6301\u7684IP\u7248\u672C{0}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:98
# args: ips,acl.getUuid()
%s\ duplicate/overlap\ ip\ entry\ with\ access-control-list\ group\:%s = {0}\u4E2D\u6709\u548C\u8BBF\u95EE\u63A7\u5236\u7EC4{1}\u91CC\u7684ip\u91CD\u590D/\u91CD\u53E0

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:105
# args: ips
ip\ format\ only\ supports\ ip/iprange/cidr,\ but\ find\ %s = \u53EA\u652F\u6301IP\u5730\u5740/IP\u6BB5/IP\u7F51\u7EDC\u7684\u683C\u5F0F\uFF0C\u4E0D\u652F\u6301{0}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:109
# args: startIp,endIp,NetworkUtils.longToIpv4String(r.lowerEndpoint()),NetworkUtils.longToIpv4String(r.upperEndpoint()),acl.getUuid()
ip\ range[%s,\ %s]\ is\ overlap\ with\ [%s,\ %s]\ in\ access-control-list\ group\:%s = IP\u6BB5[{0}\uFF0C{1}]\u548C\u8BBF\u95EE\u63A7\u5236\u7EC4\uFF1A{4}\u91CC\u7684[{2}, {3}]\u6709\u91CD\u53E0\u7684ip

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:127
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ redirect\ rule,\ can\ not\ add\ IP\ Entry = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[{0}]\u5DF2\u62E5\u6709\u91CD\u5B9A\u5411\u89C4\u5219\uFF0C\u65E0\u6CD5\u6DFB\u52A0IP\u6761\u76EE

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:133
# args: acl.getUuid(),AccessControlListConstants.MAX_ENTRY_COUNT_PER_GROUP
the\ access-control-list\ groups[%s]\ can't\ be\ added\ more\ than\ %d\ ip\ entries = \u8BBF\u95EE\u63A7\u5236\u7EC4[{0}]\u6700\u591A\u53EA\u80FD\u6DFB\u52A0{1}ip\u7EC4

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:138
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ redirect\ rule,\ can\ not\ add\ ip\ entry = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[{0}]\u5DF2\u62E5\u6709\u91CD\u5B9A\u5411\u89C4\u5219\uFF0C\u65E0\u6CD5\u6DFB\u52A0IP\u6761\u76EE

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:154
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ ip\ entry,\ can\ not\ add\ redirect\ rule = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[{0}]\u5DF2\u62E5\u6709IP\u6761\u76EE\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u91CD\u5B9A\u5411\u89C4\u5219

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:158
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ one\ redirect\ rule,\ can\ not\ add\ redirect\ rule = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[{0}]\u5DF2\u62E5\u6709\u4E00\u4E2A\u91CD\u5B9A\u5411\u89C4\u5219\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u91CD\u5B9A\u5411\u89C4\u5219

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:162
# args: 
domain\ and\ url\ can\ not\ both\ empty = \u57DF\u548CURL\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:178
# args: msg.getUrl()
url[%s]\ is\ not\ validate\ url = URL[{0}]\u4E0D\u662F\u9A8C\u8BC1URL

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:167
# args: msg.getDomain()
domain[%s]\ is\ not\ validate\ domain = \u57DF[{0}]\u4E0D\u662F\u9A8C\u8BC1\u57DF

# at: src/main/java/org/zstack/aliyun/account/AliyunAccountBase.java:348
# args: builder.deleteCharAt(builder.length() - 1),timeout
cannot\ connect\ to\ [%s]\ in\ %d\ milliseconds,\ so\ aliyun\ openapi\ is\ unreachable. = \u65E0\u6CD5\u5728{1}\u6BEB\u79D2\u5185\u8FDE\u63A5\u5230[{0}]\uFF0C\u56E0\u6B64\u65E0\u6CD5\u8BBF\u95EE\u963F\u91CC\u4E91OpenAPI\u3002

# at: src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java:466
# args: 
no\ bucket\ found\ for\ backup = \u6CA1\u6709\u53EF\u7528\u7684Bucket\u6267\u884C\u5907\u4EFD

# at: src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java:28
# args: 
accessKey\ and\ keySecret\ must\ be\ set = \u5FC5\u987B\u8BBE\u7F6EaccessKey\u548CkeySecret

# at: src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java:73
# args: 
ocean\ api\ endpoint\ must\ not\ be\ null = Ocean API\u7EC8\u7ED3\u70B9\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:33
# args: 
accessKey\ and\ keySecret\ must\ be\ set! = \u5FC5\u987B\u8BBE\u7F6EAccessKey\u548CKeySecret\uFF01

# at: src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:40
# args: 
regionId\ must\ be\ set! = \u5FC5\u987B\u8BBE\u7F6ERegionID\uFF01

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2162
# args: AliyunConstant.DEFAULT_ENTRY_WAIT_STATUS_TIMEOUT
entry\ is\ still\ existed\ after\ %s\ ms = \u865A\u62DF\u8DEF\u7531\u5668\u5220\u9664\u8D85\u65F6\uFF08{0} ms\uFF09

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2648
# args: request.getInstanceIds()
cannot\ find\ EcsInstance[%s],\ please\ check\ if\ it\ exists\ in\ Aliyun\ console = \u627E\u4E0D\u5230ECSInstance[{0}]\uFF0C\u8BF7\u68C0\u67E5\u963F\u91CC\u4E91\u63A7\u5236\u53F0\u662F\u5426\u5B58\u5728

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2708
# args: 
image\ already\ existed\ remote,\ please\ use\ sync\ first. = \u955C\u50CF\u5DF2\u7ECF\u5B58\u5728\u963F\u91CC\u4E91\u670D\u52A1\u5668\u4E0A\uFF0C\u8BF7\u5C1D\u8BD5\u540C\u6B65\u6570\u636E

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:3015
# args: request.getRegionId()
regionId[%s]\ is\ invalid\ by\ aliyun! = regionId[{0}]\u662F\u65E0\u6548\u7684\uFF01

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:61
# args: 
Not\ a\ valid\ message! = \u65E0\u6548\u6D88\u606F\uFF01

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:177
# args: action,result.ErrorCode,result.ErrorMessage
%s\ failed,\ ErrorCode\:\ %s,\ ErrorMessage\:\ %s = {0}\u5931\u8D25\uFF0C\u9519\u8BEF\u4EE3\u7801\uFF1A{1}\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{2}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:301
# args: 15000
Device\ Not\ Ready\ in\ %d\ milli\ seconds = \u8BBE\u5907\u5728{0}\u6BEB\u79D2\u5185\u672A\u5C31\u7EEA

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:497
# args: result.Content.TaskStatus
snapshot\ task\ status\ is\ finished\ %s = \u5FEB\u7167\u4EFB\u52A1\u72B6\u6001\u4E3A\u5DF2\u5B8C\u6210{0}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:493
# args: msg.getTimeout(),result.Content.Progress,result.Content.TaskStatus
snapshot\ task\ cannot\ finished\ in\ %d\ milliseconds,\ now\ progress\ is\ %d,\ status\ is\ %s = \u5FEB\u7167\u4EFB\u52A1\u65E0\u6CD5\u5728{0}\u6BEB\u79D2\u5185\u5B8C\u6210\uFF0C\u5F53\u524D\u8FDB\u5EA6\u4E3A{1}\uFF0C\u72B6\u6001\u4E3A{2}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:898
# args: 
not\ supported\ HybridClient = \u4E0D\u652F\u6301HybridClient

# at: src/main/java/org/zstack/aliyun/core/AliyunUtils.java:259
# args: e.getMessage()
add\ endpoint\ to\ sdk\ failed,\ due\ to\:\ %s = \u5C06\u7EC8\u7ED3\u70B9\u6DFB\u52A0\u5230SDK\u5931\u8D25\uFF0C\u539F\u56E0\u662F\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:86
# args: 
cannot\ find\ key\ /\ secret\ from\ msg = \u65E0\u6CD5\u4ECE\u6D88\u606F\u4E2D\u627E\u5230\u5BC6\u94A5/\u673A\u5BC6

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:410
# args: 
cannot\ input\ 0-length\ file\ as\ vm\ images! = \u65E0\u6CD5\u5C06\u957F\u5EA6\u4E3A0\u7684\u6587\u4EF6\u4F5C\u4E3A\u4E91\u4E3B\u673A\u955C\u50CF\u8F93\u5165\uFF01

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:499
# args: e.getMessage()
Permission\ denied\ for\:\ %s = \u6743\u9650\u88AB\u62D2\u7EDD\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:588
# args: e.getRequestId()
Bucket\ name\ is\ already\ existed\ (maybe\ created\ by\ other\ user),\ Please\ select\ a\ different\ name\ and\ try\ again.(aliyun\ request-id\:\ %s) = Bucket\u540D\u79F0\u5DF2\u7ECF\u5B58\u5728\uFF08\u53EF\u80FD\u5DF2\u7ECF\u88AB\u522B\u7684\u7528\u6237\u4F7F\u7528\u4E86\uFF09\uFF0C\u8BF7\u5C1D\u8BD5\u4F7F\u7528\u4E00\u4E2A\u65B0\u7684\u547D\u540D\u3002\uFF08\u963F\u91CC\u4E91\u8BF7\u6C42ID: {0}\uFF09

# at: src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java:277
# args: HybridType.AliyunEBS.toString()
arg\ 'endpoint'\ must\ be\ set\ in\ %s\ type = \u5FC5\u987B\u5728{0}\u7C7B\u578B\u4E2D\u8BBE\u7F6E\u53C2\u6570\u201C endpoint \u201D

# at: src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java:332
# args: type.toString()
not\ supported\ datacenter\ [%s]\ type\ here! = \u6B64\u5904\u4E0D\u652F\u6301\u6570\u636E\u4E2D\u5FC3[{0}]\u7C7B\u578B\uFF01

# at: src/main/java/org/zstack/aliyun/core/identityzone/AliyunPrivateIdentityZoneBase.java:175
# args: 
must\ indicate\ zoneId\ in\ private\ aliyun. = \u5FC5\u987B\u5728\u79C1\u6709\u963F\u91CC\u4E91\u4E2D\u6CE8\u660EZoneID\u3002

# at: src/main/java/org/zstack/aliyun/ebs/storage/OceanApi.java:87
# args: e.getMessage()
make\ ocean\ api\ signature\ string\ failed\:\ %s = \u751F\u6210Ocean API\u7B7E\u540D\u5B57\u7B26\u4E32\u5931\u8D25\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageApiInterceptor.java:30
# args: 
url(ocean\ endpoint)\ must\ be\ set\ for\ aliyun\ ebs\ backupstorage = \u963F\u91CC\u4E91EBS\u5907\u4EFD\u5B58\u50A8\u5FC5\u987B\u8BBE\u7F6EURL\uFF08\u6D77\u6D0B\u7AEF\u70B9\uFF09

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java:376
# args: 
aliyun\ ebs\ backup\ storage\ do\ not\ support\ to\ cancel\ download\ image = \u963F\u91CC\u4E91EBS\u5907\u4EFD\u5B58\u50A8\u4E0D\u652F\u6301\u53D6\u6D88\u4E0B\u8F7D\u955C\u50CF

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java:620
# args: objectFile,ovo.getBucketName()
no\ such\ object\ %s\ found\ in\ bucket\ %s = \u5728\u5B58\u50A8\u6876{1}\u4E2D\u627E\u4E0D\u5230\u6B64\u7C7B\u5BF9\u8C61{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageCascadeExtenstion.java:46
# args: oss.getUuid(),evo.getUuid()
cannot\ delete\ oss\ bucket\ [%s],\ Aliyun\ Ebs\ BackupStorage\ [%s]\ still\ existed,\ please\ delete\ it\ first. = \u65E0\u6CD5\u5220\u9664OSS Bucket[{0}]\uFF0CAliyun EBS BackupStorage[{1}]\u4ECD\u7136\u5B58\u5728\uFF0C\u8BF7\u5148\u5C06\u5176\u5220\u9664\u3002

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:147
# args: vol.getUuid()
cannot\ find\ device\ path\ from\ volume\:\ %s = \u65E0\u6CD5\u4ECE\u5377\u4E2D\u627E\u5230\u8BBE\u5907\u8DEF\u5F84\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:490
# args: 
aliyun\ ebs\ not\ support\ resize\ on\ running\ vm\ now. = \u963F\u91CC\u4E91EBS\u73B0\u5728\u4E0D\u652F\u6301\u5728\u8FD0\u884C\u7684\u4E91\u4E3B\u673A\u4E0A\u8C03\u6574\u5927\u5C0F\u3002

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:612
# args: isoUuid
iso\ [%s]\ has\ been\ attached,\ we\ can\ not\ attach\ it\ until\ detach\ it = \u5DF2\u9644\u52A0ISO[{0}]\uFF0C\u5728\u5206\u79BB\u5B83\u4E4B\u524D\u65E0\u6CD5\u9644\u52A0\u5B83

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:39
# args: msg.getUrl()
url\ must\ starts\ with\ http\://\ or\ https\://,\ but\ got\ %s = URL\u5FC5\u987B\u4EE5HTTP\uFF1A//\u6216HTTPS\uFF1A//\u5F00\u5934\uFF0C\u4F46\u83B7\u5F97\u4E86{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:35
# args: 
url(ocean\ endpoint)\ must\ be\ set\ for\ aliyun\ ebs\ primarystorage = \u963F\u91CC\u4E91EBS PrimaryStorage\u5FC5\u987B\u8BBE\u7F6EURL\uFF08\u6D77\u6D0B\u7AEF\u70B9\uFF09

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:43
# args: 
panguPartitionUuid\ or\ identityZoneUuid\ must\ be\ set. = \u5FC5\u987B\u8BBE\u7F6EPangUpartitionUuid\u6216IdentityZoneUuid\u3002

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:49
# args: msg.getPanguPartitionUuid(),msg.getIdentityZoneUuid()
panguPartitionUuid\ [%s]\ not\ be\ matched\ with\ identityZoneUuid\ [%s] = panguPartitionUuid[{0}]\u4E0EidentityZoneUuid[{1}]\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:669
# args: self.getUuid(),self.getName()
the\ aliyun\ ebs\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = \u963F\u91CC\u4E91EBS\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5728\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u4E8E\u5B9E\u4F8B\u5316\u5377\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:2888
# args: reply1.getProgress()
create\ snapshot\ timeout,\ progress\ is\ %d = \u521B\u5EFA\u5FEB\u7167\u8D85\u65F6\uFF0C\u8FDB\u5EA6\u4E3A{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:1971
# args: msg.getVolume().getRootImageUuid()
cannot\ find\ snapshot\ from\ image\:\ %s,\ maybe\ the\ image\ has\ been\ deleted = \u65E0\u6CD5\u4ECE\u955C\u50CF\u4E2D\u627E\u5230\u5FEB\u7167\uFF1A{0}\uFF0C\u8BE5\u955C\u50CF\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:2746
# args: 
ebs\ primarystorage\ cannot\ support\ decrease\ size\ now = EBS\u4E3B\u5B58\u50A8\u73B0\u5728\u65E0\u6CD5\u652F\u6301\u51CF\u5C0F\u5927\u5C0F

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:3134
# args: bsvo.getType()
aliyun\ ebs\ primarystorage\ only\ support\ aliyun\ ebs\ bs,\ actually\ get\ type\:\ %s = \u963F\u91CC\u4E91EBS PrimaryStorage\u4EC5\u652F\u6301\u963F\u91CC\u4E91EBS BS\uFF0C\u5B9E\u9645\u83B7\u53D6\u7C7B\u578B\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageCascadeExtension.java:46
# args: iz.getUuid(),evo.getUuid()
cannot\ delete\ identity\ zone\ [%s],\ Aliyun\ Ebs\ PrimaryStorage\ [%s]\ still\ existed,\ please\ delete\ it\ first. = \u65E0\u6CD5\u5220\u9664\u6807\u8BC6\u533A[{0}]\uFF0C\u963F\u91CC\u4E91EBS PrimaryStorage[{1}]\u4ECD\u7136\u5B58\u5728\uFF0C\u8BF7\u5148\u5220\u9664\u3002

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:113
# args: installPath
invalid\ install\ path\:\ %s = \u5B89\u88C5\u8DEF\u5F84\u65E0\u6548\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:24
# args: volumeId,url
append\ volumeId\:\ %s,\ but\ another\ volumeId\ existed\ in\ url\:\ %s = \u9644\u52A0VolumeID\uFF1A{0}\uFF0C\u4F46URL\u4E2D\u5B58\u5728\u53E6\u4E00\u4E2AVolumeID\uFF1A{1}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:79
# args: url
invalid\ install\ url\:\ %s = \u65E0\u6548\u7684\u5B89\u88C5URL\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:35
# args: hostUuid,url
hostUuid\ [%s]\ already\ existed\ in\ url\:\ %s = URL{1}\u4E2D\u5DF2\u5B58\u5728HostUuid[{0}]

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:83
# args: hostUuid
cannot\ find\ devicePath\ on\ host\:\ %s = \u5728\u7269\u7406\u673A\u4E0A\u627E\u4E0D\u5230DevicePath\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:128
# args: installPath
invalid\ snapshot\ install\ path\:\ %s = \u5FEB\u7167\u5B89\u88C5\u8DEF\u5F84\u65E0\u6548\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:79
# args: eivo.getUuid(),eivo.getName(),eivo.getCreateDate()
ecs\ image\ existed\ remote\ and\ local,\ ecs\ image\ uuid\:\ %s,\ name\:\ %s,\ created\ time\:\ %s = \u4E91\u4E3B\u673A\u955C\u50CF\u5B58\u5728\u4E8E\u963F\u91CC\u4E91\u670D\u52A1\u5668\u548C\u672C\u5730\uFF0C\u4E91\u4E3B\u673A\u955C\u50CF\u7684uuid: {0}\uFF0C\u540D\u79F0: {1}\uFF0C\u521B\u5EFA\u65F6\u95F4: {2}

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:107
# args: msg.getName(),new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(HybridUtilsForAliyun.fmtTime(rpl.getCreateDate()))
ecs\ image\ existed\ remote,\ name\:\ %s,\ created\ time\:\ %s = \u4E91\u4E3B\u673A\u955C\u50CF\u5DF2\u7ECF\u5B58\u5728\u4E8E\u963F\u91CC\u4E91\u670D\u52A1\u5668\u4E0A\uFF0C\u540D\u79F0: {0}\uFF0C\u521B\u5EFA\u65F6\u95F4: {1}

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:184
# args: 
No\ Available\ instance\ types\ now. = \u6CA1\u6709\u53EF\u7528\u7684\u5B9E\u4F8B\u7C7B\u578B

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:253
# args: regionId,data1.get("type")
This\ region\ [%s]\ cannot\ produce\ instance\ type\ [%s]\ now,\ please\ select\ another\ instance\ type\ or\ another\ region = \u6B64\u5730\u533A[{0}]\u73B0\u5728\u65E0\u6CD5\u751F\u6210\u5B9E\u4F8B\u7C7B\u578B[{1}]\uFF0C\u8BF7\u9009\u62E9\u5176\u4ED6\u5B9E\u4F8B\u7C7B\u578B\u6216\u5176\u4ED6\u5730\u533A

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:344
# args: ecs.getUuid(),ecs.getEcsInstanceId()
no\ system\ disk\ found\ for\ ecs\:\ [%s],\ ecs\ id\ is\:\ [%s] = \u6CA1\u6709\u7CFB\u7EDF\u4E91\u76D8\u53EF\u7528\u6765\u521B\u5EFA\u4E91\u4E3B\u673A\uFF0C\u4E91\u4E3B\u673Aid\u662F: [{1}]

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:65
# args: evo.getEcsStatus().toString()
Only\ delete\ ecs\ which\ status\ is\ running\ or\ stopped,\ now\ is\ %s = \u53EA\u80FD\u5220\u9664\u72B6\u6001\u4E3A\u8FD0\u884C\u4E2D\u6216\u8005\u5DF2\u505C\u6B62\u7684\u4E91\u4E3B\u673A\uFF0C\u73B0\u5728\u4E91\u4E3B\u673A\u72B6\u6001\u4E3A{0}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:70
# args: evo.getChargeType().toString()
Only\ postpaid\ ecs\ support\ delete\ remote,\ the\ indicate\ ecs\ charge\ type\ is\:\ %s = \u53EA\u6709\u5DF2\u4ED8\u8D39\u7684\u4E91\u4E3B\u673A\u652F\u6301\u5220\u9664\uFF0C\u76EE\u524D\u4E91\u4E3B\u673A\u4ED8\u8D39\u72B6\u6001\u662F: {0}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:84
# args: 
Only\ admin\ can\ set\ parameter\ [onlyZstack]\ \=\ false = \u53EA\u6709\u7BA1\u7406\u5458\u80FD\u8BBE\u7F6E[onlyZsatck]\u53C2\u6570\u4E3Afalse

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:93
# args: evo.getAvailableIpAddressCount()
vSwitch\ availableIpAddress\ is\ not\ enough,\ now\ is\ (%d) = \u865A\u62DF\u4EA4\u6362\u673A\u53EF\u7528IP\u5730\u5740\u4E0D\u591F\uFF0C\u73B0\u6709IP\u5730\u5740\u6570\u91CF({0})

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:97
# args: privateIp,cidr
%s\ is\ not\ in\ cidr\ range\:\ %s = {0}\u6CA1\u6709\u5728CIDR\u8303\u56F4\u4E2D: {1}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:103
# args: vSwitchUuid,ecs.getUuid()
private\ ip\ is\ existed\ in\ vswitch\:\ %s,\ allocated\ to\ ecs\:\ %s = \u79C1\u6709IP\u5DF2\u7ECF\u5B58\u5728\u865A\u62DF\u4EA4\u6362\u673A\u4E2D: {0}\uFF0C\u5DF2\u5206\u914D\u7ED9\u4E91\u4E3B\u673A: {1}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:137
# args: 
bandwidth\ must\ be\ set\ while\ allocate\ publicIp = \u5F53\u5206\u914D\u516C\u6709IP\u65F6\u5E26\u5BBD\u5FC5\u987B\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:140
# args: msg.getPrivateIpAddress()
%s\ is\ not\ ipv4\ address = {0}\u4E0D\u662F\u4E00\u4E2Aipv4\u5730\u5740

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:143
# args: msg.getEcsRootVolumeType(),EcsInstanceConstant.validVolumeCategory.toString()
%s\ is\ not\ valid\ volume\ type,\ valid\ types\ are\ [%s] = {0}\u4E0D\u662F\u6709\u6548\u7684\u4E91\u76D8\u7C7B\u578B\uFF0C\u6709\u6548\u7684\u4E91\u76D8\u7C7B\u578B\u6709[{1}]

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:147
# args: 
instanceOffering\ or\ instanceType\ must\ be\ set! = \u8BA1\u7B97\u89C4\u683C\u548C\u5B9E\u4F8B\u7C7B\u578B\u5FC5\u987B\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java:517
# args: rly1.getVncUrl()
decode\ url\ failed\:\ %s = url\u89E3\u7801\u5931\u8D25: {0}

# at: src/main/java/org/zstack/aliyun/ecs/ExportImageFromBSFlow.java:52
# args: 
image\ has\ been\ deleted! = \u56FE\u50CF\u5DF2\u5220\u9664\uFF01

# at: src/main/java/org/zstack/aliyun/identityzone/AliyunIdentityZoneBase.java:187
# args: 
no\ identity\ found = \u627E\u4E0D\u5230\u8EAB\u4EFD

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:71
# args: 
the\ operation\ only\ custom\ image = \u8FD9\u4E2A\u64CD\u4F5C\u53EA\u80FD\u5BF9\u7528\u6237\u81EA\u5DF1\u7684\u955C\u50CF\u8FDB\u884C

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:80
# args: 
Only\ system\ disks\ can\ create\ mirrors = \u53EA\u6709\u7CFB\u7EDF\u4E91\u76D8\u53EF\u4EE5\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:131
# args: 
can\ not\ delete\ ecs\ system\ image\ remote = \u4E0D\u80FD\u5220\u9664\u963F\u91CC\u4E91\u670D\u52A1\u5668\u4E0A\u7684\u4E91\u4E3B\u673A\u7CFB\u7EDF\u955C\u50CF

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:142
# args: 
Only\ support\ ImageStoreBackupStorage = \u7528\u672C\u5730\u955C\u50CF\u521B\u5EFA\u963F\u91CC\u4E91\u4E0A\u7684\u955C\u50CF\u53EA\u652F\u6301ImageStore\u955C\u50CF\u670D\u52A1\u5668

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:145
# args: 
image\ name\ cannot\ starts\ with\ http\://\ or\ https\:// = \u955C\u50CF\u540D\u79F0\u4E0D\u53EF\u4EE5\u4EE5http://\u6216https://\u5F00\u59CB

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:158
# args: imageUuid
no\ backup\ storage\ found\ for\ imageUuid\:\ %s = \u672A\u627E\u5230uuid\u4E3A{0}\u7684\u955C\u50CF\u670D\u52A1\u5668

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:162
# args: imageUuid
exceeded\ backup\ storage\ found\ for\ the\ imageUuid\:\ %s,\ please\ indicate\ it\ manually = \u53D1\u73B0\u591A\u4E2A\u5B58\u5728\u955C\u50CFuuid\u4E3A{0}\u7684\u955C\u50CF\u670D\u52A1\u5668\uFF0C\u8BF7\u5C1D\u8BD5\u6307\u5B9A\u955C\u50CF\u670D\u52A1\u5668

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:173
# args: platform,EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()
valid\ platform\:[%s]\ for\ aliyun\ image\ import,\ valid\ value\ are\:\ [%s] = \u6709\u6548\u7684\u5BFC\u5165\u963F\u91CC\u4E91\u955C\u50CF\u5E73\u53F0: [{0}]\uFF0C\u6709\u6548\u503C\u662F[{1}]

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:178
# args: ivo.getUuid()
image\ [%s]\ is\ not\ enable\ now = \u955C\u50CF[{0}]\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:306
# args: msg.getDataCenterUuid()
no\ ossbucket\ attached\ to\ the\ datacenter\:\ %s = \u6CA1\u6709oss Bucket\u6DFB\u52A0\u5230\u6570\u636E\u4E2D\u5FC3{0}

# at: src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:361
# args: msg.getImageUuid(),msg.getDataCenterUuid()
the\ indicated\ image\ [%s]\ is\ importing\ to\ datacenter\ [%s]\ now... = \u6307\u5B9A\u7684\u955C\u50CF[{0}]\u6B63\u5728\u88AB\u5BFC\u5165\u5230\u6570\u636E\u4E2D\u5FC3[{1}]\u4E2D...

# at: src/main/java/org/zstack/aliyun/nas/core/AliyunNasApiInterceptor.java:44
# args: psUuids.toString()
PrimaryStorage\ [%s]\ still\ running,\ can\ not\ delete\ access\ group = PrimaryStorage[{0}]\u4ECD\u5728\u8FD0\u884C\uFF0C\u65E0\u6CD5\u5220\u9664\u8BBF\u95EE\u7EC4

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:194
# args: msg.getSourceCidrIp(),msg.getAccessGroupUuid()
access\ group\ rule\ [%s]\ already\ existed\ in\ access\ group\ [%s] = \u8BBF\u95EE\u7EC4\u89C4\u5219[{0}]\u5DF2\u5B58\u5728\u4E8E\u8BBF\u95EE\u7EC4[{1}]\u4E2D

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:849
# args: msg.getName(),msg.getDataCenterUuid()
access\ group\ [%s]\ already\ existed\ in\ datacenter\ [%s] = \u6570\u636E\u4E2D\u5FC3[{1}]\u4E2D\u5DF2\u5B58\u5728\u8BBF\u95EE\u7EC4[{0}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:150
# args: self.getFileSystemId(),regionId
no\ filesystem\ [%s]\ found\ in\ region\:\ %s = \u5728\u6570\u636E\u4E2D\u5FC3{1}\u4E2D\u627E\u4E0D\u5230\u6587\u4EF6\u7CFB\u7EDF[{0}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:203
# args: msg.getDataCenterUuid()
nas\ filesystem\ existed\ in\ datacenter\:\ %s = NAS\u6587\u4EF6\u7CFB\u7EDF\u5B58\u5728\u4E8E\u6570\u636E\u4E2D\u5FC3\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:304
# args: refs.toString()
some\ primary\ storage\ [%s]\ used\ this\ nas,\ can\ not\ delete\ it\ until\ delete\ the\ primary\ storage. = \u67D0\u4E2A\u4E3B\u5B58\u50A8[{0}]\u4F7F\u7528\u4E86\u6B64NAS\uFF0C\u5728\u5220\u9664\u4E3B\u5B58\u50A8\u4E4B\u524D\u65E0\u6CD5\u5C06\u5176\u5220\u9664\u3002

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:314
# args: cmsg.getWait()
mount\ domain\ not\ valid\ after\ %d\ milliseconds,\ delete\ it... = \u88C5\u8F7D\u57DF\u5728{0}\u6BEB\u79D2\u540E\u65E0\u6548\uFF0C\u8BF7\u5C06\u5176\u5220\u9664..

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:422
# args: 
there\ are\ no\ nas\ access\ group\ existed,\ please\ create\ at\ least\ one = \u4E0D\u5B58\u5728NAS\u8BBF\u95EE\u7EC4\uFF0C\u8BF7\u81F3\u5C11\u521B\u5EFA\u4E00\u4E2A

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:404
# args: self.getMountDomain(),self.getNasFileSystemUuid()
no\ such\ mount\ target\ [%s]\ in\ nas\:\ %s = NAS\u4E2D\u6CA1\u6709\u8FD9\u6837\u7684\u88C5\u8F7D\u76EE\u6807[{0}]\uFF1A{1}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:472
# args: msg.getMountDomain(),msg.getNasFSUuid()
nas\ mount\ target\ [%s]\ existed\ in\ filesystem\:\ %s = \u6587\u4EF6\u7CFB\u7EDF{1}\u4E2D\u5B58\u5728NAS\u88C5\u8F7D\u76EE\u6807[{0}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:512
# args: self.getAccessGroupUuid()
the\ access\ group\ attached\ is\ already\:\ %s = \u9644\u52A0\u7684\u8BBF\u95EE\u7EC4\u5DF2\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2907
# args: imageVO.getUuid()
image\ [uuid\:%s]\ has\ been\ deleted = \u955C\u50CF[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:535
# args: vSwitchUuid
EcsVSwitchVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = ECSVSwitchVO[{0}]\u4E0D\u5B58\u5728\uFF0C\u53EF\u80FD\u5DF2\u88AB\u5220\u9664\uFF01

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:528
# args: accessGroupUuid
AliyunNasAccessGroupVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = AliyunNASAccessGroupVO[{0}]\u4E0D\u5B58\u5728\uFF0C\u53EF\u80FD\u5DF2\u88AB\u5220\u9664\uFF01

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:827
# args: self.getUuid()
cannot\ find\ an\ available\ host\ to\ operation\ in\ primary\ storage\:\ %s = \u5728\u4E3B\u5B58\u50A8\u4E2D\u627E\u4E0D\u5230\u53EF\u7528\u4E8E\u64CD\u4F5C\u7684\u7269\u7406\u673A\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:906
# args: self.getUuid(),hostUuid,rsp.error
failed\ to\ ping\ aliyun\ nas\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = \u65E0\u6CD5\u4ECE\u7269\u7406\u673A[uuid\uFF1A{1}]Ping Aliyun NAS\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A{2}\u3002\u65AD\u5F00\u6B64\u7269\u7406\u673A-PS\u8FDE\u63A5

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:1394
# args: 
nas\ primary\ storage\ not\ mounted,\ please\ init\ it\ first! = NAS\u4E3B\u5B58\u50A8\u672A\u88C5\u8F7D\uFF0C\u8BF7\u5148\u5C06\u5176\u521D\u59CB\u5316\uFF01

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2004
# args: vol.getUuid()
cannot\ find\ host\ to\ operate\ volume\:\ [%s] = \u627E\u4E0D\u5230\u64CD\u4F5C\u5377[{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2241
# args: self.getUuid()
cannot\ find\ and\ host\ to\ sync\ volume\ size\ in\ primary\:\ %s = \u5728\u4E3B\u8282\u70B9\u4E2D\u627E\u4E0D\u5230\u8981\u540C\u6B65\u5377\u5927\u5C0F\u7684\u7269\u7406\u673A\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2268
# args: 
image\ [%s]\ has\ been\ deleted,\ cannot\ reinit\ root\ volume\ from\ it = \u955C\u50CF[{0}]\u5DF2\u5220\u9664\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u91CD\u65B0\u521D\u59CB\u5316\u6839\u5377

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2423
# args: 
no\ available\ host\ could\ check\ mountPath! = \u6CA1\u6709\u53EF\u7528\u7684\u7269\u7406\u673A\u53EF\u4EE5\u68C0\u67E5\u88C5\u8F7D\u8DEF\u5F84\uFF01

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2653
# args: String.join(",", msg.getBackupStorageUuids()),errorCodes.getCauses().get(0).getDetails()
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids\:\ %s,\ becasue\:\ %s = \u4E0D\u80FD\u7ED9uuid\u5217\u8868{0}\u5206\u914D\u955C\u50CF\u670D\u52A1\u5668\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2795
# args: bsvo.getType()
aliyun\ nas\ primarystorage\ only\ support\ imagestore\ bs,\ actually\ get\ type\:\ %s = \u963F\u91CC\u4E91NAS PrimaryStorage\u4EC5\u652F\u6301ImageStore BS\uFF0C\u5B9E\u9645\u83B7\u53D6\u7C7B\u578B\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:161
# args: context.getInventory().getUuid(),context.getInventory().getName(),mine,e.getKey(),version,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage\ to\ cluster.\ Kvm\ host[uuid\:%s,\ name\:%s]\ in\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ a\ cluster\ that\ has\ kvm\ host[uuid\:%s],\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = \u4E0D\u80FD\u6302\u8F7D\u4E3B\u5B58\u50A8\u5230\u96C6\u7FA4\u3002\u96C6\u7FA4\u4E2D\u7684\u7269\u7406\u673A[uuid:{0}, name:{1}]\u62E5\u6709[{2}]\u7248\u672C\u7684qemu-img\uFF1B\u4F46\u662F\u4E3B\u5B58\u50A8\u5DF2\u7ECF\u6302\u8F7D\u5230\u62E5\u6709[{4}]\u7248\u672Cqemu-img\u7684\u96C6\u7FA4\u4E0A\u3002\u7248\u672C\u5927\u4E8E{5}\u7684qemu-img\u4E0D\u517C\u5BB9\u7248\u672C\u5C0F\u4E8E{6}\uFF0C\u8FD9\u5C06\u4F1A\u9020\u6210\u4E91\u76D8\u5FEB\u7167\u64CD\u4F5C\u5931\u8D25\u3002\u4E3A\u4E86\u9632\u6B62qemu-img\u7248\u672C\u4E0D\u517C\u5BB9\uFF0C\u8BF7\u907F\u514D\u6302\u8F7D\u4E3B\u5B58\u50A8\u5230\u7269\u7406\u673A\u88C5\u6709\u4E0D\u540Clinux\u7248\u672C\u7684\u96C6\u7FA4

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:344
# args: 
no\ available\ host\ could\ download\ imagecache! = \u6CA1\u6709\u53EF\u7528\u7684\u7269\u7406\u673A\u53EF\u4EE5\u4E0B\u8F7DImageCache\uFF01

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:1147
# args: msg.getResourceUuid()
resource[uuid\:\ %s]\ cannot\ found = \u627E\u4E0D\u5230\u8D44\u6E90[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:75
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = Aliyun NAS\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5728\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u4E8E\u5B9E\u4F8B\u5316\u5377\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:208
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ delete\ bits\ on\ primarystorage = Aliyun NAS\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5728\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u4E8E\u4E3B\u5B58\u50A8\u5220\u9664\u4F4D\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:619
# args: self.getUuid(),self.getName()
the\ Aliyun\ Nas\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = \u963F\u91CC\u4E91NAS\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u672A\u6302\u63A5\u4EFB\u4F55\u96C6\u7FA4\uFF0C\u6216\u6302\u63A5\u7684\u96C6\u7FA4\u4E2D\u6CA1\u6709\u7269\u7406\u673A

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:936
# args: hostUuid
failed\ to\ check\ mount\ path\ on\ host\:\ %s = \u65E0\u6CD5\u68C0\u67E5\u7269\u7406\u673A\u4E0A\u7684\u88C5\u8F7D\u8DEF\u5F84\uFF1A{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:1023
# args: 
cannot\ find\ a\ host\ to\ cleanup\ image\ cache. = \u627E\u4E0D\u5230\u7528\u4E8E\u6E05\u9664\u955C\u50CF\u7F13\u5B58\u7684\u7269\u7406\u673A\u3002

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:533
# args: eipVo.getAllocateResourceUuid()
ecs\ instance[%s]\ isn't\ existed,\ please\ check\ it. = \u4E91\u4E3B\u673A[{0}]\u4E0D\u5B58\u5728\uFF0C\u8BF7\u8FDB\u884C\u6838\u67E5

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:537
# args: ecsVo.getUuid(),ecsVo.getEcsStatus()
Only\ ecs\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ detach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = \u53EA\u6709\u6B63\u5728\u8FD0\u884C\u6216\u5DF2\u505C\u6B62\u72B6\u6001\u7684\u4E91\u4E3B\u673A\u624D\u80FD\u7ED1\u5B9A\u5F39\u6027IP\uFF0C\u4F46\u662F\u4E91\u4E3B\u673A[{0}]\u72B6\u6001\u4E3A[{1}]

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:2860
# args: msg.getUuid()
virtual\ border\:\ %s\ has\ been\ deleted = \u8FB9\u754C\u8DEF\u7531\u5668: {0}\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3389
# args: tupleCidr,msg.getNextHopUuid()
destination\ cidr\ [%s]\ is\ existed\ and\ point\ to\ another\ instance-id\ [%s],\ please\ check\ or\ delete\ it\ first = \u76EE\u6807CIDR[{0}]\u5DF2\u7ECF\u5B58\u5728\u4E14\u6307\u5411\u5176\u4ED6\u4E91\u4E3B\u673A[{1}]\uFF0C\u8BF7\u68C0\u67E5\u6216\u5220\u9664\u5B83

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3902
# args: evo.getUuid(),evo.getEcsStatus()
Only\ esc\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ attach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = \u53EA\u6709\u6B63\u5728\u8FD0\u884C\u6216\u5DF2\u505C\u6B62\u72B6\u6001\u7684\u4E91\u4E3B\u673A\u624D\u80FD\u7ED1\u5B9A\u5F39\u6027IP\uFF0C\u4F46\u662F\u4E91\u4E3B\u673A[{0}]\u72B6\u6001\u4E3A[{1}]

# at: src/main/java/org/zstack/aliyun/network/connection/AliyunConnectionManagerImpl.java:585
# args: msg.getVbrUuid()
Vbr\:\ [%s]\ is\ in\ create\ connection\ progress,\ please\ wait... = \u865A\u62DF\u8FB9\u754C\u8DEF\u7531\u5668: [{0}]\u6B63\u5728\u521B\u5EFA\u8FDE\u63A5\u4E2D\uFF0C\u8BF7\u7A0D\u540E...

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java:80
# args: tuple.get(0, String.class),msg.getVbrUuid(),vpcCidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vbr\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = \u81EA\u5B9A\u4E49CIDR['{0]\u5DF2\u7ECF\u5B58\u5728\u4E8E\u865A\u62DF\u8FB9\u754C\u8DEF\u7531\u5668[{1}']\uFF0C\u5B83\u5DF2\u7ECF\u548C\u76EE\u6807CIDR[{2}]\u91CD\u53E0\u4E86\uFF0C\u8BF7\u68C0\u67E5\u7136\u540E\u5220\u9664\u5B83

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java:71
# args: tuple.get(0, String.class),vRouterUuid,cidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vrouter\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = \u539F\u59CB\u7684CIDR[{0}]\u5DF2\u7ECF\u5B58\u5728\u4E8E\u865A\u62DF\u8DEF\u7531\u5668\u4E2D[{1}]\uFF0C\u5DF2\u7ECF\u88AB\u76EE\u6807CIDR\u6240\u8986\u76D6\uFF0C\u8BF7\u5148\u68C0\u9A8C\u7136\u540E\u5220\u9664\u5B83

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:51
# args: msg.getL3networkUuid()
No\ Such\ Cidr\ found\ for\ l3network\:\ %s = \u672A\u627E\u5230\u4E09\u5C42\u7F51\u7EDC{0}\u5BF9\u5E94\u7684CIDR

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:42
# args: msg.getL3networkUuid()
No\ Such\ VRouter\ nic\ found\ for\ l3network\:\ %s = \u672A\u627E\u5230\u4E09\u5C42\u7F51\u7EDC{0}\u5BF9\u5E94\u7684\u865A\u62DF\u8DEF\u7531\u5668\u7F51\u5361

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:43
# args: msg.getUuid()
no\ such\ vpc\ found\ for\:\ %s = \u672A\u627E\u5230\u8BE5VPC: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:48
# args: msg.getUuid()
no\ such\ vm\ found\ for\:\ %s = \u6CA1\u6709\u627E\u5230\u8BE5\u4E91\u4E3B\u673A: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:53
# args: msg.getUuid()
no\ such\ vbr\ found\ for\:\ %s = \u6CA1\u6709\u627E\u5230\u8BE5\u865A\u62DF\u8FB9\u754C\u8DEF\u7531\u5668: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:58
# args: msg.getUuid()
no\ such\ l3network\ found\ for\:\ %s = \u6CA1\u6709\u627E\u5230\u8BE5\u4E09\u5C42\u7F51\u7EDC: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:62
# args: msg.getResourceType()
not\ a\ supported\ resource\ type\:\ %s = \u4E0D\u652F\u6301\u8D44\u6E90\u7C7B\u578B: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:68
# args: 
Only\ admin\ can\ create\ connections = \u53EA\u6709admin\u624D\u80FD\u521B\u5EFA\u8FDE\u63A5

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:72
# args: msg.getCpeIp()
CpeIp\ must\ be\ ipv4\ address,\ but\ now\ is\ %s = CpeIp\u5FC5\u987B\u662Fipv4\u5730\u5740\uFF0C\u4F46\u662F\u73B0\u5728\u662F{0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:76
# args: 
cpeIp\ must\ be\ ipv4\ address = cpeIp\u5FC5\u987B\u662Fipv4\u5730\u5740

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:82
# args: msg.getL3networkUuid(),msg.getVpcUuid()
l3network\ %s\ and\ vpc\ %s\ already\ connected,\ please\ check\ it = \u4E09\u5C42\u7F51\u7EDC{0}\u548Cvpc{1}\u5DF2\u7ECF\u8FDE\u63A5

# at: src/main/java/org/zstack/aliyun/network/vpn/AliyunVpcVpnBase.java:955
# args: 
vpn\ gateway\ and\ user\ gateway\ are\ not\ in\ the\ same\ dataCenterUuid! = vpn\u7F51\u5173\u548C\u7528\u6237\u7F51\u5173\u4E0D\u662F\u540C\u4E00\u4E2AdataCenterUuid

# at: src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:33
# args: msg.getBucketName(),msg.getDataCenterUuid()
ossBucket\ [%s]\ is\ already\ added\ in\ dataCenter\ [%s] = oss Bucket['{0]\u5DF2\u7ECF\u88AB\u6DFB\u52A0\u6570\u636E\u4E2D\u5FC3[{1}']

# at: src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:41
# args: ovo.getUuid()
OssBucket[%s]\ is\ not\ attached. = oss Bucket[{0}]\u6CA1\u6709\u88AB\u6DFB\u52A0

# at: src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:114
# args: 
domain,\ key,\ secret\ must\ be\ set\ all = \u57DF\u3001\u5BC6\u94A5\u3001\u673A\u5BC6\u5FC5\u987B\u5168\u90E8\u8BBE\u7F6E

# at: src/main/java/org/zstack/aliyun/oss/OssBucketCascadeExtension.java:107
# args: 
oss\ bucket\ is\ not\ empty! = oss Bucket\u4E0D\u4E3A\u7A7A

# at: src/main/java/org/zstack/aliyun/pangu/AliyunPanguApiInterceptor.java:39
# args: appName,partitionName,vo.getIdentityZoneUuid()
appName\:\ %s,\ partitionName\:\ %s\ is\ existed\ in\ identityZone\:\ %s = AppName\uFF1A{0}\uFF0CPartitionName\uFF1A{1}\u5B58\u5728\u4E8EIdentityZone\uFF1A{2}\u4E2D

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:62
# args: 
Root\ volume\ cannot\ be\ deleted = \u4E91\u76D8\u4E0D\u80FD\u88AB\u5220\u9664

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:83
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ cloud\ and\ portable\ property\ is\ false = \u5F53\u4E91\u76D8\u7684category\u5C5E\u6027\u662Fcloud\u4E14portable\u4E3Afalse\uFF0C\u4E0D\u80FD\u8BBE\u7F6E\u4E91\u76D8\u7684deleteWithInstance\u5C5E\u6027\u4E3Afalse

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:78
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ ephemeral = \u5F53\u4E91\u76D8\u7684category\u5C5E\u6027\u4E3Aephemeral\u65F6\uFF0C\u4E0D\u80FD\u8BBE\u7F6E\u4E91\u76D8\u7684deleteWithInstance\u5C5E\u6027\u4E3Afalse

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:95
# args: msg.getUuid()
The\ disk\ [%s]\ is\ not\ attach\ on\ any\ instance\  = \u8BE5\u4E91\u76D8[{0}]\u6CA1\u6709\u52A0\u8F7D\u5230\u4EFB\u4F55\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:121
# args: msg.getEcsUuid()
The\ state\ of\ the\ ecs\ [%s]\ instance\ must\ be\ running\ or\ stopped = \u4E91\u4E3B\u673A[{0}]\u7684\u72B6\u6001\u5FC5\u987B\u662F\u8FD0\u884C\u6216\u8005\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:105
# args: 
Only\ data\ disk\ can\ be\ mounted\ on\ ecs = \u53EA\u6709\u4E91\u76D8\u53EF\u4EE5\u6302\u88C5\u5230\u4E91\u4E3B\u673A\u4E0A

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:109
# args: 
The\ disk\ not\ be\ attach\ on\ any\ ecs = \u8BE5\u4E91\u76D8\u6CA1\u6709\u52A0\u8F7D\u5230\u4EFB\u4F55\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:143
# args: 
Non-independent\ disk\ can\ only\ be\ destroyed\ with\ instances = \u672A\u72EC\u7ACB\u7684\u4E91\u76D8\u53EA\u80FD\u548C\u4E91\u4E3B\u673A\u4E00\u8D77\u5220\u9664

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:126
# args: 
Disk\ and\ ecs\ instances\ must\ be\ in\ the\ same\ zone = \u4E91\u76D8\u548C\u4E91\u4E3B\u673A\u5FC5\u987B\u5728\u76F8\u540C\u7684\u533A\u57DF\u4E0B

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:130
# args: msg.getDiskUuid(),msg.getEcsUuid()
The\ disk\ [%s]\ is\ already\ mounted\ on\ the\ instance\ [%s] = \u4E91\u76D8[{0}]\u5DF2\u7ECF\u5B89\u88C5\u5230\u4E91\u670D\u52A1\u5668\u5B9E\u4F8B[{1}]

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:135
# args: 
Only\ data\ disk\ can\ attach\ to\ ecs = \u53EA\u6709\u4E91\u76D8\u80FD\u52A0\u8F7D\u5230\u4E91\u670D\u52A1\u5668

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:139
# args: 
Cannot\ attach\ disk\ when\ in\ use = \u4E0D\u80FD\u52A0\u8F7D\u6B63\u5728\u4F7F\u7528\u7684\u4E91\u76D8

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:154
# args: 
The\ size\ and\ snapshot\ id\ in\ the\ request\ parameter\ must\ select\ one\ of\ the\ items\ to\ specify\ the\ size\ of\ the\ disk\ or\ create\ a\ disk\ using\ the\ snapshot. = \u5728\u8BF7\u6C42\u53C2\u6570\u4E2Dsize\u548C\u5FEB\u7167id\u5FC5\u987B\u9009\u62E9\u4E00\u9879\u4EE5\u4FBF\u4E8E\u6307\u5B9A\u78C1\u76D8\u5927\u5C0F\u6216\u521B\u5EFA\u4E00\u4E2A\u5FEB\u7167\u4F7F\u7528\u7684\u78C1\u76D8

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:167
# args: 
Not\ allowed\ create\ disk\ on\ root\ volume\ snapshot = \u4E0D\u5141\u8BB8\u5728\u4E91\u76D8\u5FEB\u7167\u4E0A\u521B\u5EFA\u4E91\u76D8

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:176
# args: 
the\ disk\ name\ or\ description\ cannot\ set\ start\ with\ 'http\://'\ or\ 'https\://'\  = \u4E91\u76D8\u540D\u79F0\u548C\u4ECB\u7ECD\u4E0D\u80FD\u4EE5http://\u6216https://\u5F00\u5934

# at: src/main/java/org/zstack/aliyun/storage/snapshot/AliyunSnapshotApiInterceptor.java:41
# args: 
The\ operation\ allows\ only\ when\ ecs\ state\ of\ the\ ecs\ instance\ status\ be\ running\ or\ stopped = \u5F53\u4E91\u4E3B\u673A\u6001\u4E3A\u8FD0\u884C\u4E2D\u6216\u5DF2\u505C\u6B62\u65F6\u8BE5\u64CD\u4F5C\u624D\u88AB\u5141\u8BB8

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:60
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ a\ SftpBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = \u6709\u8D85\u8FC7\u4E00\u4E2A\u955C\u50CF\u670D\u52A1\u5668\u62E5\u6709\u76F8\u540C\u7684\u7269\u7406\u673A\u540D\uFF0C\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A SFTP \u955C\u50CF\u670D\u52A1\u5668 [\u7269\u7406\u673A\u540D:{0}]\uFF0C\u88AB\u6DFB\u52A0\u7684\u955C\u50CF\u670D\u52A1\u5668\u7C7B\u578B\u4E3A {1}

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:68
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ an\ ImageStoreBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = \u6709\u8D85\u8FC7\u4E00\u4E2A\u955C\u50CF\u670D\u52A1\u5668\u62E5\u6709\u76F8\u540C\u7684\u7269\u7406\u673A\u540D\uFF0C\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u955C\u50CF\u670D\u52A1\u5668 [\u7269\u7406\u673A\u540D:{0}]\uFF0C\u88AB\u6DFB\u52A0\u7684\u955C\u50CF\u670D\u52A1\u5668\u7C7B\u578B\u4E3A {1}

# at: src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java:486
# args: msg.getAppUuid()
PublishAppVO[uuid\:\ %s]\ is\ not\ existed = PublishAppVO[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java:588
# args: 
[appcenter]\ filterName\ must\ be\ appcenter\:true\ or\ appcenter\:false = [appCenter]FilterName\u5FC5\u987B\u4E3AappCenter\uFF1Atrue\u6216appCenter\uFF1Afalse

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:127
# args: struct.getParamName()
%s\ is\ in\ preParameters,\ but\ not\ be\ set = {0}\u5728\u524D\u53C2\u6570\u4E2D\uFF0C\u4F46\u672A\u8BBE\u7F6E

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:131
# args: 
%s\ need\ Number\ value,\ but\ got\ wrong\ type = {0}\u9700\u8981\u6570\u503C\uFF0C\u4F46\u7C7B\u578B\u9519\u8BEF

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:136
# args: 
%s\ need\ Boolean\ value,\ but\ got\ wrong\ type = {0}\u9700\u8981\u5E03\u5C14\u503C\uFF0C\u4F46\u7C7B\u578B\u9519\u8BEF

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:141
# args: 
%s\ need\ String\ value,\ but\ got\ wrong\ type = {0}\u9700\u8981\u5B57\u7B26\u4E32\u503C\uFF0C\u4F46\u83B7\u53D6\u7684\u7C7B\u578B\u9519\u8BEF

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:389
# args: msg.getBuildSystemUuid()
cannot\ find\ build\ system\ [%s] = \u627E\u4E0D\u5230\u751F\u6210\u7CFB\u7EDF[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:339
# args: msg.getBuildSystemUuid(),msg.getZoneUuid()
build\ system[uuid\:\ %s]\ has\ been\ attached\ to\ zone[uuid\:\ %s] = \u751F\u6210\u7CFB\u7EDF[uuid\uFF1A{0}]\u5DF2\u9644\u52A0\u5230\u533A\u57DF[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:396
# args: msg.getBuildSystemUuid(),msg.getZoneUuid()
build\ system[uuid\:\ %s]\ has\ not\ been\ attached\ to\ zone[uuid\:\ %s] = \u751F\u6210\u7CFB\u7EDF[uuid\uFF1A{0}]\u5C1A\u672A\u9644\u52A0\u5230\u533A\u57DF[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:620
# args: appUuid
cannot\ find\ build\ application\:\ [%s] = \u627E\u4E0D\u5230\u751F\u6210\u5E94\u7528\u7A0B\u5E8F\uFF1A[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:989
# args: 
imageStore\ is\ not\ Enabled = \u672A\u542F\u7528ImageStore

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:993
# args: 
imageStore\ is\ not\ Connected = ImageStore\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:1147
# args: p.getDefaultValue()
cannot\ find\ imageUuid\ for\ image[%s] = \u627E\u4E0D\u5230\u955C\u50CF[{0}]\u7684ImageUuid

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:1159
# args: msg.getUuid()
cannot\ find\ build-app[uuid\:\ %s],\ or\ it\ was\ in\ Deleting\ status = \u627E\u4E0D\u5230Build-App[uuid\uFF1A{0}]\uFF0C\u6216\u8005\u5B83\u5904\u4E8E\u5220\u9664\u72B6\u6001

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:50
# args: msg.getUuid()
build-app[%s]\ is\ exported\ or\ is\ exporting,\ please\ delete\ it\ first = Build-App[{0}]\u5DF2\u5BFC\u51FA\u6216\u6B63\u5728\u5BFC\u51FA\uFF0C\u8BF7\u5148\u5220\u9664\u5B83

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:63
# args: build.getUuid(),build.getName(),build.getHostname(),build.getUrl()
another\ build\ system[uuid\:\ %s,\ name\:\ %s]\ in\ this\ host[%s]\ used\ the\ url[%s] = \u6B64\u7269\u7406\u673A[{2}]\u4E2D\u7684\u53E6\u4E00\u4E2A\u751F\u6210\u7CFB\u7EDF[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u4F7F\u7528\u4E86URL[{3}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:74
# args: msg.getDataPath()
dataPath\ must\ start\ with\ '/',\ actually\ got\ [%s] = \u6570\u636E\u8DEF\u5F84\u5FC5\u987B\u4EE5\u201C/\u201D\u5F00\u5934\uFF0C\u5B9E\u9645\u83B7\u5F97[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:88
# args: 
both\ backupStorageUuid\ and\ hostname\ are\ null = backupStorageUuid\u548Chostname\u5747\u4E3A\u7A7A

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:95
# args: msg.getHostname()
cannot\ find\ imageStore\ which\ hostname\ is\ \:%s = \u627E\u4E0D\u5230\u7269\u7406\u673A\u540D\u4E3A{0}\u7684ImageStore

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:98
# args: msg.getHostname()
find\ more\ than\ one\ imageStore\ which\ hostname\ is\:\ %s,\ please\ use\ backupStorageUuid\ instead = \u627E\u5230\u591A\u4E2A\u7269\u7406\u673A\u540D\u4E3A{0}\u7684ImageStore\uFF0C\u8BF7\u6539\u7528BackupStorageUuid

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:102
# args: 
both\ backupStorageUuid\ and\ hostname\ are\ set,\ but\ they\ are\ not\ the\ same\ host = \u540C\u65F6\u8BBE\u7F6E\u4E86backupStorageuuid\u548Chostname\uFF0C\u4F46\u5B83\u4EEC\u4E0D\u662F\u540C\u4E00\u7269\u7406\u673A

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:116
# args: 
buildAppUuid\ and\ exportId\ cannot\ both\ be\ null = BuildAppuuid\u548CExportId\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:120
# args: 
buildAppUuid\ and\ buildSystemUuid\ cannot\ both\ be\ null = BuildAppUuid\u548CBuildSystemUuid\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:126
# args: 
no\ such\ exportId\ in\ build\ export\ history = \u5728\u751F\u6210\u5BFC\u51FA\u5386\u53F2\u8BB0\u5F55\u4E2D\u6CA1\u6709\u8FD9\u6837\u7684\u5BFC\u51FAID

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:130
# args: 
both\ exportId\ and\ buildAppUuid\ are\ set\ but\ they\ are\ not\ equal = \u540C\u65F6\u8BBE\u7F6E\u4E86ExportId\u548CBuildAppUuid\uFF0C\u4F46\u5B83\u4EEC\u4E0D\u76F8\u7B49

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:108
# args: self.getStatus()
unable\ to\ do\ the\ operation\ because\ the\ build\ system\ is\ in\ status\ of\ %s = \u65E0\u6CD5\u6267\u884C\u8BE5\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u751F\u6210\u7CFB\u7EDF\u5904\u4E8E{0}\u72B6\u6001

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:121
# args: msg.getBuildAppUuid()
cannot\ find\ the\ build\ app\ by\ uuid[%s] = \u6309uuid[{0}]\u627E\u4E0D\u5230\u751F\u6210\u5E94\u7528\u7A0B\u5E8F

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:126
# args: status.toString()
build\ app\ is\ in\ %s\ status,\ which\ can\ not\ support\ the\ current\ operation. = \u751F\u6210\u5E94\u7528\u7A0B\u5E8F\u5904\u4E8E{0}\u72B6\u6001\uFF0C\u65E0\u6CD5\u652F\u6301\u5F53\u524D\u64CD\u4F5C\u3002

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:156
# args: buildUrl(path),rsp.error
rest\ call\ %s\ failed,\ because\:\ %s = REST\u8C03\u7528{0}\u5931\u8D25\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:353
# args: 
build\ application\ is\ disabled\ because\ build\ system\ is\ in\ 'Disabled'\ state = \u751F\u6210\u5E94\u7528\u7A0B\u5E8F\u5DF2\u7981\u7528\uFF0C\u56E0\u4E3A\u751F\u6210\u7CFB\u7EDF\u5904\u4E8E\u201C\u7981\u7528\u201D\u72B6\u6001

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:506
# args: meta.getAppId(),meta.getVersion().getVersion()
create\ BuildApp\ failed,\ because\ appId[%s\:\ %s]\ is\ duplicated\ by\ another\ BuildApp = \u521B\u5EFABuildApp\u5931\u8D25\uFF0C\u56E0\u4E3AAppId[{0}\uFF1A{1}]\u4E0E\u53E6\u4E00\u4E2ABuildApp\u91CD\u590D

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:659
# args: buildUrl(CONNECT_BUILDSYSTEM_PATH),errorCode
unable\ to\ connect\ to\ localstorage\ build\ system[url\:%s],\ because\ %s = \u65E0\u6CD5\u8FDE\u63A5\u5230localStorage\u751F\u6210\u7CFB\u7EDF[URL\uFF1A{0}]\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:762
# args: struct.getAppId(),struct.getVersion().getVersion()
add\ BuildApp\ failed,\ because\ appId[%s\:%s]\ is\ duplicated\ by\ another\ BuildApp = \u6DFB\u52A0BuildApp\u5931\u8D25\uFF0C\u56E0\u4E3AAppId[{0}\uFF1A{1}]\u4E0E\u53E6\u4E00\u4E2ABuildApp\u91CD\u590D

# at: src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java:48
# args: file
cannot\ find\ raw-template\ json\ file\ at\:\ %s = \u5728{0}\u5904\u627E\u4E0D\u5230\u539F\u59CB\u6A21\u677FJSON\u6587\u4EF6

# at: src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java:61
# args: e
Unable\ to\ create\ json\ template = \u65E0\u6CD5\u521B\u5EFAJSON\u6A21\u677F

# at: src/main/java/org/zstack/appliancevm/ApplianceVmAllocateNicFlow.java:108
# args: l2NetworkVO.getUuid()
there\ is\ no\ available\ nicType\ on\ L2\ network\ [%s] = \u4E8C\u5C42\u7F51\u7EDC[{0}]\u4E0A\u6CA1\u6709\u53EF\u7528\u7684nicType

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:136
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
appliance\ vm[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = \u7CFB\u7EDF\u4E91\u4E3B\u673A[uuid:{0}]\u5904\u4E8E{1}\u72B6\u6001\uFF0C\u65E0\u6CD5\u5BF9[{2}]\u6267\u884CHTTP RPC\u8C03\u7528

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:430
# args: getSelf().getUuid()
appliance\ vm\ %s\ stopped = \u5E94\u7528\u88C5\u7F6EVM{0}\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:709
# args: getSelf().getUuid()
appliance\ vm\ %s\ reboot = \u5E94\u7528\u88C5\u7F6E\u4E91\u4E3B\u673A{0}\u91CD\u65B0\u542F\u52A8

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:719
# args: getSelf().getUuid()
appliance\ vm\ %s\ reboot\ failed = \u5E94\u7528\u88C5\u7F6E\u4E91\u4E3B\u673A{0}\u91CD\u65B0\u542F\u52A8\u5931\u8D25

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:781
# args: getSelf().getUuid()
appliance\ vm\ %s\ start\ failed = \u5E94\u7528\u88C5\u7F6EVM{0}\u542F\u52A8\u5931\u8D25

# at: src/main/java/org/zstack/appliancevm/ApplianceVmKvmBootstrapFlow.java:64
# args: rsp.getError()
set\ appliance\ bootstrapinfo\ error,\ because\:%s = \u8BBE\u7F6E\u88C5\u7F6EBootstrapInfo\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:120
# args: msg.getUuid(),uuid
listener[uuid\:%s]\ are\ being\ used\ by\ the\ autoScalingVmTemplate[%s]\ and\ cannot\ be\ deleted = \u4FA6\u542C\u5668[uuid\uFF1A{0}]\u6B63\u7531AutoScalingVMTemplate[{1}]\u4F7F\u7528\uFF0C\u65E0\u6CD5\u5220\u9664

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:131
# args: msg.getInstanceUuid(),msg.getGroupUuid()
The\ instance[%s]\ does\ not\ exist\ in\ the\ scaling\ group[%s] = \u7F29\u653E\u7EC4[{1}]\u4E2D\u4E0D\u5B58\u5728\u5B9E\u4F8B[{0}]

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:163
# args: msg.getAlarmUuid(),ruleVO.getScalingGroupUuid()
alarm[uuid\:%s]\ are\ being\ used\ by\ the\ autoScalingGroup[%s]\ which\ cannot\ be\ deleted = \u65E0\u6CD5\u5220\u9664\u7684AutoScalingGroup[{1}]\u6B63\u5728\u4F7F\u7528\u62A5\u8B66[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:173
# args: msg.getUuid()
rule[%s]\ state\ is\ Disabled = \u89C4\u5219[{0}]\u72B6\u6001\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java:386
# args: l3Uuids,uuid
invalid\ l3\ network\ uuids[%s]\ for\ listener\ that\ belongs\ lb[%s],\ all\ the\ networks\ must\ be\ attached\ the\ LB\ service\ and\ be\ attached\ with\ the\ same\ vRouter\ with\ LB = \u5C5E\u4E8ELB[{1}]\u7684\u4FA6\u542C\u5668\u7684\u4E09\u5C42\u7F51\u7EDCuuid[{0}]\u65E0\u6548\uFF0C\u6240\u6709\u7F51\u7EDC\u90FD\u5FC5\u987B\u9644\u52A0\u5230LB\u670D\u52A1\uFF0C\u5E76\u4E14\u5FC5\u987B\u9644\u52A0\u5230\u4E0ELB\u76F8\u540C\u7684VRouter

# at: src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java:744
# args: msg.getTemplateUuid(),JSONObjectUtil.toJsonString(errors)
detach\ autoScalingTemplate[%s]\ from\ AutoScalingGroup\ failed,\ errors\ are\ %s = \u4ECEAutoScalingGroup\u5206\u79BBAutoScalingTemplate[{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u4E3A{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:890
# args: imageVO.getUuid(),imageVO.getMediaType()
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ and\ ISO\ can\ be\ used\ to\ create\ vm = \u955C\u50CF[uuid:{0}] \u7C7B\u578B\u4E3A{1}\uFF0C\u53EA\u80FD\u7528RootVolumeTemplate\u548CISO\u6765\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:893
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ image\ mediaType\ is\ ISO = \u4E91\u76D8\u89C4\u683C\u4E0D\u80FD\u4E3A\u7A7A\u5728\u955C\u50CF\u7C7B\u578B\u4E3AISO\u65F6

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:367
# args: 
Only\ one\ scaling\ activity\ can\ be\ executed\ in\ the\ same\ scaling\ group\ at\ the\ same\ time. = \u540C\u4E00\u4F38\u7F29\u7EC4\u4E2D\u540C\u4E00\u65F6\u95F4\u53EA\u80FD\u6267\u884C\u4E00\u4E2A\u4F38\u7F29\u6D3B\u52A8\u3002

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1317
# args: 
The\ number\ of\ instances\ exceeds\ the\ limit = \u5B9E\u4F8B\u6570\u8D85\u8FC7\u9650\u5236

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:645
# args: loadBalancerListenerUuidListStr
add\ vm\ nic\ to\ loadBalancer\ failed,\ No\ loadBalancer[uuids\=%s]\ can\ be\ found. = \u5C06VM NIC\u6DFB\u52A0\u5230LoadBalancer\u5931\u8D25\uFF0C\u627E\u4E0D\u5230LoadBalancer[uuid={0}]\u3002

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:684
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToLoadBalancerErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ loadBalancer\ failed\ completely,\ errors\ are\ %s = AutoScalingGroup[{0}]\u5C06\u65B0\u521B\u5EFA\u7684VM\u6DFB\u52A0\u5230LoadBalancer\u5B8C\u5168\u5931\u8D25\uFF0C\u9519\u8BEF\u4E3A{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:719
# args: securityGroupUuid
add\ vm\ nic\ to\ securityGroup\ failed,\ No\ securityGroup[uuid\=%s]\ can\ be\ found. = \u5C06VM NIC\u6DFB\u52A0\u5230SecurityGroup\u5931\u8D25\uFF0C\u627E\u4E0D\u5230SecurityGroup[uuid={0}]\u3002

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:755
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToSecurityGroupErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ securityGroup\ failed\ completely,\ errors\ are\ %s = AutoScalingGroup[{0}]\u5C06\u65B0\u521B\u5EFA\u7684VM\u6DFB\u52A0\u5230SecurityGroup\u5B8C\u5168\u5931\u8D25\uFF0C\u9519\u8BEF\u4E3A{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:865
# args: templateGroupRefVO.getTemplateUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:AutoScalingVmTemplateVO]\ not\ found = \u627E\u4E0D\u5230\u8D44\u6E90\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A\u627E\u4E0D\u5230\u8D44\u6E90[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1AAutoScalingVMTemplateVo]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:870
# args: vmTemplateVO.getVmInstanceOfferingUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:InstanceOfferingVO]\ not\ found = \u627E\u4E0D\u5230\u8D44\u6E90\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A\u627E\u4E0D\u5230\u8D44\u6E90[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1AInstanceOfferingVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:881
# args: vmTemplateVO.getImageUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:ImageVO]\ not\ found = \u627E\u4E0D\u5230\u8D44\u6E90\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A\u627E\u4E0D\u5230\u8D44\u6E90[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1AImageVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:905
# args: diskOffering
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:DiskOfferingVO]\ not\ found = \u627E\u4E0D\u5230\u8D44\u6E90\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A\u627E\u4E0D\u5230\u8D44\u6E90[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1ADiskOfferingVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:918
# args: l3Uuid
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:L3NetworkVO]\ not\ found = \u627E\u4E0D\u5230\u8D44\u6E90\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A\u627E\u4E0D\u5230\u8D44\u6E90[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1AL3NetworkVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:934
# args: vmTemplateVO.getDefaultL3NetworkUuid(),l3Uuids
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids\ %s = \u9ED8\u8BA4L3NetworkUuid[Uuid\uFF1A{0}]\u4E0D\u5728L3NetworkUuids{1}\u4E2D

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1018
# args: self.getUuid(),AutoScalingGroupState.Enabled.toString()
the\ auto\ scaling\ group[%s]\ state\ error,\ expected\:\ %s\ state = \u81EA\u52A8\u7F29\u653E\u7EC4[{0}]\u72B6\u6001\u9519\u8BEF\uFF0C\u5E94\u4E3A\uFF1A{1}\u72B6\u6001

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1055
# args: self.getUuid()
The\ autoScalingGroup[%s]\ not\ attach\ any\ vm\ template = AutoScalingGroup[{0}]\u672A\u9644\u52A0\u4EFB\u4F55VM\u6A21\u677F

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1123
# args: self.getUuid(),vmInstanceUuids,JSONObjectUtil.toJsonString(errors)
autoScalingGroup[%s]\ destroy\ vms[%s]\ failed\ completely,\ errors\ are\ %s = AutoScalingGroup[{0}]\u9500\u6BC1\u4E91\u4E3B\u673A[{1}]\u5B8C\u5168\u5931\u8D25\uFF0C\u9519\u8BEF\u4E3A{2}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1330
# args: 
Cannot\ find\ deleted\ target\ instance\ list = \u627E\u4E0D\u5230\u5DF2\u5220\u9664\u7684\u76EE\u6807\u5B9E\u4F8B\u5217\u8868

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1569
# args: 
need\ skip\ autoScalingGroup\ activity = \u9700\u8981\u8DF3\u8FC7\u81EA\u52A8\u7F29\u653E\u7EC4\u6D3B\u52A8

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1835
# args: ruleUuid,JSONObjectUtil.toJsonString(errors)
delete\ autoScalingRule[%s]\ triggers\ failed,\ errors\ are\ %s = \u5220\u9664AutoScalingRule[{0}]\u89E6\u53D1\u5668\u5931\u8D25\uFF0C\u9519\u8BEF\u4E3A{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:2452
# args: removalPolicy.toString()
Unsupported\ RemovalPolicy[%s]\ type = \u4E0D\u652F\u6301RemovalPolicy[{0}]\u7C7B\u578B

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:183
# args: triggerVO.getUuid(),triggerVO.getState()
AutoScalingRuleSchedulerJobTriggerVO[uuid\:%s]\ is\ %s,\ state\ change\ is\ not\ allowed = AutoScalingRuleSchedulerJobTriggerVO[uuid\uFF1A{0}]\u4E3A{1}\uFF0C\u4E0D\u5141\u8BB8\u66F4\u6539\u72B6\u6001

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:192
# args: ruleUuid
AutoScalingRuleSchedulerJobTriggerVO[uuid\:%s]\ is\ be\ in\ cooldownDate = AutoScalingRuleSchedulerJobTriggerVO[uuid\uFF1A{0}]\u5728CooldownDate\u4E2D

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:250
# args: ruleUuid,AutoScalingRuleState.Disabled.toString()
AutoScalingRuleVO[uuid\:%s]\ is\ %s,\ state\ change\ is\ not\ allowed = AutoScalingRuleVO[uuid\uFF1A{0}]\u4E3A{1}\uFF0C\u4E0D\u5141\u8BB8\u66F4\u6539\u72B6\u6001

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:64
# args: 
Failed\ to\ reach\ the\ bare-metal\ chassis,\ please\ make\ sure\:\ 1.\ the\ IPMI\ connection\ is\ active;\ 2.\ the\ IPMI\ Address,\ Port,\ Username\ and\ Password\ are\ correct;\ 3.\ IPMI\ Over\ LAN\ is\ enabled\ in\ BIOS. = \u65E0\u6CD5\u8FDE\u901A\u88F8\u91D1\u5C5E\u8BBE\u5907\uFF0C\u8BF7\u786E\u8BA4\uFF1A1\uFF0C\u7BA1\u7406\u8282\u70B9\u4E0E\u88F8\u91D1\u5C5E\u8BBE\u5907\u8FDC\u7A0B\u63A7\u5236\u53E3\u8FDE\u901A\uFF1B2\uFF0CIPMI\u5730\u5740\u3001\u7AEF\u53E3\u3001\u8D26\u53F7\u3001\u5BC6\u7801\u662F\u6B63\u786E\u7684\uFF1B3\uFF0CBIOS\u4E2D\u542F\u7528LAN\u4E0A\u7684IPMI\u529F\u80FD\u3002

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:111
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ a\ baremetal\ cluster. = \u96C6\u7FA4[uuid:{0}]\u4E0D\u662F\u4E00\u4E2A\u88F8\u91D1\u5C5E\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:155
# args: address,port
IPMI\ Address\ and\ Port\ %s\:%d\ already\ exists. = IPMI\u5730\u5740\u4E3A{0}\uFF0C\u7AEF\u53E3\u4E3A{1}\u7684\u88F8\u91D1\u5C5E\u8BBE\u5907\u5DF2\u7ECF\u5B58\u5728

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:220
# args: clusterUuid
no\ usable\ baremetal\ pxeserver\ attached\ to\ cluster[uuid\:%s] = \u88F8\u91D1\u5C5E\u96C6\u7FA4[uuid:{0}]\u4E2D\u6CA1\u6709\u53EF\u7528\u7684\u90E8\u7F72\u670D\u52A1\u5668

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:175
# args: chassis.getUuid(),chassis.getPxeServerUuid(),cmd.content
baremetal\ chassis[uuid\:%s]\ is\ supposed\ to\ using\ pxeserver[uuid\:%s],\ but\ it\ was\ pxeserver[uuid\:%s]\ that\ actually\ handled\ the\ DHCP\ request = \u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]\u5E94\u5F53\u7531\u90E8\u7F72\u670D\u52A1\u5668[uuid:{1}]\u63D0\u4F9BDHCP\u670D\u52A1\uFF0C\u4F46\u5B9E\u9645\u60C5\u51B5\u662F\u90E8\u7F72\u670D\u52A1\u5668[uuid:{2}]\u63D0\u4F9B\u7684DHCP\u670D\u52A1

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:671
# args: msg.getUuid()
failed\ to\ delete\ baremetal\ chassis\ %s = \u65E0\u6CD5\u5220\u9664\u88F8\u673A\u673A\u7BB1{0}

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:737
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ on\ baremetal\ chassis[uuid\:%s] = \u65E0\u6CD5\u8FDC\u7A0B\u542F\u52A8\u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:753
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ reset\ baremetal\ chassis[uuid\:%s] = \u65E0\u6CD5\u8FDC\u7A0B\u91CD\u542F\u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:764
# args: bmc.getUuid()
Failed\ to\ remotely\ pxe\ boot\ chassis[uuid\:%s] = \u65E0\u6CD5\u8FDC\u7A0B\u8BBE\u7F6E\u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]\u4ECE\u7F51\u5361\u542F\u52A8

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:924
# args: bmc.getUuid()
failed\ to\ connect\ to\ chassis\ [uuid\:%s],\ please\ check\ ipmi\ connection. = \u65E0\u6CD5\u8FDE\u63A5\u5230\u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}], \u8BF7\u786E\u8BA4IPMI\u8FDE\u63A5\u53EF\u7528

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:1010
# args: e.getMessage()
fail\ to\ load\ chassis\ info\ from\ file,\ because\:\ %s = \u65E0\u6CD5\u4ECE\u6587\u4EF6\u4E2D\u8BFB\u53D6\u88F8\u91D1\u5C5E\u8BBE\u5907\u4FE1\u606F\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:59
# args: msg.getChassisUuid()
Baremetal\ chassis[uuid\:%s]\ does\ not\ exist = \u88F8\u673A\u673A\u7BB1[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:65
# args: chassis.getUuid()
Baremetal\ chassis[uuid\:%s]\ is\ not\ Enabled\ or\ Available,\ please\ choose\ another\ one. = \u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]\u88AB\u505C\u7528\u6216\u8005\u5DF2\u88AB\u5206\u914D\uFF0C\u8BF7\u91CD\u65B0\u9009\u62E9

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:71
# args: chassis.getUuid()
no\ corresponding\ pxeserver,\ please\ inspect\ baremetal\ chassis[uuid\:%s]\ again = \u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]\u6CA1\u6709\u5173\u8054\u90E8\u7F72\u670D\u52A1\u5668\uFF0C\u8BF7\u91CD\u65B0\u83B7\u53D6\u786C\u4EF6\u4FE1\u606F

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:84
# args: chassis.getUuid()
No\ hardware\ info\ found\ for\ baremetal\ chassis[uuid\:%s],\ please\ choose\ another\ one. = \u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]\u786C\u4EF6\u4FE1\u606F\u672A\u77E5\uFF0C\u8BF7\u91CD\u65B0\u9009\u62E9

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:95
# args: chassis.getPxeServerUuid()
baremetal\ pxeserver[uuid\:%s]\ is\ neither\ Enabled\ nor\ Connected,\ please\ check = Baremetal Pxeserver[uuid\uFF1A{0}]\u65E2\u672A\u542F\u7528\u4E5F\u672A\u8FDE\u63A5\uFF0C\u8BF7\u68C0\u67E5

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:112
# args: mac
Mac\ address\ %s\ is\ invalid.\ It\ should\ be\ like\ 6c\:b3\:11\:1b\:0b\:1e = MAC\u5730\u5740{0}\u4E0D\u5408\u6CD5

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:118
# args: chassis.getUuid(),mac
Baremetal\ chassis[uuid\:%s]\ doesn't\ have\ nic\ with\ mac\ address\ %s = \u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]\u786C\u4EF6\u4FE1\u606F\u4E2D\u672A\u53D1\u73B0MAC\u5730\u5740\u4E3A{1}\u7684\u7F51\u5361

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:136
# args: 
duplicated\ bm\ bonding\ uuid\ detacted = \u5DF2\u5206\u79BB\u91CD\u590D\u7684BM\u7ED1\u5B9Auuid

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:140
# args: 
Baremetal\ Bonding\ does\ not\ exist = \u88F8\u673A\u710A\u63A5\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:148
# args: 
duplicated\ l3\ network\ uuid\ detacted = \u5DF2\u5206\u79BB\u91CD\u590D\u7684\u4E09\u5C42\u7F51\u7EDCuuid

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:152
# args: 
the\ selected\ l3\ network\ doesn't\ exist = \u9009\u5B9A\u7684\u4E09\u5C42\u7F51\u7EDC\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:165
# args: chassis.getUuid()
the\ selected\ l3\ network\ cannot\ be\ assigned\ to\ chassis[uuid\:%s] = \u65E0\u6CD5\u5C06\u9009\u5B9A\u7684\u4E09\u5C42\u7F51\u7EDC\u5206\u914D\u7ED9\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:177
# args: 
only\ iso\ image\ is\ supported\ in\ zstack\ baremetal\ service = \u76EE\u524D\u4EC5\u652F\u6301\u4E3A\u88F8\u673A\u90E8\u7F72ISO\u955C\u50CF

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:186
# args: 
only\ ImageStoreBackupStorage\ is\ supported\ in\ zstack\ baremetal\ service = \u76EE\u524D\u4EC5\u652F\u6301\u4ECE\u955C\u50CF\u4ED3\u5E93\u4E2D\u4E3A\u88F8\u673A\u9009\u62E9ISO\u955C\u50CF

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:200
# args: 
cannot\ recover\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = \u53EA\u80FD\u6062\u590D\u5904\u4E8EDestroyed\u72B6\u6001\u7684\u88F8\u91D1\u5C5E\u7269\u7406\u673A

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:212
# args: 
cannot\ expunge\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = \u53EA\u80FD\u5F7B\u5E95\u5220\u9664\u5904\u4E8EDestroyed\u72B6\u6001\u7684\u88F8\u91D1\u5C5E\u7269\u7406\u673A

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:461
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ off\ baremetal\ chassis[uuid\:%s] = \u65E0\u6CD5\u8FDC\u7A0B\u5173\u95ED\u88F8\u91D1\u5C5E\u8BBE\u5907[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:266
# args: self.getClusterUuid()
failed\ to\ allocate\ baremetal\ pxeserver,\ make\ sure\ there\ is\ a\ pxeserver\ with\ enough\ available\ capacity\ attached\ on\ cluster[uuid\:%s] = \u5206\u914D\u90E8\u7F72\u670D\u52A1\u5668\u5931\u8D25\uFF0C\u8BF7\u786E\u8BA4\u88F8\u91D1\u5C5E\u96C6\u7FA4[uuid:{0}]\u4E2D\u6240\u6302\u8F7D\u7684\u90E8\u7F72\u670D\u52A1\u5668\u62E5\u6709\u8DB3\u591F\u7684\u5269\u4F59\u5B58\u50A8\u7A7A\u95F4\u7528\u4E8E\u4FDD\u5B58\u955C\u50CF\u7F13\u5B58

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:453
# args: reboot ? "reset" : "on",bmc.getUuid()
Failed\ to\ remotely\ power\ %s\ baremetal\ chassis[uuid\:%s] = \u65E0\u6CD5\u8FDC\u7A0B\u542F\u52A8{0}\u88F8\u673A\u673A\u7BB1[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1141
# args: msg.getL2NetworkUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ l2[uuid\:%s] = \u5B58\u5728\u4F7F\u7528\u4ECEL2[uuid\uFF1A{0}]\u5206\u914D\u7684IP\u5730\u5740\u7684BM\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1149
# args: msg.getL3NetworkUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ l3[uuid\:%s] = \u5B58\u5728\u4F7F\u7528\u4ECEL3[uuid\uFF1A{0}]\u5206\u914D\u7684IP\u5730\u5740\u7684BM\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1169
# args: msg.getIpRangeUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ ip\ range[uuid\:%s] = \u5B58\u5728\u4F7F\u7528\u4ECEIP\u8303\u56F4[uuid\uFF1A{0}]\u5206\u914D\u7684IP\u5730\u5740\u7684BM\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:39
# args: 
creating\ bm\ bonding\ is\ only\ allowed\ before\ creating\ bm\ instance = \u53EA\u80FD\u5728\u521B\u5EFABM\u5B9E\u4F8B\u4E4B\u524D\u521B\u5EFABM\u7ED1\u5B9A

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:48
# args: msg.getName()
bond\ name\ %s\ already\ exists = \u7ED3\u5408\u540D\u79F0{0}\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:73
# args: slave
Slave\ address\ %s\ is\ invalid.\ It\ should\ be\ like\ 6c\:b3\:11\:1b\:0b\:1e,6c\:b3\:11\:1b\:0b\:1f = \u4ECE\u5C5E\u5730\u5740{0}\u65E0\u6548\u3002\u5B83\u5E94\u8BE5\u7C7B\u4F3C\u4E8E6C\uFF1AB3:11:1B:0B:1E\uFF0C6C\uFF1AB3:11:1B:0B:1F

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:79
# args: slave,msg.getChassisUuid()
mac\ address\ %s\ does\ not\ belong\ to\ chassis[uuid\:%s] = MAC\u5730\u5740{0}\u4E0D\u5C5E\u4E8E\u673A\u7BB1[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:85
# args: slave
mac\ address\ %s\ is\ already\ a\ bond\ slave = MAC\u5730\u5740{0}\u5DF2\u662F\u7ED1\u5B9A\u4ECE\u5C5E\u5730\u5740

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:43
# args: 
cannot\ update\ predefined\ preconfiguration\ templates = \u65E0\u6CD5\u66F4\u65B0\u9884\u5B9A\u4E49\u7684\u9884\u914D\u7F6E\u6A21\u677F

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:55
# args: 
cannot\ delete\ predefined\ preconfiguration\ templates = \u65E0\u6CD5\u5220\u9664\u9884\u5B9A\u4E49\u7684\u9884\u914D\u7F6E\u6A21\u677F

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:63
# args: 
cannot\ change\ state\ of\ predefined\ preconfiguration\ templates = \u65E0\u6CD5\u66F4\u6539\u9884\u5B9A\u4E49\u7684\u9884\u914D\u7F6E\u6A21\u677F\u7684\u72B6\u6001

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationManagerImpl.java:66
# args: msg.getTemplateUuid()
cannot\ find\ PreconfigurationTemplateVO[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230PreConfigurationTemplateVo[uuid\uFF1A{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:69
# args: netmask
PXE\ Server\ DHCP\ Range\ Netmask\ %s\ is\ invalid. = \u90E8\u7F72\u670D\u52A1\u5668DHCP\u670D\u52A1\u5B50\u7F51\u63A9\u7801{0}\u975E\u6CD5

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:75
# args: begin,end
PXE\ Server\ DHCP\ Range\ Start\ %s\ and\ Range\ Stop\ %s\ do\ not\ belong\ to\ the\ same\ subnet. = \u90E8\u7F72\u670D\u52A1\u5668DHCP\u5730\u5740\u533A\u95F4\u8D77\u59CBIP{0}\u548C\u7ED3\u675FIP{1}\u4E0D\u5C5E\u4E8E\u4E00\u4E2A\u5B50\u7F51\u5185

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:92
# args: msg.getHostname()
PXE\ Server\ with\ hostname\ %s\ already\ exists. = \u5730\u5740\u4E3A{0}\u7684\u90E8\u7F72\u670D\u52A1\u5668\u5DF2\u7ECF\u5B58\u5728

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:103
# args: msg.getHostname()
there\ is\ already\ a\ baremetal2\ gateway\ with\ management\ ip\ %s,\ do\ not\ use\ it\ to\ create\ baremetal\ pxe\ server = \u5DF2\u5B58\u5728\u7BA1\u7406IP\u4E3A{0}\u7684BareMetal2\u7F51\u5173\uFF0C\u8BF7\u4E0D\u8981\u4F7F\u7528\u5B83\u6765\u521B\u5EFABareMetal PXE\u670D\u52A1\u5668

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:110
# args: 
storagePath\ should\ be\ an\ absolute\ path = \u90E8\u7F72\u670D\u52A1\u5668\u7684\u5B58\u50A8\u8DEF\u5F84\u5FC5\u987B\u662F\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:126
# args: msg.getHostname()
failed\ to\ connect\ to\ %s,\ please\ check\ network\ connection\ between\ zstack\ management\ node\ and\ baremetal\ pxeserver = \u8BF7\u68C0\u67E5\u7BA1\u7406\u8282\u70B9\u4E0E\u90E8\u7F72\u670D\u52A1\u5668{0}\u4E4B\u95F4\u7684\u7F51\u7EDC\u8FDE\u63A5

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:136
# args: msg.getHostname()
no\ local\ repo\ found\ under\ /opt/zstack-dvd\ of\ %s,\ please\ download\ zstack\ iso\ and\ create\ local\ repo\ first = \u90E8\u7F72\u670D\u52A1\u5668{0}\u4E2D\u7F3A\u5C11\u4F7F\u7528ZStack ISO\u521B\u5EFA\u7684\u672C\u5730\u6E90

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:146
# args: msg.getDhcpInterface()
PXE\ Server\ DHCP\ Interface\ %s\ does\ not\ exists,\ or\ it\ does\ not\ have\ an\ IP\ address. = \u90E8\u7F72\u670D\u52A1\u5668DHCP\u63A5\u53E3{0}\u4E0D\u5B58\u5728\uFF0C\u6216\u8005\u5B83\u6CA1\u6709IP\u5730\u5740

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:155
# args: msg.getDhcpRangeBegin(),msg.getDhcpRangeEnd(),msg.getDhcpInterface()
%s\ ~\ %s\ cannot\ connect\ to\ dhcp\ interface\ %s = {0} ~ {1} \u65E0\u6CD5\u8FDE\u901ADHCP\u76D1\u542C\u7F51\u5361{2}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:192
# args: msg.getClusterUuid(),msg.getPxeServerUuid()
cluster[uuid\:%s]\ and\ pxeserver[uuid\:%s]\ don't\ belong\ to\ one\ zone = \u88F8\u91D1\u5C5E\u96C6\u7FA4[uuid:{0}]\u548C\u90E8\u7F72\u670D\u52A1\u5668[uuid:{1}]\u4E0D\u5C5E\u4E8E\u540C\u4E00\u4E2A\u533A\u57DF

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:201
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ baremetal\ cluster = \u96C6\u7FA4[uuid:{0}]\u4E0D\u662F\u4E00\u4E2A\u88F8\u91D1\u5C5E\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:212
# args: msg.getPxeServerUuid(),msg.getClusterUuid()
baremetal\ pxeserver[uuid\:%s]\ already\ attached\ to\ cluster[uuid\:%s] = \u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u5230\u88F8\u91D1\u5C5E\u96C6\u7FA4[uuid:{1}]\uFF0C\u65E0\u9700\u518D\u6B21\u6302\u8F7D

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:238
# args: msg.getPxeServerUuid(),msg.getClusterUuid(),ip,begin,end
baremetal\ pxeserver[uuid\:%s]\ is\ not\ compatible\ with\ baremetal\ instances\ in\ cluster[uuid\:%s],\ existing\ nic\ ip\ %s\ is\ out\ of\ pxeserver\ dhcp\ range\ %s\ ~\ %s. = \u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u4E0D\u9002\u5408\u4E8E\u96C6\u7FA4[uuid:{1}]\uFF0C\u56E0\u4E3A\u96C6\u7FA4\u4E2D\u5DF2\u6709\u7684\u88F8\u91D1\u5C5E\u7269\u7406\u673A\u7F51\u5361\u5730\u5740{2}\u8D85\u51FA\u4E86\u90E8\u7F72\u670D\u52A1\u5668\u7684DHCP\u8303\u56F4{3} ~ {4}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:255
# args: msg.getPxeServerUuid(),msg.getClusterUuid()
baremetal\ pxeserver[uuid\:\ %s]\ not\ attached\ to\ cluster[uuid\:\ %s] = \u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u88F8\u91D1\u5C5E\u96C6\u7FA4[uuid:{1}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:295
# args: self.getUuid()
failed\ to\ init\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = \u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u521D\u59CB\u5316\u914D\u7F6E\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:432
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = \u5728\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u4E0A\u521B\u5EFA\u88F8\u91D1\u5C5E\u7269\u7406\u673A\u76F8\u5173\u914D\u7F6E\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:463
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = \u5728\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u4E0A\u5220\u9664\u88F8\u91D1\u5C5E\u7269\u7406\u673A\u76F8\u5173\u914D\u7F6E\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:494
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ novnc\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = \u5728\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u4E0A\u521B\u5EFA\u88F8\u91D1\u5C5E\u7269\u7406\u673ANoVNC\u4EE3\u7406\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:525
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ novnc\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = \u5728\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u4E0A\u5220\u9664\u88F8\u91D1\u5C5E\u7269\u7406\u673ANoVNC\u4EE3\u7406\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:558
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ nginx\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = \u5728\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u4E0A\u521B\u5EFA\u88F8\u91D1\u5C5E\u7269\u7406\u673ANginx\u4EE3\u7406\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:589
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ nginx\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = \u5728\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u4E0A\u5220\u9664\u88F8\u91D1\u5C5E\u7269\u7406\u673ANginx\u4EE3\u7406\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:620
# args: self.getUuid()
failed\ to\ start\ baremetal\ pxeserver[uuid\:%s] = \u542F\u52A8\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:653
# args: self.getUuid()
failed\ to\ stop\ baremetal\ pxeserver[uuid\:%s] = \u505C\u6B62\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:968
# args: msg.getChassisUuid(),self.getUuid()
failed\ to\ create\ dhcp\ config\ of\ chassis[uuid\:%s]\ on\ pxeserver[uuid\:%s] = \u65E0\u6CD5\u5728Pxeserver[uuid\uFF1A{1}]\u4E0A\u521B\u5EFA\u673A\u7BB1[uuid\uFF1A{0}]\u7684DHCP\u914D\u7F6E

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:997
# args: msg.getChassisUuid(),self.getUuid()
failed\ to\ delete\ dhcp\ config\ of\ chassis[uuid\:%s]\ on\ pxeserver[uuid\:%s] = \u65E0\u6CD5\u5220\u9664\u673A\u7BB1[uuid\uFF1A{0}]\uFF08\u5728Pxeserver[uuid\uFF1A{1}]\u4E0A\uFF09\u7684DHCP\u914D\u7F6E

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1055
# args: self.getUuid(),ret.uuid
the\ uuid\ of\ baremtal\ pxeserver\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = Baremtal PXEServer\u4EE3\u7406\u7684uuid\u5DF2\u66F4\u6539[\u5E94\u4E3A\uFF1A{0}\uFF0C\u5B9E\u9645\u4E3A\uFF1A{1}]\uFF0C\u4EE3\u7406\u5F88\u53EF\u80FD\u5DF2\u624B\u52A8\u91CD\u65B0\u542F\u52A8\u3002\u53D1\u51FA\u91CD\u65B0\u8FDE\u63A5\u4EE5\u540C\u6B65\u72B6\u6001

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1270
# args: url,rsp.error
unable\ to\ connect\ to\ baremetal\ pxeserver[url\:%s],\ because\ %s = \u8FDE\u63A5\u90E8\u7F72\u670D\u52A1\u5668[uuid:{0}]\u5931\u8D25\uFF0C\u56E0\u4E3A: {1}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1362
# args: cache.getImageUuid()
failed\ to\ mount\ baremetal\ cache\ of\ image[uuid\:%s] = \u6302\u8F7D\u88F8\u91D1\u5C5E\u955C\u50CF\u7F13\u5B58[uuid:{0}]\u5931\u8D25

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1467
# args: msg.getImageUuid()
no\ enough\ space\ left\ in\ baremetal\ image\ cache\ for\ image[uuid\:%s] = \u90E8\u7F72\u670D\u52A1\u5668\u5B58\u50A8\u8DEF\u5F84\u5269\u4F59\u7A7A\u95F4\u4E0D\u8DB3

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1563
# args: 
unsupported\ backup\ storage\ type\ for\ baremetal = \u88F8\u91D1\u5C5E\u7BA1\u7406\u6240\u4E0D\u652F\u6301\u7684\u955C\u50CF\u670D\u52A1\u5668\u7C7B\u578B

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:59
# args: msg.getName()
bond\ name\ %s\ has\ been\ existed = \u503A\u5238\u540D\u79F0{0}\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:71
# args: mac
nic\ with\ mac\:%s\ has\ been\ bonded = \u5DF2\u7ED1\u5B9A\u5177\u6709MAC\uFF1A{0}\u7684NIC

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:98
# args: chassisUuid
cannot\ find\ the\ cluster\ of\ baremetal2\ chassis[uuid\:%s],\ maybe\ it\ doesn't\ exist = \u627E\u4E0D\u5230BareMetal2\u673A\u7BB1[uuid\uFF1A{0}]\u7684\u96C6\u7FA4\uFF0C\u8BE5\u96C6\u7FA4\u53EF\u80FD\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:107
# args: clusterUuid
there\ is\ no\ baremetal2\ gateway\ found\ in\ cluster[uuid\:%s] = \u5728\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u627E\u4E0D\u5230BareMetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:116
# args: clusterUuid
there\ is\ no\ usable\ baremetal2\ gateway\ found\ in\ cluster[uuid\:%s] = \u5728\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u627E\u4E0D\u5230\u53EF\u7528\u7684Baremetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:124
# args: clusterUuid
there\ is\ no\ baremetal2\ provision\ network\ found\ in\ cluster[uuid\:%s] = \u5728\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u627E\u4E0D\u5230BareMetal2\u914D\u7F6E\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:132
# args: provisionNetworkUuid
baremetal2\ provision\ network[uuid\:%s]\ is\ not\ usable,\ make\ sure\ it's\ Enabled = Baremetal2\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u4E0D\u53EF\u7528\uFF0C\u8BF7\u786E\u4FDD\u5B83\u5DF2\u542F\u7528

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:78
# args: hardwareInfo
wrong\ baremetal2\ chassis\ hardware\ info\ format\:\ %s = \u9519\u8BEF\u7684Baremetal2\u673A\u7BB1\u786C\u4EF6\u4FE1\u606F\u683C\u5F0F\uFF1A{0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:87
# args: info.architecture,clusterArchitecture
the\ cpu\ architecture\ of\ the\ chassis[arch\:%s]\ and\ the\ cluster[arch\:%s]\ don't\ match = \u673A\u7BB1[arch\uFF1A{0}]\u548C\u96C6\u7FA4[arch\uFF1A{1}]\u7684CPU\u4F53\u7CFB\u7ED3\u6784\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:97
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ baremetal2\ chassis\ with\ boot\ mode\ %s\ is\ supported = \u4EC5\u652F\u6301\u5F15\u5BFC\u6A21\u5F0F\u4E3A{0}\u7684BareMetal2\u673A\u7BB1

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:108
# args: hardwareInfo
wrong\ baremetal2\ chassis\ nic\ hardware\ info\ format\:\ %s = \u9519\u8BEF\u7684Baremetal2\u673A\u7BB1NIC\u786C\u4EF6\u4FE1\u606F\u683C\u5F0F\uFF1A{0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:114
# args: 
there\ must\ be\ one\ and\ only\ one\ provision\ nic\ in\ a\ baremetal2\ chassis = Baremetal2\u673A\u7BB1\u4E2D\u5FC5\u987B\u6709\u4E14\u53EA\u6709\u4E00\u4E2A\u914D\u7F6ENIC

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:124
# args: hardwareInfo
wrong\ baremetal2\ chassis\ disk\ hardware\ info\ format\:\ %s = \u9519\u8BEF\u7684Baremetal2\u673A\u7BB1\u78C1\u76D8\u786C\u4EF6\u4FE1\u606F\u683C\u5F0F\uFF1A{0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:167
# args: 
other\ chassis\ has\ nics\ with\ the\ same\ mac\ address,\ which\ is\ impossible = \u5176\u4ED6\u673A\u7BB1\u5177\u6709\u76F8\u540CMAC\u5730\u5740\u7684NIC\uFF0C\u8FD9\u662F\u4E0D\u53EF\u80FD\u7684

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:372
# args: msg.getClusterUuid()
BareMetal2\ Chassis[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled = Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\u6216\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:438
# args: msg.getRequiredClusterUuids()
no\ available\ baremetal2\ chassis\ found\ in\ baremetal2\ clusters[uuids\:%s] = \u5728Baremetal2\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u53EF\u7528\u7684Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:430
# args: 
no\ available\ baremetal2\ chassis\ found = \u627E\u4E0D\u5230\u53EF\u7528\u7684Baremetal2\u673A\u7BB1

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:82
# args: address
IPMI\ Address\ %s\ is\ not\ valid = IPMI\u5730\u5740{0}\u662F\u65E0\u6548\u7684

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:121
# args: address,port
Baremetal\ Chassis\ of\ IPMI\ address\ %s\ and\ IPMI\ port\ %d\ has\ already\ been\ created. = IPMI\u5730\u5740\u4E3A{0}\uFF0C\u7AEF\u53E3\u4E3A{1}\u7684\u88F8\u91D1\u5C5E\u8BBE\u5907\u5DF2\u7ECF\u88AB\u521B\u5EFA

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:111
# args: address,port
BareMetal2\ Chassis\ of\ IPMI\ address\ %s\ and\ IPMI\ port\ %d\ has\ already\ been\ created. = \u5DF2\u521B\u5EFAIPMI\u5730\u5740\u4E3A{0}\u3001IPMI\u7AEF\u53E3\u4E3A{1}\u7684BareMetal2\u673A\u7BB1\u3002

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:133
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ does\ not\ exists. = \u96C6\u7FA4[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:146
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ Enabled. = \u96C6\u7FA4[uuid:{0}]\u5904\u4E8E\u505C\u7528\u72B6\u6001

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:74
# args: address,port
Bare\ Metal\ IPMI\ 2\ Chassis\ %s\:%d\ already\ exists = \u88F8\u673AIPMI 2\u673A\u7BB1{0}\uFF1A{1}\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:93
# args: 
Failed\ to\ reach\ the\ baremetal2\ chassis,\ please\ make\ sure\:\ 1.\ the\ IPMI\ connection\ is\ active;\ 2.\ the\ IPMI\ Address,\ Port,\ Username\ and\ Password\ are\ correct;\ 3.\ IPMI\ Over\ LAN\ is\ enabled\ in\ BIOS. = \u65E0\u6CD5\u8BBF\u95EEBaremetal2\u673A\u7BB1\uFF0C\u8BF7\u786E\u4FDD:1.IPMI\u8FDE\u63A5\u5904\u4E8E\u6D3B\u52A8\u72B6\u6001\uFF1B2.IPMI\u5730\u5740\u3001\u7AEF\u53E3\u3001\u7528\u6237\u540D\u548C\u5BC6\u7801\u6B63\u786E\uFF1B3.\u5728BIOS\u4E2D\u542F\u7528\u4E86IPMI over LAN\u3002

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:140
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ a\ BareMetal2\ Cluster. = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E0D\u662FBareMetal2\u96C6\u7FA4\u3002

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:178
# args: clusterUuid
no\ usable\ baremetal2\ gateway\ in\ cluster[uuid\:%s] = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u6CA1\u6709\u53EF\u7528\u7684Baremetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:134
# args: self.getUuid()
failed\ to\ power\ on\ baremetal2\ ipmi\ chassis[uuid\:%s] = \u65E0\u6CD5\u6253\u5F00BareMetal2 IPMI\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:206
# args: self.getUuid()
failed\ to\ power\ off\ baremetal2\ ipmi\ chassis[uuid\:%s] = \u65E0\u6CD5\u5173\u95EDBareMetal2 IPMI\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:249
# args: self.getUuid()
failed\ to\ power\ reset\ baremetal2\ ipmi\ chassis[uuid\:%s] = \u65E0\u6CD5\u91CD\u65B0\u542F\u52A8BareMetal2 IPMI\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:340
# args: self.getUuid()
Failed\ to\ remotely\ ipxe\ boot\ chassis[uuid\:%s] = \u65E0\u6CD5\u8FDC\u7A0BIPXE\u5F15\u5BFC\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:76
# args: e.getMessage()
fail\ to\ load\ baremetal2\ ipmi\ chassis\ info\ from\ file,\ because\:\ %s = \u65E0\u6CD5\u4ECE\u6587\u4EF6\u52A0\u8F7DBareMetal2 IPMI\u673A\u7BB1\u4FE1\u606F\uFF0C\u539F\u56E0\u662F\uFF1A{0}

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:94
# args: 
the\ api\ message's\ chassis\ type\ is\ ipmi,\ but\ it's\ not\ an\ APICreateBareMetal2ChassisHardwareInfoMsg = API\u6D88\u606F\u7684\u673A\u7BB1\u7C7B\u578B\u4E3AIPMI\uFF0C\u4F46\u5B83\u4E0D\u662FAPICreateBareMetal2ChassisHardwareInfoMsg

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:104
# args: imsg.getIpmiAddress(),imsg.getIpmiPort()
received\ hardware\ info\ for\ unknown\ baremetal2\ chassis[ipmi_addr\:%s,\ ipmi_port\:%d] = \u6536\u5230\u672A\u77E5Baremetal2\u673A\u7BB1\u7684\u786C\u4EF6\u4FE1\u606F[IPMI_\u5730\u5740\uFF1A{0}\uFF0CIPMI_\u7AEF\u53E3\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:84
# args: 
cluster\ type\ and\ hypervisor\ type\ should\ all\ be\ baremetal2\ or\ all\ not = \u96C6\u7FA4\u7C7B\u578B\u548C\u4E91\u4E3B\u673A\u7BA1\u7406\u7A0B\u5E8F\u7C7B\u578B\u5E94\u5168\u90E8\u4E3ABareMetal2\u6216\u5168\u90E8\u4E3A\u975EBareMetal2

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:90
# args: 
the\ architecture\ must\ be\ set\ when\ create\ new\ baremetal2\ clusters = \u521B\u5EFA\u65B0\u7684Baremetal2\u96C6\u7FA4\u65F6\u5FC5\u987B\u8BBE\u7F6E\u4F53\u7CFB\u7ED3\u6784

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:101
# args: 
do\ not\ add\ host\ into\ baremetal2\ cluster = \u4E0D\u8981\u5C06\u7269\u7406\u673A\u6DFB\u52A0\u5230BareMetal2\u96C6\u7FA4\u4E2D

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:123
# args: 
l2\ network\ should\ not\ have\ the\ same\ interface\ name\ with\ provision\ network\ that's\ already\ attached\ to\ the\ cluster = \u4E8C\u5C42\u7F51\u7EDC\u4E0D\u5E94\u4E0E\u5DF2\u8FDE\u63A5\u5230\u96C6\u7FA4\u7684Provision\u7F51\u7EDC\u5177\u6709\u76F8\u540C\u7684\u63A5\u53E3\u540D\u79F0

# at: src/main/java/org/zstack/baremetal2/cluster/CephStorageAttachBm2ClusterMetric.java:29
# args: 
Can\ not\ attach\ third-party\ ceph\ with\ token\ into\ aarch64\ cluster. = \u65E0\u6CD5\u4F7F\u7528\u4EE4\u724C\u5C06\u7B2C\u4E09\u65B9 \u5206\u5E03\u5F0F\u5B58\u50A8 \u9644\u52A0\u5230Aarch64\u96C6\u7FA4\u3002

# at: src/main/java/org/zstack/baremetal2/cluster/LocalStorageAttachBm2ClusterMetric.java:12
# args: 
Can\ not\ attach\ local\ storage\ into\ baremetal2\ cluster. = \u65E0\u6CD5\u5C06\u672C\u5730\u5B58\u50A8\u8FDE\u63A5\u5230BareMetal2\u96C6\u7FA4\u3002

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1328
# args: msg.getInstanceUuid()
no\ provision\ nic\ found\ for\ baremetal2\ instance[uuid\:%s] = \u672A\u627E\u5230BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u7684\u914D\u7F6ENIC

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:269
# args: self.getUuid(),msg.getInstanceUuid()
failed\ to\ delete\ convert\ volume\ to\ chassis\ local\ disk\ configurations\ in\ gateway[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s] = \u65E0\u6CD5\u5220\u9664\u5C06\u7F51\u5173[uuid\uFF1A{0}]\u4E2D\u7684\u5377\u8F6C\u6362\u4E3A\u673A\u7BB1\u672C\u5730\u78C1\u76D8\u914D\u7F6E\uFF08\u5BF9\u4E8EBareMetal2\u5B9E\u4F8B[uuid\uFF1A{1}]\uFF09

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1342
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ create\ provision\ configurations\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u4E3A\u7F51\u5173[uuid\uFF1A{1}]\u4E2D\u7684BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u521B\u5EFA\u8BBE\u7F6E\u914D\u7F6E\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:418
# args: chassis.getUuid()
chassis\:%s\ disk\ does\ not\ have\ wwn\ info,\ please\ inspect\ chassis\ and\ try\ again = \u673A\u7BB1\uFF1A{0}\u78C1\u76D8\u6CA1\u6709WWN\u4FE1\u606F\uFF0C\u8BF7\u68C0\u67E5\u673A\u7BB1\u5E76\u91CD\u8BD5

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1809
# args: chassis.getUuid()
failed\ to\ power\ on\ baremetal2\ chassis[uuid\:%s]\ using\ ipmitool = \u65E0\u6CD5\u4F7F\u7528ipmitool\u6253\u5F00Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u7684\u7535\u6E90

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:567
# args: 
convert\ image\ data\ to\ local\ disk\ failed = \u5C06\u56FE\u50CF\u6570\u636E\u8F6C\u6362\u5230\u672C\u5730\u78C1\u76D8\u5931\u8D25

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:576
# args: instanceVO.getUuid(),chassis.getUuid(),BareMetal2GlobalConfig.CONVERT_VOLUME_TO_LOCAL_DISK_TIMEOUT.value(Integer.class)
baremetal2\ instance[uuid\:%s]\ convert\ volume\ failed\ on\ baremetal2\ chassis[uuid\:%s]\ ,\ timeout\ after\ %s\ minutes\  = Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u8F6C\u6362\u5377\u5728Baremetal2\u673A\u7BB1[uuid\uFF1A{1}]\u4E0A\u5931\u8D25\uFF0C{2}\u5206\u949F\u540E\u8D85\u65F6

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1235
# args: self.getUuid(),ret.getError()
failed\ to\ prepare\ provision\ network\ in\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5728\u7F51\u5173[uuid\uFF1A{0}]\u4E2D\u51C6\u5907\u8BBE\u7F6E\u7F51\u7EDC\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1304
# args: self.getUuid(),ret.getError()
failed\ to\ destroy\ provision\ network\ in\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u9500\u6BC1\u7F51\u5173[uuid\uFF1A{0}]\u4E2D\u7684\u8BBE\u7F6E\u7F51\u7EDC\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1391
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ delete\ provision\ configurations\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5220\u9664Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\uFF08\u5728\u7F51\u5173[uuid\uFF1A{1}]\u4E2D\uFF09\u7684\u8BBE\u7F6E\u914D\u7F6E\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1435
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ create\ console\ proxy\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u4E3A\u7F51\u5173[uuid\uFF1A{1}]\u4E2D\u7684BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u521B\u5EFA\u63A7\u5236\u53F0\u4EE3\u7406\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1492
# args: msg.getOldDefaultL3Uuid(),msg.getNewDefaultL3Uuid(),msg.getInstanceUuid(),ret.getError()
failed\ to\ change\ default\ network\ from\ l3[uuid\:%s]\ to\ l3[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5C06\u9ED8\u8BA4\u7F51\u7EDC\u4ECE\u7B2C3\u5C42[uuid\uFF1A{0}]\u66F4\u6539\u4E3A\u7B2C3\u5C42[uuid\uFF1A{1}]\uFF08\u5BF9\u4E8EBareMetal2\u5B9E\u4F8B[UUid\uFF1A{2}]\uFF09\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1531
# args: msg.getInstanceUuid(),msg.getGatewayUuid(),ret.getError()
failed\ to\ ping\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u901A\u8FC7\u7F51\u5173[uuid\uFF1A{1}]Ping BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1578
# args: msg.getInstanceUuid(),msg.getGatewayUuid(),ret.getError()
failed\ to\ change\ the\ password\ of\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u901A\u8FC7\u7F51\u5173[uuid\uFF1A{1}]\u66F4\u6539BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u7684\u5BC6\u7801\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1677
# args: 
third\ party\ ceph\ with\ token\ not\ support\ local\ disk\ yet = \u5E26\u6709\u4EE4\u724C\u7684\u7B2C\u4E09\u65B9 \u5206\u5E03\u5F0F\u5B58\u50A8 \u5C1A\u4E0D\u652F\u6301\u672C\u5730\u78C1\u76D8

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1838
# args: chassis.getUuid()
failed\ to\ power\ off\ baremetal2\ chassis[uuid\:%s]\ using\ ipmitool = \u65E0\u6CD5\u4F7F\u7528ipmitool\u5173\u95EDBaremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u7684\u7535\u6E90

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1923
# args: chassis.getUuid(),timeout
baremetal2\ chassis[uuid\:%s]\ is\ still\ not\ POWER_OFF\ %d\ seconds\ later = Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u5728{1}\u79D2\u540E\u4ECD\u672A\u5173\u95ED\u7535\u6E90_\u3002

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1896
# args: bm.getUuid(),ret.getError()
failed\ to\ power\ off\ baremetal2\ instance[uuid\:%s]\ by\ bm\ agent,\ because\ %s = \u65E0\u6CD5\u901A\u8FC7BM\u4EE3\u7406\u5173\u95EDBareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2103
# args: 
vmInstanceUuids\ is\ empty = VMInstanceUuids\u4E3A\u7A7A

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2109
# args: self.getUuid(),self.getStatus()
the\ baremetal2\ gateway[uuid\:%s,\ status\:%s]\ is\ not\ Connected = Baremetal2\u7F51\u5173[uuid\uFF1A{0}\uFF0C\u72B6\u6001\uFF1A{1}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2186
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ not\ connected,\ cannot\ attach\ nic\ to\ it = BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\uFF0C\u65E0\u6CD5\u5C06NIC\u8FDE\u63A5\u5230\u8BE5\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2209
# args: nicUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ attach\ nic[uuid\:%s]\ to\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u901A\u8FC7\u7F51\u5173[uuid\uFF1A{2}]\u5C06NIC[uuid\uFF1A{0}]\u8FDE\u63A5\u5230BareMetal2\u5B9E\u4F8B[Uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2252
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ is\ not\ connected,\ cannot\ detach\ nic\ from\ it = BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\uFF0C\u65E0\u6CD5\u5C06NIC\u4E0E\u5176\u5206\u79BB

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2275
# args: nicUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ detach\ nic[uuid\:%s]\ from\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u901A\u8FC7\u7F51\u5173[uuid\uFF1A{2}]\u4ECEBareMetal2\u5B9E\u4F8B[uuid\uFF1A{1}]\u5206\u79BBNIC[Uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2441
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ is\ not\ connected,\ cannot\ attach\ volume\ to\ it = BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\uFF0C\u65E0\u6CD5\u5C06\u5377\u9644\u52A0\u5230\u8BE5\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2338
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ prepare\ volume[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u901A\u8FC7\u7F51\u5173[uuid\uFF1A{2}]\u4E3ABareMetal2\u5B9E\u4F8B[uuid\uFF1A{1}]\u51C6\u5907\u5377[Uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2399
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ attach\ volume[uuid\:%s]\ to\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u901A\u8FC7\u7F51\u5173[uuid\uFF1A{2}]\u5C06\u5377[uuid\uFF1A{0}]\u9644\u52A0\u5230BareMetal2\u5B9E\u4F8B[Uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2480
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ get\ volume[uuid\:%s]\ lunid\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u83B7\u53D6\u5377[uuid\uFF1A{0}]\u7684lunid\uFF08\u9488\u5BF9\u7F51\u5173[uuid\uFF1A{2}]\u4E2D\u7684BareMetal2\u5B9E\u4F8B[Uuid\uFF1A{1}]\uFF09\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2535
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ detach\ volume[uuid\:%s]\ from\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u901A\u8FC7\u7F51\u5173[uuid\uFF1A{2}]\u5206\u79BB\u5377[uuid\uFF1A{0}]\uFF08\u4ECEBareMetal2\u5B9E\u4F8B[Uuid\uFF1A{1}]\uFF09\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2570
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ destroy\ volume[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u9500\u6BC1\u7F51\u5173[uuid\uFF1A{2}]\u4E2DBareMetal2\u5B9E\u4F8B[uuid\uFF1A{1}]\u7684\u5377[Uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:100
# args: msg.getManagementIp()
there\ has\ been\ a\ baremetal2\ gateway\ having\ management\ ip\ %s = \u5B58\u5728\u7BA1\u7406IP\u4E3A{0}\u7684BareMetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:66
# args: msg.getManagementIp()
there\ is\ already\ a\ baremetal\ pxe\ server\ with\ management\ ip\ %s,\ do\ not\ use\ it\ to\ create\ baremetal2\ gateway = \u5DF2\u5B58\u5728\u7BA1\u7406IP\u4E3A{0}\u7684Baremetal PXE\u670D\u52A1\u5668\uFF0C\u8BF7\u4E0D\u8981\u4F7F\u7528\u5B83\u6765\u521B\u5EFABaremetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:107
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ management\ ip\ %s = \u5DF2\u5B58\u5728\u7BA1\u7406IP\u4E3A{0}\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:80
# args: msg.getManagementIp()
management\ ip[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = \u7BA1\u7406IP[{0}]\u65E2\u4E0D\u662FIPv4\u5730\u5740\u4E5F\u4E0D\u662F\u6709\u6548\u7684\u7269\u7406\u673A\u540D

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:90
# args: msg.getClusterUuid()
cannot\ add\ baremetal2\ gateway\ in\ non-baremetal2\ cluster[uuid\:%s] = \u65E0\u6CD5\u5728\u975EBaremetal2\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u6DFB\u52A0Baremetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:120
# args: msg.getGatewayUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ gateway[uuid\:%s]\ to\ non-baremetal2\ cluster[uuid\:%s] = \u65E0\u6CD5\u5C06Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u8FDE\u63A5\u5230\u975EBaremetal2\u96C6\u7FA4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:131
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ already\ attached\ to\ cluster[uuid\:%s] = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u96C6\u7FA4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:140
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ can\ only\ attach\ to\ one\ cluster = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u53EA\u80FD\u8FDE\u63A5\u5230\u4E00\u4E2A\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:151
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ not\ attached\ to\ cluster[uuid\:%s],\ no\ need\ to\ detach = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230\u96C6\u7FA4[uuid\uFF1A{1}]\uFF0C\u65E0\u9700\u5206\u79BB

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:156
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ attached\ to\ only\ one\ cluster\ now,\ do\ not\ detach\ it = BareMetal2\u7F51\u5173[uuid\uFF1A{0}]\u73B0\u5728\u4EC5\u8FDE\u63A5\u5230\u4E00\u4E2A\u96C6\u7FA4\uFF0C\u8BF7\u4E0D\u8981\u5C06\u5176\u5206\u79BB

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:164
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ does\ not\ exist = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:168
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ a\ baremetal2\ cluster = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E0D\u662FBareMetal2\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:173
# args: msg.getGatewayUuid()
gateway[uuid\:%s]\ does\ not\ exist = \u7F51\u5173[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:177
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ already\ in\ cluster[uuid\:%s] = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u5DF2\u5728\u96C6\u7FA4[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:181
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ the\ same\ zone\ as\ cluster[uuid\:%s] = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u4E0E\u96C6\u7FA4[uuid\uFF1A{1}]\u4E0D\u5728\u540C\u4E00\u4E2A\u533A\u57DF\u4E2D

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:191
# args: msg.getGatewayUuid()
cannot\ change\ the\ cluster\ of\ baremetal2\ gateway[uuid\:%s]\ when\ there\ are\ running\ instances\ depending\ on\ it = \u5B58\u5728\u4F9D\u8D56\u4E8EBaremetal2\u7F51\u5173[uuid\uFF1A{0}]\u7684\u6B63\u5728\u8FD0\u884C\u7684\u5B9E\u4F8B\u65F6\uFF0C\u65E0\u6CD5\u66F4\u6539\u8BE5\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java:45
# args: 
baremetal2\ instance[uuid\:%s]\ doesn't\ exist,\ cannot\ generate\ its\ console\ url = Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\uFF0C\u65E0\u6CD5\u751F\u6210\u5176\u63A7\u5236\u53F0URL

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java:54
# args: bm.getGatewayUuid(),bm.getUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Connected,\ cannot\ generate\ console\ url\ for\ instance[uuid\:%s] = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\uFF0C\u65E0\u6CD5\u4E3A\u5B9E\u4F8B[uuid\uFF1A{1}]\u751F\u6210\u63A7\u5236\u53F0URL

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayManagerImpl.java:258
# args: resourceUuid
cluster[%s]\ is\ not\ baremetal2\ type = \u96C6\u7FA4[{0}]\u4E0D\u662FBareMetal2\u7C7B\u578B

# at: src/main/java/org/zstack/baremetal2/gateway/allocator/AbstractGatewayAllocatorStrategy.java:102
# args: 
failed\ to\ allocate\ baremetal2\ gateway = \u65E0\u6CD5\u5206\u914DBaremetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/gateway/allocator/BareMetal2GatewayMainAllocatorFlow.java:62
# args: 
no\ available\ baremetal2\ gateway\ found = \u627E\u4E0D\u5230\u53EF\u7528\u7684Baremetal2\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:166
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ baremetal2\ image\ with\ boot\ mode\ %s\ is\ supported = \u4EC5\u652F\u6301\u5F15\u5BFC\u6A21\u5F0F\u4E3A{0}\u7684BareMetal2\u955C\u50CF

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:138
# args: bm2ImageCount
only\ one\ baremetal2\ system\ tag\ is\ allowed,\ but\ %d\ was\ got = \u53EA\u5141\u8BB8\u4E00\u4E2ABaremetal2\u7CFB\u7EDF\u6807\u8BB0\uFF0C\u4F46\u83B7\u5F97\u4E86{0}

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:158
# args: 
only\ root\ volume\ template\ of\ format\ raw/qcow2\ can\ be\ tagged\ with\ baremetal2 = \u53EA\u6709RAW/QCOW2\u683C\u5F0F\u7684\u6839\u5377\u6A21\u677F\u624D\u80FD\u4F7F\u7528BareMetal2\u8FDB\u884C\u6807\u8BB0

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:162
# args: 
the\ bootMode\ tag\ is\ mandatory\ for\ baremetal2\ images = \u5BF9\u4E8EBareMetal2\u955C\u50CF\uFF0Cbootmode\u6807\u8BB0\u662F\u5FC5\u9700\u7684

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java:76
# args: spec.getRequiredChassisDiskUuid(),chassis.getUuid()
required\ chassis\ disk[%s]\ not\ belong\ to\ chassis[%s] = \u6240\u9700\u7684\u673A\u7BB1\u78C1\u76D8[{0}]\u4E0D\u5C5E\u4E8E\u673A\u7BB1[{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java:88
# args: chassis.getUuid(),spec.getImageSpec().getInventory().getUuid()
chassis\ not\ have\ engouh\ capacity\ for\ image[%s] = \u673A\u7BB1\u6CA1\u6709\u8DB3\u591F\u7684\u5BB9\u91CF\u7528\u4E8E\u955C\u50CF[{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:85
# args: 
not\ enough\ information\ to\ determine\ which\ baremetal2\ cluster\ should\ be\ used = \u6CA1\u6709\u8DB3\u591F\u7684\u4FE1\u606F\u6765\u786E\u5B9A\u5E94\u4F7F\u7528\u54EA\u4E2ABareMetal2\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:100
# args: 
no\ baremetal2\ cluster\ found = \u672A\u627E\u5230BareMetal2\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:217
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ primary\ storage\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = \u65E0\u6CD5\u5728\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u4E3ABaremetal2\u5B9E\u4F8B[uuid\uFF1A{1}]\u5206\u914D\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:224
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ gateway\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = \u65E0\u6CD5\u5728\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u4E3ABareMetal2\u5B9E\u4F8B[uuid\uFF1A{1}]\u5206\u914D\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:231
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ chassis\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = \u65E0\u6CD5\u5728\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u4E3ABaremetal2\u5B9E\u4F8B[uuid\uFF1A{1}]\u5206\u914D\u673A\u7BB1

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:262
# args: clusterUuids
only\ baremetal2\ clusters[uuid\:%s]\ meet\ the\ needs\ for\ chassis\ and\ gateway,\ but\ they\ have\ no\ provision\ network\ attached = \u53EA\u6709BareMetal2\u96C6\u7FA4[uuid\uFF1A{0}]\u6EE1\u8DB3\u673A\u7BB1\u548C\u7F51\u5173\u7684\u9700\u6C42\uFF0C\u4F46\u5B83\u4EEC\u6CA1\u6709\u8FDE\u63A5\u7684\u914D\u7F6E\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:253
# args: spec.getRequiredClusterUuids()
no\ baremetal2\ cluster\ found\ in\ clusters[uuid\:%s] = \u5728\u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u627E\u4E0D\u5230BareMetal2\u96C6\u7FA4

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:881
# args: msg.getPrimaryStorageUuidForRootVolume(),msg.getPrimaryStorageUuidForDataVolume()
the\ primary\ storage[%s]\ of\ the\ root\ volume\ and\ the\ primary\ storage[%s]\ of\ the\ data\ volume\ are\ not\ in\ the\ same\ cluster = \u6839\u5377\u7684\u4E3B\u5B58\u50A8[{0}]\u548C\u6570\u636E\u4E91\u76D8\u7684\u4E3B\u5B58\u50A8[{1}]\u4E0D\u5728\u540C\u4E00\u96C6\u7FA4\u4E2D

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:244
# args: networkUuid
make\ sure\ all\ baremetal2\ gateways\ on\ provision\ network[uuid\:%s]\ are\ Connected = \u786E\u4FDD\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u4E0A\u7684\u6240\u6709Baremetal2\u7F51\u5173\u5747\u5DF2\u8FDE\u63A5

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:707
# args: 
neither\ chassisUuid\ nor\ chassisOfferingUuid\ is\ set\ when\ create\ baremetal2\ instance = \u521B\u5EFABareMetal2\u5B9E\u4F8B\u65F6\uFF0CChassisuuid\u548CChassisOfferuuid\u5747\u672A\u8BBE\u7F6E

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:169
# args: 
only\ support\ vpc\ network\ support\ attach\ eip\ on\ baremetal2\ instance = \u4EC5\u652F\u6301VPC\u7F51\u7EDC\u652F\u6301\u5728Baremetal2\u5B9E\u4F8B\u4E0A\u9644\u52A0EIP

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:179
# args: 
bare\ metal\ instance\ not\ allowed\ to\ change\ vm\ nic\ network = \u4E0D\u5141\u8BB8\u88F8\u673A\u5B9E\u4F8B\u66F4\u6539VM NIC\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:190
# args: 
current\ operation\ is\ not\ supported\ on\ local\ baremetal\ instance = \u672C\u5730\u88F8\u673A\u5B9E\u4F8B\u4E0D\u652F\u6301\u5F53\u524D\u64CD\u4F5C

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:201
# args: 
not\ supported\ by\ baremetal2\ instance = BareMetal2\u5B9E\u4F8B\u4E0D\u652F\u6301

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:207
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ Connected = BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:215
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ stopped = Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u672A\u505C\u6B62

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:221
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ running\ but\ its\ agent\ is\ not\ Connected = Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u6B63\u5728\u8FD0\u884C\uFF0C\u4F46\u5176\u4EE3\u7406\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:607
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ does\ not\ exist = Baremetal2\u673A\u7BB1\u4EA7\u54C1[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:318
# args: msg.getInstanceUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ stopped\ can\ not\ change\ its\ chassis\ offering = Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u672A\u505C\u6B62\uFF0C\u65E0\u6CD5\u66F4\u6539\u5176\u673A\u7BB1\u4EA7\u54C1

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:337
# args: msg.getVmInstanceUuid()
baremetal2\ instance[uuid\:%s]\ has\ not\ been\ allocated\ a\ chassis,\ start\ the\ instance\ and\ try\ again = \u5C1A\u672A\u4E3ABareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u5206\u914D\u673A\u7BB1\uFF0C\u8BF7\u542F\u52A8\u8BE5\u5B9E\u4F8B\u5E76\u91CD\u8BD5

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:343
# args: ipVersion
only\ l3\ network\ with\ ip\ version\ %d\ is\ supported\ by\ baremetal2\ instance = Baremetal2\u5B9E\u4F8B\u4EC5\u652F\u6301IP\u7248\u672C\u4E3A{0}\u7684\u4E09\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:349
# args: l2Type
l2\ network\ type\ %s\ not\ supported\ by\ baremetal2\ instance = \u4E8C\u5C42\u7F51\u7EDC\u7C7B\u578B{0}\u4E0D\u53D7Baremetal2\u5B9E\u4F8B\u652F\u6301

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:355
# args: 
customMac\ is\ mandatory\ when\ attaching\ l3\ network\ to\ baremetal2\ instance = \u5C06\u4E09\u5C42\u7F51\u7EDC\u8FDE\u63A5\u5230Baremetal2\u5B9E\u4F8B\u65F6\uFF0CCustomMAC\u662F\u5FC5\u9700\u7684

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:359
# args: msg.getCustomMac()
%s\ is\ not\ valid\ mac\ address = {0}\u4E0D\u662F\u6709\u6548\u7684MAC\u5730\u5740

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:364
# args: msg.getCustomMac()
duplicated\ mac\ address\ %s = \u91CD\u590D\u7684MAC\u5730\u5740{0}

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:373
# args: bm.getUuid(),bm.getChassisUuid(),msg.getCustomMac()
baremetal2\ instance[uuid\:%s]\ running\ on\ chassis[uuid\:%s],\ which\ doesn't\ have\ non-provisioning\ nic\ with\ mac\ address\ %s = \u673A\u7BB1[uuid\uFF1A{1}]\u4E0A\u8FD0\u884C\u7684Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u6CA1\u6709MAC\u5730\u5740\u4E3A{2}\u7684\u975E\u914D\u7F6ENIC

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:382
# args: msg.getCustomMac()
mac\ address\ %s\ has\ already\ been\ used,\ try\ another\ one = MAC\u5730\u5740{0}\u5DF2\u88AB\u4F7F\u7528\uFF0C\u8BF7\u5C1D\u8BD5\u5176\u4ED6\u5730\u5740

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:399
# args: msg.getCustomMac()
nic\ with\ mac\:%s\ cannot\ be\ attached\ l3Network,\ because\ it\ has\ been\ bonded = MAC\u4E3A{0}\u7684NIC\u65E0\u6CD5\u8FDE\u63A5\u5230L3Network\uFF0C\u56E0\u4E3A\u5B83\u5DF2\u7ED1\u5B9A

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:448
# args: 
third\ party\ ceph\ cannot\ mixed\ with\ other\ primary\ storage = \u7B2C\u4E09\u65B9 \u5206\u5E03\u5F0F\u5B58\u50A8 \u4E0D\u80FD\u4E0E\u5176\u4ED6\u4E3B\u5B58\u50A8\u6DF7\u5408

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:571
# args: msg.getClusterUuid(),msg.getUuid()
cluster[uuid\:%s]\ is\ not\ an\ Enabled\ baremetal2\ cluster,\ cannot\ start\ instance[uuid\:%s]\ in\ it = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E0D\u662F\u5DF2\u542F\u7528\u7684BareMetal2\u96C6\u7FA4\uFF0C\u65E0\u6CD5\u5728\u5176\u4E2D\u542F\u52A8\u5B9E\u4F8B[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:583
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ does\ not\ exist\ or\ is\ not\ Enabled\ or\ Connected = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\uFF0C\u6216\u8005\u672A\u542F\u7528\u6216\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:594
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ cluster\ [uuid\:%s] = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u4E0D\u5728\u96C6\u7FA4[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:600
# args: msg.getUuid()
please\ specify\ chassis\ uuid\ or\ chassis\ offering\ uuid\ to\ start\ baremetal2\ instance[uuid\:%s] = \u8BF7\u6307\u5B9A\u673A\u7BB1uuid\u6216\u673A\u7BB1\u63D0\u4F9Buuid\u4EE5\u542F\u52A8BareMetal2\u5B9E\u4F8B[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:611
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ is\ not\ Enabled = \u672A\u542F\u7528Baremetal2\u673A\u7BB1\u4EA7\u54C1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:711
# args: 
do\ not\ set\ chassisUuid\ and\ chassisOfferingUuid\ at\ the\ same\ time = \u4E0D\u8981\u540C\u65F6\u8BBE\u7F6EChassisuuid\u548CChassisOfferuuid

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:619
# args: 
no\ need\ to\ set\ chassisOfferingUuid\ because\ the\ instance\ has\ been\ assigned\ an\ chassis\ already = \u65E0\u9700\u8BBE\u7F6EChassisofferinguuid\uFF0C\u56E0\u4E3A\u5B9E\u4F8B\u5DF2\u5206\u914D\u673A\u7BB1

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:623
# args: 
no\ need\ to\ set\ chassisOfferingUuid\ because\ the\ instance\ has\ been\ assigned\ an\ chassis\ offering\ already = \u65E0\u9700\u8BBE\u7F6EChassisOfferinguuid\uFF0C\u56E0\u4E3A\u5DF2\u4E3A\u5B9E\u4F8B\u5206\u914D\u4E86\u673A\u7BB1\u4EA7\u54C1

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:631
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ does\ not\ exist = Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:636
# args: msg.getChassisUuid(),bm.getChassisOfferingUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ belonging\ to\ chassis\ offering[uuid\:%s] = Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u4E0D\u5C5E\u4E8E\u673A\u7BB1\u4EA7\u54C1[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:641
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Enabled = \u672A\u542F\u7528Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:645
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ has\ already\ been\ allocated = \u5DF2\u5206\u914DBaremetal2\u673A\u7BB1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:763
# args: msg.getGatewayUuid(),msg.getChassisUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ the\ same\ cluster\ with\ chassis[uuid\:%s] = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u4E0E\u673A\u7BB1[uuid\uFF1A{1}]\u4E0D\u5728\u540C\u4E00\u96C6\u7FA4\u4E2D

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:685
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ not\ Enabled,\ can\ not\ create\ baremetal2\ instance\ from\ it = \u533A\u57DF[uuid\uFF1A{0}]\u5DF2\u6307\u5B9A\u4F46\u672A\u542F\u7528\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:699
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ not\ an\ Enabled\ baremetal2\ cluster,\ can\ not\ create\ baremetal2\ instance\ from\ it = \u6307\u5B9A\u4E86\u96C6\u7FA4[uuid\uFF1A{0}]\uFF0C\u4F46\u5B83\u4E0D\u662F\u542F\u7528\u7684BareMetal2\u96C6\u7FA4\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:717
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u672A\u542F\u7528\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABaremetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:722
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Available,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2\u673A\u7BB1[uuid\uFF1A{0}]\u4E0D\u53EF\u7528\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABaremetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:732
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2\u673A\u7BB1\u4EA7\u54C1[uuid\uFF1A{0}]\u672A\u542F\u7528\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABaremetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:743
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u672A\u542F\u7528\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABaremetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:748
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Connected,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2\u7F51\u5173[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABaremetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:780
# args: 
image\ cannot\ be\ empty\ unless\ chassis\ is\ in\ direct\ mode = \u9664\u975E\u673A\u7BB1\u5904\u4E8E\u76F4\u63A5\u6A21\u5F0F\uFF0C\u5426\u5219\u955C\u50CF\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:787
# args: 
direct\ mode\ not\ support\ choose\ image = \u76F4\u63A5\u6A21\u5F0F\u4E0D\u652F\u6301\u9009\u62E9\u955C\u50CF

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:794
# args: msg.getImageUuid()
image[uuid\:%s]\ does\ not\ exist = \u955C\u50CF[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:800
# args: disk.getUuid(),image.getUuid()
Chassis\ disk[%s]\ not\ have\ enough\ capacity\ for\ image[%s] = \u673A\u7BB1\u78C1\u76D8[{0}]\u6CA1\u6709\u8DB3\u591F\u7684\u5BB9\u91CF\u7528\u4E8E\u955C\u50CF[{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:805
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = \u955C\u50CF[uuid\uFF1A{0}]\u672A\u542F\u7528\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:810
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ Ready,\ can't\ create\ baremetal2\ instance\ from\ it = \u955C\u50CF[uuid\uFF1A{0}]\u672A\u5C31\u7EEA\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:815
# args: msg.getImageUuid(),image.getMediaType()
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ can\ be\ used\ to\ create\ baremetal2\ instance = \u955C\u50CF[uuid\uFF1A{0}]\u7684\u5A92\u4F53\u7C7B\u578B\u4E3A\uFF1A{1}\uFF0C\u53EA\u6709RootVolumeTemplate\u53EF\u7528\u4E8E\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:820
# args: image.getFormat(),BareMetal2InstanceConstant.IMAGE_FORMAT_FOR_BM
image[uuid\:%s]\ is\ of\ format\:\ %s,\ only\ %s\ can\ be\ used\ to\ create\ baremetal2\ instance = \u955C\u50CF[uuid\uFF1A{0}]\u7684\u683C\u5F0F\u4E3A\uFF1A{1}\uFF0C\u53EA\u6709{2}\u53EF\u7528\u4E8E\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:826
# args: image.getUuid()
image[uuid\:%s]\ is\ not\ baremetal2\ image,\ can't\ create\ baremetal2\ instance\ from\ it = \u955C\u50CF[uuid\uFF1A{0}]\u4E0D\u662FBareMetal2\u955C\u50CF\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:832
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ image\ with\ boot\ mode\ %s\ is\ supported\ to\ create\ baremetal2\ instance = \u4EC5\u652F\u6301\u5F15\u5BFC\u6A21\u5F0F\u4E3A{0}\u7684\u955C\u50CF\u6765\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:841
# args: 
different\ boot\ mode\ between\ the\ image\ and\ chassis/offering = \u955C\u50CF\u548C\u673A\u7BB1/\u4EA7\u54C1\u4E4B\u95F4\u7684\u5F15\u5BFC\u6A21\u5F0F\u4E0D\u540C

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:851
# args: clusterArchitecture,image.getArchitecture()
the\ architecture\ of\ baremetal2\ cluster[arch\:%s]\ and\ image[arch\:%s]\ don't\ match = BareMetal2\u96C6\u7FA4[arch\uFF1A{0}]\u7684\u4F53\u7CFB\u7ED3\u6784\u4E0E\u955C\u50CF[arch\uFF1A{1}]\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:863
# args: msg.getDataDiskOfferingUuids()
not\ all\ disk\ offerings[uuids\:%s]\ are\ Enabled,\ can\ not\ create\ baremetal2\ instance\ from\ them = \u5E76\u975E\u6240\u6709\u78C1\u76D8\u4EA7\u54C1[uuid\uFF1A{0}]\u90FD\u5DF2\u542F\u7528\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:890
# args: 
cannot\ decide\ which\ zone\ the\ baremetal2\ instance\ should\ be\ created\ in = \u65E0\u6CD5\u786E\u5B9A\u5E94\u5728\u54EA\u4E2A\u533A\u57DF\u4E2D\u521B\u5EFABareMetal2\u5B9E\u4F8B

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceBase.java:476
# args: 
baremetal2\ instance[uuid\:%s]\ is\ either\ not\ exist\ or\ not\ Connected,\ cannot\ change\ its\ password = Baremetal2\u5B9E\u4F8B[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\u6216\u672A\u8FDE\u63A5\uFF0C\u65E0\u6CD5\u66F4\u6539\u5176\u5BC6\u7801

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java:386
# args: releaseTag
%s\ can\ only\ be\ created\ or\ deleted = \u53EA\u80FD\u521B\u5EFA\u6216\u5220\u9664{0}

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java:397
# args: releaseTag
%s\ can\ only\ be\ created\ or\ deleted\ when\ the\ baremetal2\ instance\ is\ Running = \u53EA\u80FD\u5728\u8FD0\u884CBareMetal2\u5B9E\u4F8B\u65F6\u521B\u5EFA\u6216\u5220\u9664{0}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:112
# args: dhcpInterface,dhcpRangeStartIp,dhcpRangeEndIp,dhcpRangeNetmask,dhcpRangeGateway
there\ already\ exists\ a\ baremetal2\ provision\ network\ with\ dhcpInterface\ \=\ %s,\ dhcpRangeStartIp\ \=\ %s,\ dhcpRangeEndIp\ \=\ %s,\ dhcpRangeNetmask\ \=\ %s,\ dhcpRangeGateway\ \=\ %s = \u5DF2\u5B58\u5728DHCPINTERFACE={0}\u3001DHCPRANGESTARTIP={1}\u3001DHCPRANGEENDIP={2}\u3001DhcpRangeNetMask={3}\u3001DhcpRangeGateway={4}\u7684BareMetal2\u914D\u7F6E\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:123
# args: msg.getNetworkUuid()
cannot\ update\ baremetal2\ provision\ network[uuid\:%s]\ dhcp\ configuration\ when\ there\ are\ instances\ depending\ on\ it = \u5F53\u6709\u5B9E\u4F8B\u4F9D\u8D56\u4E8E\u7F51\u7EDC[uuid\uFF1A{0}]DHCP\u914D\u7F6E\u65F6\uFF0C\u65E0\u6CD5\u66F4\u65B0\u8BE5\u914D\u7F6E

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:141
# args: netmask
baremetal2\ provision\ network\ dhcp\ range\ netmask\ %s\ is\ invalid = Baremetal2\u8BBE\u7F6E\u7F51\u7EDCDHCP\u8303\u56F4\u7F51\u7EDC\u63A9\u7801{0}\u65E0\u6548

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:147
# args: begin,end
baremetal2\ provision\ network\ start\ ip\ %s\ and\ stop\ ip\ %s\ do\ not\ belong\ to\ the\ same\ subnet = Baremetal2\u914D\u7F6E\u7F51\u7EDC\u542F\u52A8IP{0}\u548C\u505C\u6B62IP{1}\u4E0D\u5C5E\u4E8E\u540C\u4E00\u5B50\u7F51

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:157
# args: msg.getNetworkUuid()
cannot\ delete\ baremetal2\ provision\ network[uuid\:%s]\ when\ there\ are\ instances\ depending\ on\ it = \u6709\u5B9E\u4F8B\u4F9D\u8D56\u4E8EBareMetal2\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u65F6\uFF0C\u65E0\u6CD5\u5220\u9664\u8BE5\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:171
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ non-baremetal2\ cluster[uuid\:%s] = \u65E0\u6CD5\u5C06BareMetal2\u8BBE\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u8FDE\u63A5\u5230\u975EBareMetal2\u96C6\u7FA4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:182
# args: msg.getNetworkUuid(),msg.getClusterUuid()
baremetal2\ provision\ network[uuid\:%s]\ is\ already\ attached\ to\ cluster[uuid\:%s] = Baremetal2\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u96C6\u7FA4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:188
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s]\ because\ the\ cluster\ already\ have\ one = \u65E0\u6CD5\u5C06BareMetal2\u8BBE\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u9644\u52A0\u5230\u96C6\u7FA4[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A\u8BE5\u96C6\u7FA4\u5DF2\u6709\u4E00\u4E2A\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:198
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s]\ because\ they\ are\ not\ in\ the\ same\ zone = \u65E0\u6CD5\u5C06BareMetal2\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u9644\u52A0\u5230\u96C6\u7FA4[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u4E0D\u5728\u540C\u4E00\u533A\u57DF\u4E2D

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:219
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s],\ because\ we\ need\ to\ make\ sure\ that\ every\ gateway\ attached\ to\ the\ clusters\ that\ have\ the\ same\ provision\ network\ attached = \u65E0\u6CD5\u5C06BareMetal2\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u8FDE\u63A5\u5230\u96C6\u7FA4[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A\u6211\u4EEC\u9700\u8981\u786E\u4FDD\u8FDE\u63A5\u5230\u5177\u6709\u76F8\u540C\u914D\u7F6E\u7F51\u7EDC\u7684\u96C6\u7FA4\u7684\u6BCF\u4E2A\u7F51\u5173

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:241
# args: 
provision\ network\ should\ not\ have\ the\ same\ interface\ name\ with\ l2\ networks\ that\ are\ already\ attached\ to\ the\ cluster = \u8BBE\u7F6E\u7F51\u7EDC\u4E0D\u5E94\u4E0E\u5DF2\u8FDE\u63A5\u5230\u96C6\u7FA4\u7684\u4E8C\u5C42\u7F51\u7EDC\u5177\u6709\u76F8\u540C\u7684\u63A5\u53E3\u540D\u79F0

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:251
# args: msg.getNetworkUuid()
cannot\ detach\ baremetal2\ provision\ network[uuid\:%s]\ when\ there\ are\ running\ instances\ depending\ on\ it = \u5B58\u5728\u4F9D\u8D56\u4E8EBaremetal2\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u7684\u6B63\u5728\u8FD0\u884C\u7684\u5B9E\u4F8B\u65F6\uFF0C\u65E0\u6CD5\u5206\u79BB\u8BE5\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:258
# args: 
networkUuids\ is\ empty = \u7F51\u7EDCuuid\u4E3A\u7A7A

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:265
# args: msg.getNetworkUuids()
not\ all\ baremetal2\ provision\ networks\ exist\ in\ %s = {0}\u4E2D\u5E76\u4E0D\u5B58\u5728\u6240\u6709BareMetal2\u914D\u7F6E\u7F51\u7EDC

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:496
# args: networkUuid,gatewayUuid,reply.getError()
failed\ to\ prepare\ provision\ network[uuid\:%s]\ in\ gateway[uuid\:%s]\:\ %s = \u65E0\u6CD5\u51C6\u5907\u8BBE\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\uFF08\u5728\u7F51\u5173[uuid\uFF1A{1}]\u4E2D\uFF09\uFF1A{2}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:308
# args: networkUuid,gatewayUuid,reply.getError()
failed\ to\ update\ provision\ network[uuid\:%s]\ in\ gateway[uuid\:%s]\:\ %s = \u65E0\u6CD5\u66F4\u65B0\u8BBE\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\uFF08\u5728\u7F51\u5173[uuid\uFF1A{1}]\u4E2D\uFF09\uFF1A{2}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:650
# args: msg.getNetworkUuid()
failed\ to\ allocate\ ip\ from\ baremetal2\ provision\ network[uuid\:%s] = \u65E0\u6CD5\u4ECEBareMetal2\u914D\u7F6E\u7F51\u7EDC[uuid\uFF1A{0}]\u5206\u914DIP

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:73
# args: 
billing\ is\ disabled = \u5DF2\u7981\u7528\u8BA1\u8D39

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:120
# args: 
the\ start\ date\ must\ be\ greater\ than\ the\ end\ date = \u5F00\u59CB\u65F6\u95F4\u5FC5\u987B\u65E9\u4E8E\u7ED3\u675F\u65F6\u95F4

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:124
# args: 
resourceType\ and\ resourceUuid\ cannot\ be\ empty\ at\ the\ same\ time = ResourceType\u548CResourceuuid\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:244
# args: 
the\ minimal\ resource\ unit\ is\ megabyte,\ cannot\ be\ byte = \u8D44\u6E90\u7684\u6700\u5C0F\u5355\u4F4D\u5FC5\u987B\u4E3AMB\uFF0C\u800C\u4E0D\u662Fbyte

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:252
# args: 
price\ must\ be\ 0\ and\ 999999999.99 = \u4EF7\u683C\u5FC5\u987B\u4E3A0\u548C999999999.99

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:259
# args: 
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ empty = GPU\u7C7B\u578B\u7684\u4EF7\u683C\u5FC5\u987B\u7ED1\u5B9A\u4E00\u4E2AGPU\u8BBE\u5907

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:266
# args: price.getSystemTags()
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ %s = GPU\u7C7B\u578B\u7684\u4EF7\u683C\u5FC5\u987B\u7ED1\u5B9A\u4E00\u4E2A\u6B63\u786E\u7684GPU\u8BBE\u5907{0}

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:226
# args: resourceName
resourceName[%s]\ is\ invalid = \u8D44\u6E90\u540D\u79F0[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:278
# args: msg.getAccountUuid()
The\ account[uuid\=%s]\ has\ attach\ price\ table = \u5E10\u6237[uuid={0}]\u5177\u6709\u9644\u52A0\u4EF7\u683C\u8868

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:284
# args: msg.getUuid()
This\ priceTable[uuid\=%s]\ is\ not\ allowed\ to\ delete = \u4E0D\u5141\u8BB8\u5220\u9664\u6B64\u4EF7\u683C\u8868[uuid={0}]

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:298
# args: 
accountUuid/tableUuid\ only\ one\ of\ them\ is\ allowed\ to\ be\ set = Accountuuid/Tableuuid\u53EA\u5141\u8BB8\u8BBE\u7F6E\u5176\u4E2D\u4E00\u4E2A

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:304
# args: 
endDateInLong\ is\ not\ allowed\ to\ be\ negative = EndDateInLong\u4E0D\u5141\u8BB8\u4E3A\u8D1F\u6570

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:308
# args: 
endDateInLong\ and\ setEndDateInLongBaseOnCurrentTime\ are\ not\ allowed\ to\ set\ at\ the\ same\ time = \u4E0D\u5141\u8BB8\u540C\u65F6\u8BBE\u7F6EEndDateInLong\u548CSetEndDateInLongBaseOnCurrentTime

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:321
# args: 
endDateInLong\ is\ set,\ no\ modification\ allowed = EndDateInLong\u5DF2\u8BBE\u7F6E\uFF0C\u4E0D\u5141\u8BB8\u4FEE\u6539

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:329
# args: 
endDateInLong\ cannot\ be\ earlier\ than\ dateInLong = EndDateInlong\u4E0D\u80FD\u65E9\u4E8EDateInlong

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:336
# args: 
billing\ is\ enable,\ This\ operation\ is\ only\ allowed\ in\ the\ disabled\ state = \u8BA1\u8D39\u5DF2\u542F\u7528\uFF0C\u53EA\u6709\u5728\u7981\u7528\u72B6\u6001\u4E0B\u624D\u80FD\u6267\u884C\u6B64\u64CD\u4F5C

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:451
# args: 
priceKeyName\ is\ null = PriceKeyName\u4E3A\u7A7A

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:1084
# args: currentPriceVO.getDateInLong()
dateInLong\ is\ less\ than\ %s = DateInLong\u5C0F\u4E8E{0}

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:3090
# args: 
please\ set\ the\ correct\ priceUserConfig,\ for\ example\:\ priceUserConfig\:{\nrootVolume\:{\npriceKeyName\:\"priceKeyName\"}} = \u8BF7\u8BBE\u7F6E\u6B63\u786E\u7684priceUserConfig\uFF0C\u4F8B\u5982\uFF1ApriceUserConfig\uFF1A'{\nRootVolume\uFF1A{\nPriceKeyName\uFF1A\\uFFE2\uFFFD\uFFFD priceKeyName\\uFFE2\uFFFD\uFFFD}'}

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:3105
# args: 
please\ set\ the\ correct\ priceUserConfig,\ for\ example\:\ priceUserConfig\:{\nvolume\:{\npriceKeyName\:\"priceKeyName\"}} = \u8BF7\u8BBE\u7F6E\u6B63\u786E\u7684priceUserConfig\uFF0C\u4F8B\u5982\uFF1ApriceUserConfig\uFF1A'{\nVolume\uFF1A{\nPriceKeyName\uFF1A\\uFFE2\uFFFD\uFFFD priceKeyName\\uFFE2\uFFFD\uFFFD}'}

# at: src/main/java/org/zstack/billing/ResourceSpendingHelper.java:49
# args: resourceType
unsupported\ billing\ resource\ type\ [%s] = \u4E0D\u652F\u6301\u7684\u8BA1\u8D39\u8D44\u6E90\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/cas/CasInterceptor.java:31
# args: type
there\ is\ no\ such\ type[%s]\ in\ CAS = CAS\u4E2D\u6CA1\u6709\u6B64\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:76
# args: loginContext.getUsername()
wrong\ virtual\ ID[name\:%s],\ not\ existing\ or\ wrong\ password = \u9519\u8BEF\u7684virtual ID[\u540D\u79F0:{0}], \u5BC6\u7801\u4E0D\u5B58\u5728\u6216\u8005\u5BC6\u7801\u9519\u8BEF

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:57
# args: 
missing\ property\ of\ cas\ driver = \u7F3A\u5C11CAS\u9A71\u52A8\u7A0B\u5E8F\u7684\u5C5E\u6027

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:64
# args: casDriverType
Unsupported\ cas\ driver\:\ %s = \u4E0D\u652F\u6301\u7684CAS\u9A71\u52A8\u7A0B\u5E8F\uFF1A{0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:63
# args: msg.getUuid()
cannot\ find\ such\ ResourceStackVO\ by\ uuid\ [%s] = \u65E0\u6CD5\u901A\u8FC7uuid[{0}]\u627E\u5230\u6B64\u7C7BResourceStackVO

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:67
# args: validStatus
restart\ resource\ stack\ only\ support\ %s\ status! = \u91CD\u65B0\u542F\u52A8\u8D44\u6E90\u5806\u6808\u4EC5\u652F\u6301{0}\u72B6\u6001\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:173
# args: 
templateContent\ and\ uuid\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = TemplateContent\u548Cuuid\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A\u6216\u540C\u65F6\u8BBE\u7F6E\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:98
# args: validStatus
expect\ %s\ status! = \u9884\u671F{0}\u72B6\u6001\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:118
# args: 
templateContent\ and\ templateUuid\ mustn't\ both\ be\ empty! = TemplateContent\u548CTemplateUuid\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:129
# args: 
templateContent\ and\ url\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = TemplateContent\u548CURL\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A\u6216\u540C\u65F6\u8BBE\u7F6E\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:145
# args: 
only\ admin\ could\ enable/disable\ system\ StackTemplate = \u53EA\u6709\u7BA1\u7406\u5458\u624D\u80FD\u542F\u7528/\u7981\u7528\u7CFB\u7EDF\u5806\u6808\u6A21\u677F

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1032
# args: vo.getName()
cannot\ delete\ or\ update\ system\ template\:\ %s = \u65E0\u6CD5\u5220\u9664\u6216\u66F4\u65B0\u7CFB\u7EDF\u6A21\u677F\uFF1A{0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:322
# args: msg.getVmInstanceUuid()
no\ stackUuid\ found\ for\ the\ vmInstance[%s] = \u627E\u4E0D\u5230VMInstance[{0}]stackUuid

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:612
# args: msg.getUuid()
ResourceStackVO\:\ [%s]\ has\ been\ deleted... = ResourceStackVO\uFF1A[{0}]\u5DF2\u88AB\u5220\u9664..

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:642
# args: uuid
ResourceStackVO\ [%s]\ already\ been\ deleted! = ResourceStackVO[{0}]\u5DF2\u88AB\u5220\u9664\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:871
# args: 
templateContent\ must\ be\ set! = \u5FC5\u987B\u8BBE\u7F6ETemplateContent\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:865
# args: template.getUuid()
template\ [%s]\ chosen\ is\ disabled = \u6240\u9009\u6A21\u677F[{0}]\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:955
# args: p.getParamName(),p.getResourceType()
cannot\ find\ parameters\ for\ %s,\ which\ is\ %s\ type,\ please\ check\ parameters = \u627E\u4E0D\u5230{1}\u7C7B\u578B\u7684{0}\u7684\u53C2\u6570\uFF0C\u8BF7\u68C0\u67E5\u53C2\u6570

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1025
# args: 
StackTemplateVO\ has\ been\ deleted... = StackTemplateVo\u5DF2\u88AB\u5220\u9664..

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1048
# args: 
content\ must\ be\ set\ by\ templateContent\ or\ url! = \u5FC5\u987B\u901A\u8FC7TemplateContent\u6216URL\u8BBE\u7F6E\u5185\u5BB9\uFF01

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1066
# args: 
get\ null\ content\ input = \u83B7\u53D6\u7A7A\u5185\u5BB9\u8F93\u5165

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1073
# args: result.getTemplateVersion()
invalid\ cloudformation\ template\ version\:\ %s = CloudFormation\u6A21\u677F\u7248\u672C\u65E0\u6548\uFF1A{0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1087
# args: msg.getUuid()
StackTemplateVO\:\ [%s]\ has\ been\ deleted... = StackTemplateVo\uFF1A[{0}]\u5DF2\u5220\u9664..

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1385
# args: 
[cloudformation]\ filterName\ must\ be\ cloudformation\:true\ or\ cloudformation\:false = [cloudFormation]FilterName\u5FC5\u987B\u4E3AcloudFormation\uFF1Atrue\u6216cloudFormat\uFF1Afalse

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:31
# args: 
get\ null\ element\ in\ template\ content = \u83B7\u53D6\u6A21\u677F\u5185\u5BB9\u4E2D\u7684\u7A7A\u5143\u7D20

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:35
# args: 
template\ must\ contain\ [ZStackTemplateFormatVersion] = \u6A21\u677F\u5FC5\u987B\u5305\u542B[ZStackTemplateFormatVersion]

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:38
# args: result.getTemplateVersion(),CloudFormationConstant.version
invalid\ ZStackTemplateFormatVersion\:\ [%s,\ expected\:\ %s] = \u65E0\u6548\u7684ZStackTemplateFormatVersion\uFF1A[{0}\uFF0C\u5E94\u4E3A\uFF1A{1}]

# at: src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java:124
# args: l2Uuid
cannot\ find\ l2_bridge_name\ of\ l2[%s]\ from\ systemTag = \u5728\u7CFB\u7EDF\u6807\u8BB0\u4E2D\u627E\u4E0D\u5230L2[{0}]\u7684L 2_Bridge_\u540D\u79F0

# at: src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java:135
# args: vm.getUuid()
cannot\ find\ default\ ip\ on\ vm[%s] = \u5728\u4E91\u4E3B\u673A[{0}]\u4E0A\u627E\u4E0D\u5230\u9ED8\u8BA4IP

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:97
# args: 
cannot\ find\ resource\ of\ properties\ set\ before! = \u627E\u4E0D\u5230\u4EE5\u524D\u8BBE\u7F6E\u7684\u5C5E\u6027\u7684\u8D44\u6E90\uFF01

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:152
# args: value
invalid\ dynamic\ variables,\ which\ must\ contained\ ${\:\ %s = \u52A8\u6001\u53D8\u91CF\u65E0\u6548\uFF0C\u5FC5\u987B\u5305\u542B$'{\uFF1A{0}'

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:174
# args: 
verb\ must\ contain\ '\:\:'! = \u8C13\u8BCD\u5FC5\u987B\u5305\u542B\u201C\uFF1A:\u201D\uFF01

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:218
# args: t[0],last.getClass().getName()
need\ List\ for\ resource\ [%s]\ output\ here,\ but\ got\ %s. = \u6B64\u5904\u9700\u8981\u8D44\u6E90[{0}]\u8F93\u51FA\u7684\u5217\u8868\uFF0C\u4F46\u83B7\u5F97\u4E86{1}\u3002

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:380
# args: 
Some\ actions\ are\ invalid = \u67D0\u4E9B\u64CD\u4F5C\u65E0\u6548

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:253
# args: 
no\ root\ element\ found,\ please\ check\ your\ cfn\ formation! = \u627E\u4E0D\u5230\u6839\u5143\u7D20\uFF0C\u8BF7\u68C0\u67E5\u60A8\u7684CFN\u7ED3\u6784\uFF01

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:432
# args: e.getMessage()
Wrong\ json\ format,\ causes\:\ %s = \u9519\u8BEF\u7684JSON\u683C\u5F0F\uFF0C\u5BFC\u81F4\uFF1A{0}

# at: src/main/java/org/zstack/cloudformation/template/decoder/AbstractCfnRootDecoder.java:14
# args: 
CfnRootDecoder's\ weight\ must\ between\ 0-100,\ 0\ means\ decode\ first,\ default\ is\ 50 = cfnRootDecoder\u7684\u6743\u91CD\u5FC5\u987B\u4ECB\u4E8E0-100\u4E4B\u95F4\uFF0C0\u8868\u793A\u5148\u89E3\u7801\uFF0C\u9ED8\u8BA4\u503C\u4E3A50

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:45
# args: 
Condition\ body\ cannot\ support\ json\ null\ or\ array! = \u6761\u4EF6\u4F53\u4E0D\u652F\u6301JSON NULL\u6216\u6570\u7EC4\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:41
# args: 
Only\ support\ ZStack\ Template\ Functions\ in\ 'Condition'\ field! = \u4EC5\u652F\u6301\u201C\u6761\u4EF6\u201D\u5B57\u6BB5\u4E2D\u7684ZStack\u6A21\u677F\u51FD\u6570\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:37
# args: 
Value\ must\ be\ boolean\ in\ 'Condition'\ field = \u201C\u6761\u4EF6\u201D\u5B57\u6BB5\u4E2D\u7684\u503C\u5FC5\u987B\u4E3A\u5E03\u5C14\u503C

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:30
# args: key,es.size()
Condition\ key\:\ %s\ only\ support\ 1\ element\ in\ the\ json\ object\ of\ value,\ but\ got\ %d\ elements! = \u6761\u4EF6\u952E\uFF1A{0}\u5728\u503C\u4E3A\u7684JSON\u5BF9\u8C61\u4E2D\u53EA\u652F\u63011\u4E2A\u5143\u7D20\uFF0C\u4F46\u5F97\u5230\u4E86{1}\u4E2A\u5143\u7D20\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/DecoderUtils.java:91
# args: msg
cannot\ find\ such\ msg\:\ %s\ for\ create = \u65E0\u6CD5\u4E3A\u521B\u5EFA\u627E\u5230\u8FD9\u6837\u7684\u6D88\u606F\uFF1A{0}

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:56
# args: 
Mapping\ value\ body\ cannot\ support\ null! = \u6620\u5C04\u503C\u6B63\u6587\u4E0D\u80FD\u652F\u6301Null\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:54
# args: 
Mapping\ value\ body\ cannot\ support\ json\ array! = \u6620\u5C04\u503C\u4E3B\u4F53\u4E0D\u652F\u6301JSON\u6570\u7EC4\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:66
# args: 
mappingName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = \u5FC5\u987B\u5728\u7ED3\u679C\u4E2D\u627E\u5230MappingName\uFF0C\u5426\u5219\u5B83\u662F\u65E0\u6548\u7684CFN JSON\u3002

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:84
# args: 
Mapping\ body\ cannot\ support\ json\ null! = \u6620\u5C04\u4F53\u4E0D\u652F\u6301JSON NULL\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:82
# args: 
Mapping\ body\ cannot\ support\ non\ map\ value! = \u6620\u5C04\u4F53\u4E0D\u652F\u6301\u975E\u6620\u5C04\u503C\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:57
# args: 
Output\ body\ cannot\ support\ json\ null! = \u8F93\u51FA\u6B63\u6587\u4E0D\u652F\u6301JSON NULL\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:70
# args: 
Description\ in\ Outputs\ must\ be\ String\ type! = \u8F93\u51FA\u4E2D\u7684\u63CF\u8FF0\u5FC5\u987B\u662F\u5B57\u7B26\u4E32\u7C7B\u578B\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java:59
# args: 
paramName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = \u5FC5\u987B\u5728\u7ED3\u679C\u4E2D\u627E\u5230ParamName\uFF0C\u5426\u5219\u5B83\u662F\u65E0\u6548\u7684CFN JSON\u3002

# at: src/main/java/org/zstack/cloudformation/template/decoder/PreParameterDecoder.java:53
# args: 
Parameters\ root\ body\ must\ be\ json\ object! = \u53C2\u6570\u6839\u4F53\u5FC5\u987B\u662FJSON\u5BF9\u8C61\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:145
# args: 
Mappings\ root\ body\ must\ be\ json\ object! = \u6620\u5C04\u6839\u4F53\u5FC5\u987B\u662FJSON\u5BF9\u8C61\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:112
# args: 
resourceName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = ResourceName\u5FC5\u987B\u5728\u7ED3\u679C\u4E2D\u627E\u5230\uFF0C\u6216\u8005\u5B83\u662F\u65E0\u6548\u7684CFN JSON\u3002

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:123
# args: 
Parameters\ body\ cannot\ support\ null! = \u53C2\u6570\u4F53\u4E0D\u652F\u6301NULL\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:68
# args: 
Resource\ value\ body\ cannot\ support\ null! = \u8D44\u6E90\u503C\u4F53\u4E0D\u80FD\u652F\u6301null\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:48
# args: resource.getResourceName(),e.getKey(),resource.getResourceName()
Resource\ %s\ cannot\ depends\ on\ itself,\ please\ check\ %s\ in\ Resource\ [%s] = \u8D44\u6E90{0}\u4E0D\u80FD\u4F9D\u8D56\u81EA\u8EAB\uFF0C\u8BF7\u68C0\u67E5\u8D44\u6E90[{2}]\u4E2D\u7684{1}

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:254
# args: 
Resource\ root\ body\ must\ be\ json\ object! = \u8D44\u6E90\u6839\u4F53\u5FC5\u987B\u662FJSON\u5BF9\u8C61\uFF01

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:216
# args: 
Resource\ Type\ must\ be\ String! = \u8D44\u6E90\u7C7B\u578B\u5FC5\u987B\u662F\u5B57\u7B26\u4E32\uFF01

# at: src/main/java/org/zstack/cloudformation/template/function/IfTemplateFunction.java:42
# args: cond
cannot\ find\ condition[%s]\ in\ 'Conditions' = \u5728\u201C\u6761\u4EF6\u201D\u4E2D\u627E\u4E0D\u5230\u6761\u4EF6[{0}]

# at: src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java:42
# args: e.getAsString()
expect\ 'true',\ 'false'\ for\ the\ object,\ but\ got\ %s = \u8BE5\u5BF9\u8C61\u5E94\u4E3A\u201C true \u201D\u548C\u201C false \u201D\uFF0C\u4F46\u5F97\u5230\u4E86{0}

# at: src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java:35
# args: keys,e.getAsString()
expect\ 'true',\ 'false'\ or\ an\ other\ Condition,\ current\ Conditions\ include\:\ %s,\ but\ got\ %s = \u5E94\u4E3A\u201C true \u201D\u3001\u201C false \u201D\u6216\u5176\u4ED6\u6761\u4EF6\uFF0C\u5F53\u524D\u6761\u4EF6\u5305\u62EC\uFF1A{0}\uFF0C\u4F46\u5F97\u5230\u4E86{1}

# at: src/main/java/org/zstack/cloudformation/template/function/SelectTemplateFunction.java:83
# args: 
Fn\:\:Select\ out\ of\ range,\ please\ check\ your\ json\ file! = FN\uFF1A:\u9009\u62E9\u8D85\u51FA\u8303\u56F4\uFF0C\u8BF7\u68C0\u67E5\u60A8\u7684JSON\u6587\u4EF6\uFF01

# at: src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:75
# args: e.getKey()
only\ functions\ can\ in\ Function,\ but\ found\ %s = \u53EA\u80FD\u5728\u51FD\u6570\u4E2D\u4F7F\u7528\u51FD\u6570\uFF0C\u4F46\u627E\u5230\u4E86{0}

# at: src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:90
# args: 
element\ is\ null! = \u5143\u7D20\u4E3A\u7A7A\uFF01

# at: src/main/java/org/zstack/compute/VmNicUtils.java:26
# args: 
duplicate\ nic\ params = \u590D\u5236NIC\u53C2\u6570

# at: src/main/java/org/zstack/compute/VmNicUtils.java:32
# args: 
l3NetworkUuid\ of\ vm\ nic\ can\ not\ be\ null = \u4E91\u4E3B\u673ANIC\u7684L3Networkuuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/compute/VmNicUtils.java:35
# args: l3Uuids
l3NetworkUuid\ of\ vm\ nic\ is\ not\ in\ l3[%s] = \u4E91\u4E3B\u673ANIC\u7684l3NetworkUuid\u4E0D\u5728L3[{0}]\u4E2D

# at: src/main/java/org/zstack/compute/VmNicUtils.java:40
# args: nic.getOutboundBandwidth()
outbound\ bandwidth[%d]\ of\ vm\ nic\ is\ out\ of\ [8192,\ 32212254720] = VM NIC\u7684\u51FA\u7AD9\u5E26\u5BBD[{0}]\u8D85\u51FA[8192\uFF0C32212254720]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:46
# args: nic.getInboundBandwidth()
inbound\ bandwidth[%d]\ of\ vm\ nic\ is\ out\ of\ [8192,\ 32212254720] = VM NIC\u7684\u5165\u7AD9\u5E26\u5BBD[{0}]\u8D85\u51FA[8192\uFF0C32212254720]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:52
# args: nic.getMultiQueueNum()
multi\ queue\ num[%d]\ of\ vm\ nic\ is\ out\ of\ [1,256] = VM NIC\u7684\u591A\u961F\u5217\u6570[{0}]\u8D85\u51FA[1\uFF0C256]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:58
# args: nic.getL3NetworkUuid(),nic.getState(),VmNicState.enable.toString(),VmNicState.disable.toString()
vm\ nic\ of\ l3[uuid\:%s]\ state[%s]\ is\ not\ %s\ or\ %s\  = L3[uuid\uFF1A{0}]\u72B6\u6001[{1}]\u7684VM NIC\u4E0D\u662F{2}\u6216{3}

# at: src/main/java/org/zstack/compute/VmNicUtils.java:64
# args: driverType
vm\ nic\ driver\ %s\ not\ support\ yet = VM NIC\u9A71\u52A8\u7A0B\u5E8F{0}\u5C1A\u4E0D\u652F\u6301

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:420
# args: resourceUuid,affinityGroupUuid
VM\ [uuid\:\ %s]\ has\ already\ been\ added\ to\ affinityGroup\ [uuid\:\ %s] = VM[uuid:{0}\u5DF2\u7ECF\u88AB\u6DFB\u52A0\u5230\u4EB2\u548C\u7EC4[uuid:{1}]\u4E2D\u3002]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:437
# args: hostUuid,affinityGroupUuid
There\ are\ other\ VMs\ on\ this\ host\ [uuid\:\ %s]\ belonging\ to\ same\ affinityGroup\ [%s] = \u5728\u7269\u7406\u673A[uuid:{0}]\u4E0A\u7684\u4E91\u4E3B\u673A\u5C5E\u4E8E\u540C\u4E00\u4E2A\u4EB2\u548C\u7EC4\u4E2D[{1}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:468
# args: self.getUuid(),host.getUuid(),vmUuid
affinityGroup\ [uuid\:%s]\ reserve\ host\ [uuid\:%s]\ for\ vm\ [uuid\:\ %s]\ failed = \u4EB2\u548C\u7EC4[uuid:{0}]\u4E3A\u4E91\u4E3B\u673A[uuid:{2}]\u9884\u5206\u914D\u7269\u7406\u673A\u8D44\u6E90[uuid:{1}]\u5931\u8D25

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:538
# args: inv.getResourceUuid(),self.getUuid()
vm\ [uuid\:%s]\ doesn't\ satisfy\ the\ affinityGroup\ [uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{1}]\u4E0D\u6EE1\u8DB3\u4EB2\u548C\u7EC4[uuid:{2}]\u7684\u8981\u6C42

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupFilterFlow.java:139
# args: 
can\ not\ satisfied\ affinity\ group\ conditions = \u4E0D\u80FD\u6EE1\u8DB3\u4EB2\u548C\u7EC4\u7684\u6761\u4EF6

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:42
# args: VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString(),state.toString()
Vm\ can\ change\ its\ affinityGroup\ only\ in\ state\ [%s,%s],\ but\ vm\ is\ in\ state\ [%s] = \u53EA\u6709\u72B6\u6001\u4E3A[{0},{1}]\u7684\u4E91\u4E3B\u673A\u53EF\u4EE5\u6539\u53D8\u4EB2\u548C\u7EC4\uFF0C\u4F46\u662F\u73B0\u5728\u4E91\u4E3B\u673A\u7684\u72B6\u6001\u4E3A[{2}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:52
# args: msg.getUuid(),agUuid
Vm\ [uuid\:\ %s]\ is\ already\ added\ to\ affinityGroup\ [uuid\:\ %s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u88AB\u6DFB\u52A0\u81F3\u4EB2\u548C\u7EC4[uuid:{1}]\u4E2D

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:77
# args: affinityGroupUuid
AffinityGroup\ [uuid\:\ %s]\ does\ not\ existed = \u4EB2\u548C\u7EC4[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:81
# args: 
Can\ not\ operate\ on\ affinity\ group\ created\ by\ system = \u4E0D\u80FD\u5BF9\u7CFB\u7EDF\u521B\u5EFA\u7684\u4EB2\u548C\u7EC4\u8FDB\u884C\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:88
# args: affinityGroupUuid
Can\ not\ operate\ on\ affinityGroup\ [uuid\:\ %s]\ which\ is\ not\ enabled = \u4E0D\u80FD\u5BF9\u4E0D\u662Fenabled\u72B6\u6001\u7684\u4EB2\u548C\u7EC4\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupManagerImpl.java:219
# args: msg.getAffinityGroupUuid()
cannot\ find\ the\ affinity\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = \u672A\u627E\u5230\u4EB2\u548C\u7EC4[uuid:{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/compute/allocator/AttachedL2NetworkAllocatorFlow.java:118
# args: spec.getL3NetworkUuids()
no\ host\ found\ in\ clusters\ that\ has\ attached\ to\ L2Networks\ which\ have\ L3Networks%s = \u5728\u8FDE\u63A5\u5230\u5177\u6709L3Networks{0}\u7684L2Networks\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/AttachedPrimaryStorageAllocatorFlow.java:79
# args: psuuids
no\ host\ found\ in\ clusters\ that\ have\ attached\ to\ primary\ storage\ %s = \u5728\u5DF2\u8FDE\u63A5\u5230\u4E3B\u5B58\u50A8{0}\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java:41
# args: vm.getUuid()
cannot\ find\ root\ volume\ of\ vm[uuid\:%s] = \u627E\u4E0D\u5230VM[uuid\uFF1A{0}]\u7684\u6839\u5377

# at: src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java:84
# args: requiredPsUuids,vm.getUuid()
no\ host\ found\ in\ clusters\ which\ have\ attached\ to\ all\ primary\ storage\ %s\ where\ vm[uuid\:%s]'s\ volumes\ locate = \u5728\u5DF2\u8FDE\u63A5\u5230VM[uuid\uFF1A{1}]\u7684\u5377\u6240\u5728\u7684\u6240\u6709\u4E3B\u5B58\u50A8{0}\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/AvoidHostAllocatorFlow.java:30
# args: spec.getAvoidHostUuids()
after\ rule\ out\ avoided\ host%s,\ there\ is\ no\ host\ left\ in\ candidates = \u5728\u6392\u9664\u907F\u514D\u7684\u7269\u7406\u673A{0}\u540E\uFF0C\u5019\u9009\u7269\u7406\u673A\u4E2D\u6CA1\u6709\u5269\u4F59\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:87
# args: spec.getRequiredBackupStorageUuid(),bsType
the\ backup\ storage[uuid\:%s,\ type\:%s]\ requires\ bound\ primary\ storage,\ however,\ the\ primary\ storage\ has\ not\ been\ added = \u65E0\u6CD5\u627E\u5230\u8DDF\u955C\u50CF\u670D\u52A1\u5668[uuid:{0}, type:{1}]\u914D\u5BF9\u7684\u4E3B\u5B58\u50A8\u3002\u4E00\u4E9B\u955C\u50CF\u670D\u52A1\u5668\u5FC5\u987B\u8DDF\u914D\u5BF9\u7684\u4E3B\u5B58\u50A8\u5171\u540C\u4F7F\u7528\uFF0C\u4F8B\u5982Ceph\u955C\u50CF\u670D\u52A1\u5668\u76D1\u63A7\u8282\u70B9\u53EA\u80FD\u642D\u914D\u5206\u5E03\u5F0F\u5B58\u50A8\u4F7F\u7528\u3002\u8BF7\u68C0\u67E5\u4F60\u4E3B\u5B58\u50A8\u7684\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:80
# args: spec.getImage().getUuid(),spec.getRequiredBackupStorageUuid(),type,psUuids
The\ image[uuid\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[uuids\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = \u955C\u50CF[uuid:{0}]\u6240\u5728\u7684\u955C\u50CF\u670D\u52A1\u5668[uuid:{1}, type:{2}]\u5FC5\u987B\u8DDF\u4E3B\u5B58\u50A8[uuid:{3}]\u914D\u5BF9\u4F7F\u7528\uFF0C\u4F46\u65E0\u6CD5\u627E\u5230\u53EF\u4EE5\u8DDF\u6EE1\u8DB3\u6761\u4EF6\u5E76\u53EF\u4EE5\u8BBF\u95EE\u8BE5\u4E3B\u5B58\u50A8\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:71
# args: spec.getImage().getUuid(),name,spec.getRequiredBackupStorageUuid(),spec.getImage().getType(),possiblePrimaryStorageTypes
The\ image[uuid\:%s,\ name\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[types\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = \u955C\u50CF[uuid:{0},name:{1}]\u6240\u5728\u7684\u955C\u50CF\u670D\u52A1\u5668[uuid:{2}, type:{3}]\u5FC5\u987B\u8DDF\u4E3B\u5B58\u50A8[uuid:{4}]\u4E00\u8D77\u4F7F\u7528\uFF0C\u4F46\u65E0\u6CD5\u627E\u5230\u53EF\u4EE5\u8DDF\u6EE1\u8DB3\u6761\u4EF6\u5E76\u53EF\u4EE5\u8BBF\u95EE\u8BE5\u4E3B\u5B58\u50A8\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/DesignatedHostAllocatorFlow.java:107
# args: args
No\ host\ with\ %s\ found = \u627E\u4E0D\u5230\u5177\u6709{0}\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/FilterFlow.java:39
# args: filter.getClass().getSimpleName(),filter.filterErrorReason()
after\ filtering,\ HostAllocatorFilterExtensionPoint[%s]\ returns\ zero\ candidate\ host,\ it\ means\:\ %s = \u8FC7\u6EE4\u540E\uFF0CHostAllocatorFilterExtensionPoint[{0}]\u8FD4\u56DE\u96F6\u5019\u9009\u7269\u7406\u673A\uFF0C\u8868\u793A\uFF1A{1}

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:56
# args: 
either\ volumeUuid\ or\ volumeSnapshotUuid\ must\ be\ set = \u4E91\u76D8uuid\u6216\u8005\u5FEB\u7167uuid\u5FC5\u987B\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:75
# args: 
zoneUuids,\ clusterUuids,\ hostUuids\ must\ at\ least\ have\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = \u533A\u57DFuuid\uFF0C\u96C6\u7FA4uuid,\u7269\u7406\u673Auuid\u5FC5\u987B\u6709\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\uFF0C\u6216\u8005\u5168\u90E8\u90FD\u586B\u5199

# at: src/main/java/org/zstack/compute/allocator/HostCapacityAllocatorFlow.java:69
# args: spec.getCpuCapacity(),spec.getMemoryCapacity()
no\ host\ having\ cpu[%s],\ memory[%s\ bytes]\ found = \u672A\u627E\u5230CPU\u4E3A[{0}]\u3001\u5185\u5B58\u4E3A[{1}\u5B57\u8282]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/HostOsVersionAllocatorFlow.java:52
# args: currentHostOs
no\ candidate\ host\ has\ version[%s] = \u6CA1\u6709\u7248\u672C\u4E3A[{0}]\u7684\u5019\u9009\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java:248
# args: PrimaryStorageState.Enabled,PrimaryStorageState.Disabled,PrimaryStorageStatus.Connected
cannot\ find\ available\ primary\ storage[state\:\ %s\ or\ %s,\ status\:\ %s].\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = \u627E\u4E0D\u5230\u53EF\u7528\u7684\u4E3B\u5B58\u50A8[\u72B6\u6001\uFF1A{0}\u6216{1}\uFF0C\u72B6\u6001\uFF1A{2}]\u3002\u68C0\u67E5\u4E3B\u5B58\u50A8\u7684\u72B6\u6001\uFF0C\u5E76\u786E\u4FDD\u5B83\u4EEC\u5DF2\u8FDE\u63A5\u5230\u96C6\u7FA4

# at: src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java:244
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,spec.getDiskSize()
cannot\ find\ available\ primary\ storage[state\:\ %s,\ status\:\ %s,\ available\ capacity\ %s\ bytes].\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = \u627E\u4E0D\u5230\u53EF\u7528\u7684\u4E3B\u5B58\u50A8[\u72B6\u6001\uFF1A{0}\uFF0C\u72B6\u6001\uFF1A{1}\uFF0C\u53EF\u7528\u5BB9\u91CF\u4E3A{2}\u5B57\u8282]\u3002\u68C0\u67E5\u4E3B\u5B58\u50A8\u7684\u72B6\u6001\uFF0C\u5E76\u786E\u4FDD\u5B83\u4EEC\u5DF2\u8FDE\u63A5\u5230\u96C6\u7FA4

# at: src/main/java/org/zstack/compute/allocator/HostSortorChain.java:130
# args: e.getMessage(),host.getUuid(),e.getMessage()
[Host\ Allocation]\:\ %s\ on\ host[uuid\:%s].\ try\ next\ one.\ %s = [\u7269\u7406\u673A\u5206\u914D]\uFF1A\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684{0}\u3002\u8BF7\u5C1D\u8BD5\u4E0B\u4E00\u4E2A\u3002{2}

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:97
# args: spec.getHypervisorType()
no\ host\ having\ state\=Enabled\ status\=Connected\ hypervisorType\=%s\ found = \u672A\u627E\u5230\u72B6\u6001\u4E3A\u201C\u5DF2\u542F\u7528\u201D\u3001\u72B6\u6001\u4E3A\u201C\u5DF2\u8FDE\u63A5\u201D\u3001\u7BA1\u7406\u7A0B\u5E8F\u7C7B\u578B\u4E3A\u201C{0}\u201D\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:99
# args: 
no\ host\ having\ state\=Enabled\ status\=Connected\ found = \u672A\u627E\u5230\u72B6\u6001=\u5DF2\u542F\u7528\u3001\u72B6\u6001=\u5DF2\u8FDE\u63A5\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:94
# args: candidates.size(),spec.getHypervisorType()
no\ Enabled\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts\ having\ the\ hypervisor\ type\ [%s] = \u5728\u5177\u6709\u4E91\u4E3B\u673A\u76D1\u63A7\u7A0B\u5E8F\u7C7B\u578B[{1}]\u7684[{0}]\u5019\u9009\u7269\u7406\u673A\u4E2D\u672A\u627E\u5230\u5DF2\u542F\u7528\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:92
# args: candidates.size()
no\ Enabled\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts = \u5728[{0}]\u4E2A\u5019\u9009\u7269\u7406\u673A\u4E2D\u627E\u4E0D\u5230\u5DF2\u542F\u7528\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:90
# args: candidates.size()
no\ Connected\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts = \u5728[{0}]\u4E2A\u5019\u9009\u7269\u7406\u673A\u4E2D\u627E\u4E0D\u5230\u5DF2\u8FDE\u63A5\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:110
# args: spec.getImage().getUuid(),spec.getImage().getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ deleted\ on\ all\ backup\ storage = \u955C\u50CF[uuid:{0}, name:{1}]\u5DF2\u7ECF\u4ECE\u6240\u6709\u955C\u50CF\u670D\u52A1\u5668\u4E0A\u5220\u9664\uFF0C\u65E0\u6CD5\u6267\u884C\u76F8\u5E94\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:144
# args: zoneUuids,spec.getImage().getUuid()
no\ host\ found\ in\ zones[uuids\:%s]\ that\ attaches\ to\ backup\ storage\ where\ image[%s]\ is\ on = \u5728\u533A\u57DF[uuid\uFF1A{0}]\u4E2D\u627E\u4E0D\u5230\u8FDE\u63A5\u5230\u955C\u50CF[{1}]\u6240\u5728\u7684\u5907\u4EFD\u5B58\u50A8\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java:114
# args: entry.getKey()
resource\ binding\ not\ support\ type\ %s\ yet = \u8D44\u6E90\u7ED1\u5B9A\u5C1A\u4E0D\u652F\u6301\u7C7B\u578B{0}

# at: src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java:133
# args: resources
no\ available\ host\ found\ with\ binded\ resource\ %s = \u672A\u627E\u5230\u5177\u6709\u7ED1\u5B9A\u8D44\u6E90{0}\u7684\u53EF\u7528\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java:68
# args: extp.getClass().getName()
InstanceOfferingTagAllocatorExtensionPoint[%s]\ return\ zero\ candidate\ host = InstanceOfferingTagAllocatorExtensionPoint[{0}]\u8FD4\u56DE\u96F6\u4E2A\u5019\u9009\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java:104
# args: extp.getClass().getName()
DiskOfferingTagAllocatorExtensionPoint[%s]\ return\ zero\ candidate\ host = DiskOfferingTagAllocatorExtensionPoint[{0}]\u8FD4\u56DE\u96F6\u5019\u9009\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:108
# args: 
cannot\ bind\ with\ interface\ configured\ with\ vtep\ ip = \u65E0\u6CD5\u4E0E\u914D\u7F6E\u4E86VTEP IP\u7684\u63A5\u53E3\u7ED1\u5B9A

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:64
# args: bondingName,HostNetworkBondingConstant.BONDING_NAME_MAX
invalid\ bonding\ name[%s],\ it\ must\ be\ shorter\ than\ [%s]\ characters = \u7ED1\u5B9A\u540D\u79F0[{0}]\u65E0\u6548\uFF0C\u5B83\u5FC5\u987B\u5C11\u4E8E[{1}]\u4E2A\u5B57\u7B26

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:68
# args: bondingName
invalid\ bonding\ name[%s],\ it\ must\ only\ contains\ letters,\ numbers\ and\ underscores = \u7ED1\u5B9A\u540D\u79F0[{0}]\u65E0\u6548\uFF0C\u5B83\u53EA\u80FD\u5305\u542B\u5B57\u6BCD\u3001\u6570\u5B57\u548C\u4E0B\u5212\u7EBF

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:77
# args: bondingName,hostUuid
bonding\ card\ can\ not\ have\ occupied\ bondingName\:[%s],\ which\ was\ already\ been\ used\ by\ host[%s]. = \u7ED1\u5B9A\u5361\u4E0D\u80FD\u5360\u7528BondingName\uFF1A[{0}]\uFF0C\u5B83\u5DF2\u88AB\u7269\u7406\u673A[{1}]\u4F7F\u7528\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:103
# args: 
cannot\ bind\ with\ interface\ corresponding\ to\ the\ management\ network = \u65E0\u6CD5\u4E0E\u7BA1\u7406\u7F51\u7EDC\u5BF9\u5E94\u7684\u63A5\u53E3\u7ED1\u5B9A

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:115
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ which\ is\ not\ on\ the\ same\ host[%s]. = \u7ED1\u5B9A\u5361\u4E0D\u80FD\u5177\u6709\u4E0D\u5728\u540C\u4E00\u7269\u7406\u673A[{0}]\u4E0A\u7684\u63A5\u53E3\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:120
# args: hostUuid
bonding\ card\ can\ not\ have\ occupied\ interfaces,\ which\ was\ already\ been\ used\ by\ host[%s]. = \u7ED1\u5B9A\u5361\u4E0D\u80FD\u5360\u7528\u63A5\u53E3\uFF0C\u8BE5\u63A5\u53E3\u5DF2\u88AB\u7269\u7406\u673A[{0}]\u4F7F\u7528\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:125
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ that\ has\ been\ used\ as\ a\ network\ bridge,\ which\ was\ already\ been\ used\ by\ host[%s]. = \u7ED1\u5B9A\u5361\u4E0D\u80FD\u5177\u6709\u5DF2\u7528\u4F5C\u7F51\u6865\u7684\u63A5\u53E3\uFF0C\u8BE5\u63A5\u53E3\u5DF2\u88AB\u7269\u7406\u673A[{0}]\u4F7F\u7528\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:152
# args: interfaceVO.getUuid()
bonding\ card\ can\ not\ have\ interface[%s]\ which\ have\ been\ sriov\ virtualized. = \u7ED1\u5B9A\u5361\u4E0D\u80FD\u5177\u6709\u5DF2\u88ABSRIOV\u865A\u62DF\u5316\u7684\u63A5\u53E3[{0}]\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:161
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ with\ different\ speed,\ which\ is\ on\ the\ host[%s]. = \u7ED1\u5B9A\u5361\u4E0D\u80FD\u6709\u4E0D\u540C\u901F\u5EA6\u7684\u63A5\u53E3\uFF0C\u5728\u7269\u7406\u673A[{0}]\u4E0A\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:168
# args: mode,xmitHashPolicy
[%s]\ bonding\ card\ can\ not\ designate\ [%s],\ Only\ mode\ 802.3ad\ support\ specifying\ different\ xmit_hash_policys = [{0}]\u7ED1\u5B9A\u5361\u65E0\u6CD5\u6307\u5B9A[{1}]\uFF0C\u53EA\u6709\u6A21\u5F0F802.3ad\u652F\u6301\u6307\u5B9A\u4E0D\u540C\u7684xmit_\u54C8\u5E0C_\u7B56\u7565

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:181
# args: mode,size
[%s]\ bonding\ can\ not\ have\ [%s]\ interfaces,\ it\ must\ be\ the\ number\ between[1~2]. = [{0}]\u7ED1\u5B9A\u4E0D\u80FD\u6709[{1}]\u4E2A\u63A5\u53E3\uFF0C\u5176\u6570\u91CF\u5FC5\u987B\u5728[1~2]\u4E4B\u95F4\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:177
# args: mode,size
[%s]\ bonding\ card\ can\ not\ have\ [%s]\ interfaces,\ it\ must\ be\ the\ number\ between[1~8]. = [{0}]\u4E2A\u7ED1\u5B9A\u5361\u4E0D\u80FD\u6709[{1}]\u4E2A\u63A5\u53E3\uFF0C\u5FC5\u987B\u5728[1~8]\u4E4B\u95F4\u3002

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:214
# args: msg.getType()
invalid\ bonding\ type[%s] = \u7ED1\u5B9A\u7C7B\u578B[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:242
# args: 
cannot\ delete\ bonding\ corresponding\ to\ the\ management\ network = \u65E0\u6CD5\u5220\u9664\u4E0E\u7BA1\u7406\u7F51\u7EDC\u5BF9\u5E94\u7684\u7ED1\u5B9A

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:247
# args: 
cannot\ delete\ bonding\ configured\ with\ vtep\ ip = \u65E0\u6CD5\u5220\u9664\u4F7F\u7528VTEP IP\u914D\u7F6E\u7684\u7ED1\u5B9A

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:58
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ add\ linux\ bonding\ to\ host[uuid\:%s]\ \:\ %s = \u65E0\u6CD5\u5C06Linux\u7ED1\u5B9A\u6DFB\u52A0\u5230\u7269\u7406\u673A[uuid\uFF1A{0}]\uFF1A{1}

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:97
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ update\ linux\ bonding\ on\ host[uuid\:%s]\ \:\ %s = \u65E0\u6CD5\u66F4\u65B0\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u7684Linux\u7ED1\u5B9A\uFF1A{1}

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:132
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ remove\ linux\ bonding\ from\ host[uuid\:%s]\ \:\ %s = \u65E0\u6CD5\u4ECE\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E2D\u5220\u9664Linux\u7ED1\u5B9A\uFF1A{1}

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:55
# args: 
if\ cluster\ type\ is\ baremetal,\ then\ hypervisorType\ must\ be\ baremetal\ too,\ or\ vice\ versa = \u5982\u679C\u96C6\u7FA4\u7C7B\u578B\u4E3A\u88F8\u673A\uFF0C\u5219hypervisorType\u4E5F\u5FC5\u987B\u4E3A\u88F8\u673A\uFF0C\u53CD\u4E4B\u4EA6\u7136

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:71
# args: 
only\ kvm\ hosts'\ operating\ system\ can\ be\ updated,\ for\ now = \u76EE\u524D\u53EA\u652F\u6301\u5347\u7EA7KVM\u7269\u7406\u673A\u64CD\u4F5C\u7CFB\u7EDF

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:82
# args: msg.getUuid()
there\ are\ hosts\ in\ cluster[uuid\:%s]\ in\ the\ PreMaintenance\ state,\ cannot\ update\ cluster\ os\ right\ now = \u96C6\u7FA4[uuid:{0}] \u4E2D\u5B58\u5728\u5904\u4E8E\u9884\u7EF4\u62A4\u6A21\u5F0F\u7684\u7269\u7406\u673A\uFF0C\u65E0\u6CD5\u6267\u884C\u64CD\u4F5C\u7CFB\u7EDF\u5347\u7EA7\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:94
# args: msg.getUuid()
not\ all\ hosts\ in\ cluster[uuid\:%s]\ are\ in\ the\ Connected\ status,\ cannot\ update\ cluster\ os\ right\ now = \u96C6\u7FA4[uuid:{0}] \u4E2D\u5B58\u5728\u672A\u5904\u4E8E\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\uFF0C\u65E0\u6CD5\u6267\u884C\u64CD\u4F5C\u7CFB\u7EDF\u5347\u7EA7\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java:45
# args: r
invalid\ cpu\ pinning\ ref[%s].\ correct\ example\ is\ [1,3\:3-6,^5] = CPU\u56FA\u5B9A\u5F15\u7528[{0}]\u65E0\u6548\u3002\u6B63\u786E\u7684\u4F8B\u5B50\u662F[1\uFF0C3:3-6\uFF0C^5]

# at: src/main/java/org/zstack/compute/cpuPinning/CpuRangeSet.java:58
# args: word
Invalid\ cpuset\ [%s] = \u65E0\u6548\u7684CPUSet[{0}]

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java:53
# args: pCpuNum
the\ host\ vm\ located\ only\ have\ %\ CPUs = \u6240\u5B9A\u4F4D\u7684\u7269\u7406\u673A\u4E91\u4E3B\u673A\u53EA\u6709%\u7684CPU

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java:46
# args: 
incorrect\ input\ format,\ only\ accept\ '^[0-9,]+$' = \u8F93\u5165\u683C\u5F0F\u4E0D\u6B63\u786E\uFF0C\u53EA\u63A5\u53D7'^[0-9\uFF0C]+$'

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningFilterFlow.java:37
# args: 
vcpu\ pinning\ pcpu\ id\ >\ host\ cores = vcpu\u8981\u7ED1\u5B9A\u7684pcpu id\u5927\u4E8E\u4E86\u7269\u7406\u673A\u5B9E\u9645\u6838\u6570

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:81
# args: 
webssh\ server\ is\ not\ running. = WebSSH\u670D\u52A1\u5668\u672A\u8FD0\u884C\u3002

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:105
# args: msg.getManagementIp()
managementIp[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = \u7BA1\u7406IP[{0}]\u65E2\u4E0D\u662F\u6709\u6548\u7684IPv4\u5730\u5740\u4E5F\u4E0D\u662F\u6709\u6548\u7684\u7269\u7406\u673A\u540D

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:115
# args: msg.getHostUuid(),hostStatus
can\ not\ maintain\ host[uuid\:%s,\ status\:%s]which\ is\ not\ Connected = \u53EA\u80FD\u5BF9\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A[uuid:{0}, status:{1}]\u8FDB\u884C\u7EF4\u62A4\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/host/HostBase.java:272
# args: msg.getHostUuid()
host[%s]\ does\ not\ have\ ipmi\ device\ or\ ipmi\ does\ not\ have\ address.After\ config\ ipmi\ address,\ please\ reconnect\ host\ to\ refresh\ host\ ipmi\ information = \u7269\u7406\u673A[{0}]\u6CA1\u6709IPMI\u8BBE\u5907\u6216IPMI\u6CA1\u6709\u5730\u5740\u3002\u914D\u7F6EIPMI\u5730\u5740\u540E\uFF0C\u8BF7\u91CD\u65B0\u8FDE\u63A5\u7269\u7406\u673A\u4EE5\u5237\u65B0\u7269\u7406\u673AIPMI\u4FE1\u606F

# at: src/main/java/org/zstack/compute/host/HostBase.java:435
# args: vmFailedToMigrate.keySet(),self.getUuid(),self.getName(),self.getManagementIp()
failed\ to\ migrate\ vm[uuids\:%s]\ on\ host[uuid\:%s,\ name\:%s,\ ip\:%s],\ will\ try\ stopping\ it. = \u65E0\u6CD5\u8FC1\u79FB\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0C\u540D\u79F0\uFF1A{2}\uFF0CIP\uFF1A{3}]\u4E0A\u7684VM[uuid\uFF1A{0}]\uFF0C\u5C06\u5C1D\u8BD5\u505C\u6B62\u5B83\u3002

# at: src/main/java/org/zstack/compute/host/HostBase.java:841
# args: 
host\ is\ connecting,\ ping\ failed = \u7269\u7406\u673A\u6B63\u5728\u8FDE\u63A5, \u4E0D\u80FD\u8FDB\u884Cping\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:63
# args: host.getUuid()
mock\ power\ off\ host[%s]\ by\ ipmi\ failed. = \u901A\u8FC7IPMI\u6A21\u62DF\u7269\u7406\u673A[{0}]\u65AD\u7535\u5931\u8D25\u3002

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:79
# args: host.getUuid()
power\ off\ host[%s]\ by\ ipmi\ failed. = \u901A\u8FC7IPMI\u5173\u95ED\u7269\u7406\u673A[{0}]\u5931\u8D25\u3002

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:121
# args: host.getUuid()
mock\ power\ on\ host[%s]\ by\ ipmi\ failed. = \u901A\u8FC7IPMI\u6A21\u62DF\u7269\u7406\u673A[{0}]\u4E0A\u7684\u7535\u6E90\u5931\u8D25\u3002

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:131
# args: host.getUuid()
power\ on\ host[%s]\ by\ ipmi\ failed. = \u901A\u8FC7IPMI\u6253\u5F00\u7269\u7406\u673A[{0}]\u7535\u6E90\u5931\u8D25\u3002

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:161
# args: host.getUuid()
mock\ power\ reset\ host[%s]\ by\ ipmi\ failed. = \u901A\u8FC7IPMI\u6A21\u62DF\u7535\u6E90\u91CD\u7F6E\u7269\u7406\u673A[{0}]\u5931\u8D25\u3002

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:171
# args: host.getUuid()
power\ reset\ host[%s]\ by\ ipmi\ failed. = \u901A\u8FC7IPMI\u5BF9\u7269\u7406\u673A[{0}]\u8FDB\u884C\u7535\u6E90\u91CD\u7F6E\u5931\u8D25\u3002

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:192
# args: 
ipmi\ information\ is\ not\ complete. = IPMI\u4FE1\u606F\u4E0D\u5B8C\u6574\u3002

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:205
# args: ipmi.getUuid(),rst.getStderr()
host[%s]\ can\ not\ connect\ ipmi[%s],\ because\:%s = \u7269\u7406\u673A[{0}]\u65E0\u6CD5\u8FDE\u63A5IPMI[{1}]\uFF0C\u56E0\u4E3A\uFF1A{2}

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:202
# args: ipmi.getUuid()
host[%s]\ got\ unexpected\ return\ value = \u7269\u7406\u673A[{0}]\u83B7\u5F97\u610F\u5916\u7684\u8FD4\u56DE\u503C

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:222
# args: ipmi.getIpmiAddress(),rst.getStderr()
host\ ipmi[%s]\ is\ not\ reachable.because\ %s = \u65E0\u6CD5\u8BBF\u95EE\u7269\u7406\u673AIPMI[{0}]\u3002\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:264
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ managementIp[%s] = \u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u7BA1\u7406IP\u662F[{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:270
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ existing = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:364
# args: vo.getName(),vo.getManagementIp()
after\ connecting,\ host[name\:%s,\ ip\:%s]\ returns\ a\ null\ architecture = \u8FDE\u63A5\u540E\uFF0C\u7269\u7406\u673A[\u540D\u79F0\uFF1A{0}\uFF0CIP\uFF1A{1}]\u8FD4\u56DE\u7A7A\u4F53\u7CFB\u7ED3\u6784

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:379
# args: vo.getClusterUuid(),cluster.getArchitecture(),vo.getName(),vo.getManagementIp(),arch
cluster[uuid\:%s]'s\ architecture\ is\ %s,\ not\ match\ the\ host[name\:%s,\ ip\:%s]\ architecture\ %s = \u96C6\u7FA4[uuid\uFF1A{0}]\u7684\u4F53\u7CFB\u7ED3\u6784\u4E3A{1}\uFF0C\u4E0E\u7269\u7406\u673A[\u540D\u79F0\uFF1A{2}\uFF0CIP\uFF1A{3}]\u7684\u4F53\u7CFB\u7ED3\u6784{4}\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:515
# args: msg.getCancellationApiId()
no\ running\ api[%s]\ task\ on\ hosts = \u7269\u7406\u673A\u4E0A\u6CA1\u6709\u6B63\u5728\u8FD0\u884C\u7684API[{0}]\u4EFB\u52A1

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:733
# args: d.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ becomes\ disconnected,\ the\ host\ has\ no\ connected\ primary\ storage\ attached = \u4E3B\u5B58\u50A8[uuid:{0}]\u5931\u8054\uFF0C\u7269\u7406\u673A\u6CA1\u6709\u5173\u8054\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:59
# args: nameips.stream().map( it -> it.get(1, String.class) + "/" + it.get(0, String.class)).collect(Collectors.joining(", "))
host(s)\ [%s]\ is\ not\ Connected,\ not\ support\ to\ power\ off = \u7269\u7406\u673A[{0}]\u672A\u8FDE\u63A5\uFF0C\u4E0D\u652F\u6301\u5173\u673A

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:67
# args: ipAddress
invalid\ ip\ address\ format[%s] = IP\u5730\u5740\u683C\u5F0F[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:71
# args: netmask
invalid\ netmask\ format[%s] = \u7F51\u7EDC\u63A9\u7801\u683C\u5F0F[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:75
# args: 
invalid\ ip\ set,\ it\ must\ be\ set\ with\ netmask = \u8BBE\u7F6E\u7684IP\u65E0\u6548\uFF0C\u5FC5\u987B\u4F7F\u7528\u7F51\u7EDC\u63A9\u7801\u8FDB\u884C\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:91
# args: 
cannot\ set\ ip\ on\ interface\ corresponding\ to\ the\ management\ network = \u65E0\u6CD5\u5728\u4E0E\u7BA1\u7406\u7F51\u7EDC\u5BF9\u5E94\u7684\u63A5\u53E3\u4E0A\u8BBE\u7F6EIP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:192
# args: 
cannot\ set\ ip\ which\ has\ been\ set\ on\ the\ other\ interfaces = \u65E0\u6CD5\u8BBE\u7F6E\u5DF2\u5728\u5176\u4ED6\u63A5\u53E3\u4E0A\u8BBE\u7F6E\u7684IP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:126
# args: 
cannot\ set\ ip\ on\ bonding\ slaves = \u65E0\u6CD5\u5728\u7ED1\u5B9A\u4ECE\u5C5E\u670D\u52A1\u5668\u4E0A\u8BBE\u7F6EIP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:203
# args: 
cannot\ set\ ip\ on\ bridge\ slaves = \u65E0\u6CD5\u5728\u7F51\u6865\u4ECE\u5C5E\u670D\u52A1\u5668\u4E0A\u8BBE\u7F6EIP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:151
# args: msg.getInterfaceUuid()
invalid\ interface\ uuid = \u63A5\u53E3uuid\u65E0\u6548

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:168
# args: 
cannot\ set\ ip\ on\ bonding\ corresponding\ to\ the\ management\ network = \u65E0\u6CD5\u5728\u4E0E\u7BA1\u7406\u7F51\u7EDC\u5BF9\u5E94\u7684\u7ED1\u5B9A\u4E0A\u8BBE\u7F6EIP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:213
# args: msg.getBondingUuid()
invalid\ bonding\ uuid = \u7ED1\u5B9Auuid\u65E0\u6548

# at: src/main/java/org/zstack/compute/host/HostNetworkInterfaceStateAllocatorFlow.java:141
# args: 
no\ available\ network\ interface\ on\ the\ host\ to\ start\ the\ vm = \u7269\u7406\u673A\u4E0A\u6CA1\u6709\u53EF\u7528\u4E8E\u542F\u52A8\u4E91\u4E3B\u673A\u7684\u7F51\u7EDC\u63A5\u53E3

# at: src/main/java/org/zstack/compute/host/HostSecurityLevelAllocatorFilterExtensionPoint.java:68
# args: 
vm\ security\ level\ not\ consistent\ with\ vms\ running\ on\ host = \u4E91\u4E3B\u673A\u5B89\u5168\u7EA7\u522B\u4E0E\u7269\u7406\u673A\u4E0A\u8FD0\u884C\u7684\u4E91\u4E3B\u673A\u4E0D\u4E00\u81F4

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:280
# args: host.getUuid(),host.getName(),host.getState()
host[uuid\:%s,\ name\:%s]\ is\ in\ state[%s],\ cannot\ perform\ required\ operation = \u7269\u7406\u673A[uuid:{0}, name:{1}]\u5904\u4E8E\u72B6\u6001[{2}]\u4E2D\uFF0C\u4E0D\u80FD\u5904\u7406\u8BE5\u8BF7\u6C42

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:917
# args: ret.getError()
operation\ error,\ because\ %s = \u64CD\u4F5C\u9519\u8BEF\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:370
# args: l3Uuid,msg.getHostUuid()
failed\ to\ allocate\ pci\ device\ for\ l3[uuid\:%s]\ on\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684L3[uuid\uFF1A{0}]\u5206\u914DPCI\u8BBE\u5907

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:622
# args: msg.getNetworkInterfaceName(),msg.getHostUuid()
networkInterface[name\:%s]\ of\ host[uuid\:%s]\ can\ not\ find = \u627E\u4E0D\u5230\u7269\u7406\u673A[uuid\uFF1A{1}]\u7684\u7F51\u7EDC\u63A5\u53E3[\u540D\u79F0\uFF1A{0}]

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:805
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
only\ support\ do\ live\ snapshot\ on\ vm\ state[%s],\ but\ vm\ is\ on\ [%s]\ state = \u4EC5\u652F\u6301\u5728VM\u72B6\u6001[{0}]\u4E0A\u6267\u884C\u5B9E\u65F6\u5FEB\u7167\uFF0C\u4F46VM\u5904\u4E8E[{1}]\u72B6\u6001

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:1389
# args: ret.getError()
sync\ vm\ port\ config\ failed\:\ %s = \u540C\u6B65\u4E91\u4E3B\u673A\u7AEF\u53E3\u914D\u7F6E\u5931\u8D25\uFF1A{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:1423
# args: ret.getError()
set\ vm\ hostname\ failed\:\ %s = \u8BBE\u7F6EVM\u7269\u7406\u673A\u540D\u5931\u8D25\uFF1A{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBaseFactory.java:84
# args: huuid,cidr
host[uuid\:%s]\ has\ multi\ ips\ in\ cidr[%s] = \u7269\u7406\u673A[uuid\uFF1A{0}]\u5728CIDR[{1}]\u4E2D\u5177\u6709\u591A\u4E2AIP

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:1058
# args: msg.getHostUuid()
host[uuid\:%s]\ can\ not\ find = \u627E\u4E0D\u5230\u7269\u7406\u673A[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:408
# args: rsp.getError()
failed\ to\ update\ interface\ ip,\ because\ %s = \u65E0\u6CD5\u66F4\u65B0\u63A5\u53E3IP\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:510
# args: rsp.getError()
failed\ to\ update\ bonding\ ip,\ because\ %s = \u65E0\u6CD5\u66F4\u65B0\u7ED1\u5B9AIP\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:1024
# args: clusterUuids,hypervisorType
cluster[uuids\:%s,\ hypervisorType\:%s]\ are\ not\ exist! = \u96C6\u7FA4[uuid\uFF1A{0}\uFF0CHypervisorType\uFF1A{1}]\u4E0D\u5B58\u5728\uFF01

# at: src/main/java/org/zstack/compute/ovs/VSwitchOvsManagerImpl.java:72
# args: newValue
ovs\ cpu\ pinning\ resource\ config\:[%s]\ format\ error. = OVS CPU\u56FA\u5B9A\u8D44\u6E90\u914D\u7F6E\uFF1A[{0}]\u683C\u5F0F\u9519\u8BEF\u3002

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:136
# args: msg.getVmNicUuid()
vm\ nic[uuid\:%s]\ doesn't\ exist = VM NIC[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:77
# args: VmVfNicConstant.SRIOVABLE_L2_NETWORK_TYPES
only\ %s\ support\ sriov = \u4EC5{0}\u652F\u6301SRIOV

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:83
# args: L2NetworkConstant.VSWITCH_TYPE_OVS_DPDK
%s\ don't\ support\ sriov = {0}\u4E0D\u652F\u6301SRIOV

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:93
# args: l3Uuid
L3\ Network\ [uuid\:%s]\ doesn't\ exist = \u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:97
# args: l2Uuid,l3Uuid
related\ l2\ network[uuid\:%s]\ of\ l3\ network[uuid\:%s]\ is\ not\ sriov\ enabled = \u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{1}]\u7684\u76F8\u5173\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u672A\u542F\u7528SRIOV

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:140
# args: msg.getVmNicUuid(),msg.getVmNicType()
vm\ nic[uuid\:%s]\ is\ already\ of\ type\ %s,\ no\ need\ to\ change = VM NIC[uuid\uFF1A{0}]\u5DF2\u5C5E\u4E8E\u7C7B\u578B{1}\uFF0C\u65E0\u9700\u66F4\u6539

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:146
# args: 
change\ vm\ nic\ type\ only\ when\ the\ vm\ is\ stopped = \u4EC5\u5728VM\u505C\u6B62\u65F6\u66F4\u6539VM NIC\u7C7B\u578B

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:190
# args: 
cant\ not\ change\ vf\ nic\ to\ normal\ type = \u65E0\u6CD5\u5C06VF NIC\u66F4\u6539\u4E3A\u6B63\u5E38\u7C7B\u578B

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:197
# args: 
cant\ not\ change\ nic\ to\ vf\ type = \u65E0\u6CD5\u5C06NIC\u66F4\u6539\u4E3AVF\u7C7B\u578B

# at: src/main/java/org/zstack/compute/sriov/VmVfNicFilterFlow.java:89
# args: 
no\ candidate\ host\ with\ enough\ vf\ nic\ pci\ devices = \u6CA1\u6709\u5177\u6709\u8DB3\u591FVF NIC PCI\u8BBE\u5907\u7684\u5019\u9009\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:275
# args: vmType
enableSRIOV\ tag\ is\ not\ supported\ for\ vm\ type\ [%s] = \u4E91\u4E3B\u673A\u7C7B\u578B[{0}]\u4E0D\u652F\u6301EnableSriov\u6807\u8BB0

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:476
# args: vmUuid
vm[uuid\:%s]\ needs\ to\ be\ running\ when\ attach\ vf\ nics,\ but\ no\ hostUuid\ found = \u8FDE\u63A5VF NIC\u65F6\u9700\u8981\u8FD0\u884CVM[uuid\uFF1A{0}]\uFF0C\u4F46\u672A\u627E\u5230HOSTuuid

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:499
# args: hostUuid,l3Uuid
cannot\ find\ available\ vf\ nic\ pci\ device\ on\ host[uuid\:%s]\ for\ l3[uuid\:%s] = \u5BF9\u4E8EL3[uuid\uFF1A{1}]\uFF0C\u5728\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u627E\u4E0D\u5230\u53EF\u7528\u7684VF NIC PCI\u8BBE\u5907

# at: src/main/java/org/zstack/compute/sriov/VmVfNicReserveFlow.java:88
# args: hostUuid,vmUuid
reserve\ pci\ address\ for\ on\ host[uuid]\ for\ vm\ [uuid\:%s]\ failed, = \u5728\u7269\u7406\u673A[uuid]\u4E0A\u4E3A\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u4FDD\u7559\u7684PCI\u5730\u5740\u5931\u8D25\uFF0C

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java:49
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ delete\ vHost\ User\ Client\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = \u65E0\u6CD5\u5220\u9664\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E2D\u7684vhost\u7528\u6237\u5BA2\u6237\u7AEF\uFF1A{2}

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java:85
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ generate\ vHost\ User\ Client\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E2D\u4E3AVM[uuid\uFF1A{1}]\u751F\u6210vhost\u7528\u6237\u5BA2\u6237\u7AEF\uFF1A{2}

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicManagerImpl.java:309
# args: inv.getUuid(),destHostUuid
cannot\ generate\ vhost\ user\ client\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u76EE\u6807\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u751F\u6210vhost\u7528\u6237\u5BA2\u6237\u7AEF

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:66
# args: VmVdpaNicConstant.VDPA_L2_NETWORK_TYPES
only\ %s\ support\ vdpa = \u4EC5{0}\u652F\u6301VDPA

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:106
# args: l2Vo.getvSwitchType(),l2Vo.getPhysicalInterface()
can\ not\ create\ %s\ with\ physical\ interface\:[%s]\ which\ was\ already\ been\ used\ by\ another\ vSwitch\ type. = \u65E0\u6CD5\u521B\u5EFA\u7269\u7406\u63A5\u53E3\u4E3A[{1}]\u7684{0}\uFF0C\u8BE5\u63A5\u53E3\u5DF2\u7531\u53E6\u4E00\u4E2AvSwitch\u7C7B\u578B\u4F7F\u7528\u3002

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:131
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ do\ not\ support\ ovs-dpdk = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E0D\u652F\u6301OVS-DPDK

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:147
# args: l2NicName,hostUuid,l2NicName
physical\ interface[%s]\ in\ host[uuid\:%s]\ is\ not\ sriov\ virtualized,\ please\ perform\ sriov\ cutting\ operation\ on\ physical\ interface[%s]. = \u7269\u7406\u673A[uuid\uFF1A{1}]\u4E2D\u7684\u7269\u7406\u63A5\u53E3[{0}]\u672A\u8FDB\u884CSRIOV\u865A\u62DF\u5316\uFF0C\u8BF7\u5BF9\u7269\u7406\u63A5\u53E3[{2}]\u8FDB\u884CSRIOV\u88C1\u526A\u64CD\u4F5C\u3002

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java:49
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ delete\ vdpas\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = \u65E0\u6CD5\u5220\u9664\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E2DVM[uuid\uFF1A{1}]\u7684VDPA\uFF1A{2}

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java:86
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ generate\ vdpas\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E2D\u4E3AVM[uuid\uFF1A{1}]\u751F\u6210VDPA\uFF1A{2}

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:650
# args: hostUuid,l3Uuid
cannot\ find\ available\ vdpa\ nic\ pci\ device\ on\ host[uuid\:%s]\ for\ l3[uuid\:%s] = \u5728\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u627E\u4E0D\u5230\u53EF\u7528\u4E8EL3[uuid\uFF1A{1}]\u7684VDPA NIC PCI\u8BBE\u5907

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:263
# args: vmUuid
vm[uuid\:%s]\ needs\ to\ be\ running\ when\ attach\ vdpa\ nics,\ but\ no\ hostUuid\ found = \u8FDE\u63A5VDPA NIC\u65F6\u9700\u8981\u8FD0\u884CVM[uuid\uFF1A{0}]\uFF0C\u4F46\u672A\u627E\u5230HOSTuuid

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:688
# args: inv.getUuid(),destHostUuid
cannot\ generate\ vdpa\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u76EE\u6807\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u751F\u6210VDPA

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:835
# args: 
no\ candidate\ host\ with\ enough\ vdpa\ resource = \u6CA1\u6709\u5177\u6709\u8DB3\u591FVDPA\u8D44\u6E90\u7684\u5019\u9009\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:63
# args: 
not\ dest\ host\ found\ in\ db,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = \u6CA1\u6709\u5728\u7269\u7406\u673A\u4E0A\u53D1\u73B0\u6570\u636E\u5E93\uFF0C\u4E0D\u80FD\u53D1\u9001\u66F4\u6539\u5BC6\u7801\u7684\u6307\u4EE4\u5230\u8FD9\u4E2A\u7269\u7406\u673A\u4E0A

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:64
# args: 
not\ account\ preference\ found,\ \ send\ change\ password\ cmd\ to\ the\ host! = \u6CA1\u6709\u4F18\u5148\u7EA7\u8D26\u6237\u53BB\u53D1\u9001\u6539\u53D8\u5BC6\u7801\u7684\u6307\u4EE4\u5230\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:160
# args: srcPath,getManagementServerId()
fail\ to\ attach\ virtio\ driver\ because\ read\ md5\ of\ file[%s]\ fail\ in\ mn[uuid\:%s]\:\ file\ not\ found\ on\ classpath = \u65E0\u6CD5\u9644\u52A0virtio\u9A71\u52A8\u7A0B\u5E8F\uFF0C\u56E0\u4E3A\u5728Mn[uuid\uFF1A{1}]\u4E2D\u8BFB\u53D6\u6587\u4EF6[{0}]\u7684MD5\u5931\u8D25\uFF1A\u5728\u7C7B\u8DEF\u5F84\u4E2D\u627E\u4E0D\u5230\u6587\u4EF6

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:172
# args: srcPath,getManagementServerId(),e.getMessage()
fail\ to\ attach\ virtio\ driver\ because\ read\ md5\ of\ file[%s]\ fail\ in\ mn[uuid\:%s]\:\ %s = \u65E0\u6CD5\u9644\u52A0virtio\u9A71\u52A8\u7A0B\u5E8F\uFF0C\u56E0\u4E3A\u5728Mn[uuid\uFF1A{1}]\u4E2D\u8BFB\u53D6\u6587\u4EF6[{0}]\u7684MD5\u5931\u8D25\uFF1A{2}

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:167
# args: srcPath,getManagementServerId()
fail\ to\ attach\ virtio\ driver\ because\ of\ invalid\ md5\ of\ file[%s]\ in\ mn[uuid\:%s] = \u65E0\u6CD5\u9644\u52A0virtio\u9A71\u52A8\u7A0B\u5E8F\uFF0C\u56E0\u4E3AMn[uuid\uFF1A{1}]\u4E2D\u6587\u4EF6[{0}]\u7684MD5\u65E0\u6548

# at: src/main/java/org/zstack/compute/vm/CheckIfCreateTemporaryTemplateFlow.java:105
# args: spec.getDataVolumeRequiredHostUuids()
only\ host(s)[uuid(s)\:\ %s]\ can\ access\ data\ volume. = \u53EA\u6709\u7269\u7406\u673A[uuid\uFF1A{0}]\u53EF\u4EE5\u8BBF\u95EE\u6570\u636E\u4E91\u76D8\u3002

# at: src/main/java/org/zstack/compute/vm/CpuTopology.java:71
# args: cpuNum,cpuSockets,cpuCores,cpuThreads,socketNum,coreNum,threadNum
cpu\ topology\ is\ not\ correct,\ cpuNum[%s],\ configured\ cpuSockets[%s],\ cpuCores[%s],\ cpuThreads[%s];\ Calculated\ cpuSockets[%s],\ cpuCores[%s],\ cpuThreads[%s] = CPU\u62D3\u6251\u7ED3\u6784\u4E0D\u6B63\u786E\uFF0Ccpunum[{0}]\uFF0C\u5DF2\u914D\u7F6E\u7684cpusockets[{1}]\uFF0CcpuCore[{2}]\uFF0CcpuThreads[{3}]\u3002\u8BA1\u7B97\u7684CPU\u5957\u63A5\u5B57[{4}]\uFF0CCPU\u6838\u5FC3[{5}]\uFF0CCPU\u7EBF\u7A0B[{6}]

# at: src/main/java/org/zstack/compute/vm/IsoOperator.java:40
# args: vmUuid,isoUuid
VM[uuid\:%s]\ has\ attached\ ISO[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u52A0\u8F7D\u4E86ISO[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/IsoOperator.java:48
# args: vmUuid
All\ vm[uuid\:%s]\ CD-ROMs\ have\ mounted\ ISO = \u6240\u6709VM[uuid\uFF1A{0}]CD-ROM\u90FD\u5DF2\u88C5\u8F7DISO

# at: src/main/java/org/zstack/compute/vm/KvmUserVmVirtIODriverExtension.java:142
# args: driverFormat
invalid\ virtio\ driver\ device\ format\:\ %s = \u65E0\u6548\u7684virtio\u9A71\u52A8\u7A0B\u5E8F\u8BBE\u5907\u683C\u5F0F\uFF1A{0}

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:77
# args: mac
This\ is\ not\ a\ valid\ MAC\ address\ [%s] = \u8FD9\u662F\u4E00\u4E2A\u65E0\u6548\u7684MAC\u5730\u5740

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:87
# args: mac
Not\ a\ valid\ MAC\ address\ [%s] = \u8FD9\u662F\u4E00\u4E2A\u65E0\u6548\u7684MAC\u5730\u5740[{0}]

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:90
# args: 
Disallowed\ address = \u4E0D\u88AB\u5141\u8BB8\u7684MAC\u5730\u5740

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:93
# args: mac
Expected\ unicast\ mac\ address,\ found\ multicast\ MAC\ address\ [%s] = \u671F\u671B\u7684\u662F\u4E00\u4E2A\u5355\u64AD\u7684MAC\u5730\u5740\uFF0C\u4F46\u627E\u5230\u7684\u662F\u4E00\u4E2A\u7EC4\u64AD\u7684MAC\u5730\u5740[{0}]

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:251
# args: 
state\ of\ vm[uuid\:%s]\ is\ not\ in\ Running\ state,\ can\ not\ sync\ clock = VM[uuid\uFF1A{0}]\u7684\u72B6\u6001\u672A\u5904\u4E8E\u8FD0\u884C\u72B6\u6001\uFF0C\u65E0\u6CD5\u540C\u6B65\u65F6\u949F

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:442
# args: 
hot\ plug\ is\ not\ turned\ off,can\ not\ open\ vm\ numa = \u70ED\u63D2\u62D4\u672A\u5173\u95ED\uFF0C\u65E0\u6CD5\u6253\u5F00VM NUMA

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:609
# args: self.getUuid()
vm[uuid\:\ %s]'s\ state\ is\ not\ Stopped\ now,\ cannot\ operate\ 'changevmimage'\ action = VM[uuid\uFF1A{0}]\u7684\u72B6\u6001\u73B0\u5728\u672A\u505C\u6B62\uFF0C\u65E0\u6CD5\u6267\u884C\u201C ChangeVMImage \u201D\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:662
# args: self.getUuid()
vm[uuid\:%s]\ cluster\ uuid\ is\ null,\ cannot\ change\ image\ for\ it = VM[uuid\uFF1A{0}]\u96C6\u7FA4uuid\u4E3A\u7A7A\uFF0C\u65E0\u6CD5\u66F4\u6539\u5176\u955C\u50CF

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:675
# args: self.getUuid(),self.getClusterUuid()
vm[uuid\:%s]\ is\ in\ cluster[uuid\:%s],\ but\ there\ is\ no\ available\ host\ in\ the\ cluster,\ cannot\ change\ image\ for\ the\ vm = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u4F4D\u4E8E\u96C6\u7FA4[uuid\uFF1A{1}]\u4E2D\uFF0C\u4F46\u96C6\u7FA4\u4E2D\u6CA1\u6709\u53EF\u7528\u7684\u7269\u7406\u673A\uFF0C\u65E0\u6CD5\u66F4\u6539\u4E91\u4E3B\u673A\u7684\u955C\u50CF

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:967
# args: vivo.getRootVolumeUuid(),vivo.getRootVolume().getPrimaryStorageUuid(),msg.getPrimaryStorageUuidForRootVolume()
cannot\ find\ backupStorage\ for\ volume[uuid\:\ %s,\ psUuid\:\ %s],\ required\ primary\ storage\ uuid\:%s = \u627E\u4E0D\u5230\u5377[uuid\uFF1A{0}\uFF0CPSuuid\uFF1A{1}]\u7684BackupStorage\uFF0C\u6240\u9700\u7684\u4E3B\u5B58\u50A8uuid\u4E3A{2}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1152
# args: vol.getPrimaryStorageUuid(),requiredPsUuid
can\ not\ find\ backup\ storage,\ unable\ to\ commit\ volume\ snapshot[psUuid\:%s]\ as\ image,\ destination\ required\ PS\ uuid\:%s = \u627E\u4E0D\u5230\u5907\u4EFD\u5B58\u50A8\uFF0C\u65E0\u6CD5\u5C06\u5377\u5FEB\u7167[PSuuid\uFF1A{0}]\u4F5C\u4E3A\u955C\u50CF\u63D0\u4EA4\uFF0C\u76EE\u6807\u9700\u8981PS uuid\uFF1A{1}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2052
# args: 
direction\ must\ be\ set\ to\ in\ or\ out = \u65B9\u6CD5\u5FC5\u987B\u8BBE\u7F6Ein\u6216\u8005out

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2132
# args: struct.inboundBandwidthUpthreshold
inboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = \u4E0B\u884C\u5E26\u5BBD\u4E0D\u80FD\u8D85\u8FC7{0}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2142
# args: struct.outboundBandwidthUpthreshold
outboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = \u4E0A\u884C\u5E26\u5BBD\u4E0D\u80FD\u8D85\u8FC7{0}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2199
# args: self.getUuid()
vm\ [%s]'\ state\ must\ be\ Running\ or\ Paused\ to\ sync\ nic\ qos = VM[{0}]\u72B6\u6001\u5FC5\u987B\u4E3A\u201C\u6B63\u5728\u8FD0\u884C\u201D\u6216\u201C\u5DF2\u6682\u505C\u201D\u624D\u80FD\u540C\u6B65NIC QoS

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2204
# args: 
vm\ [%s]'s\ HostUuid\ is\ null,\ cannot\ sync\ nic\ qos = VM[{0}]\u7684Hostuuid\u4E3A\u7A7A\uFF0C\u65E0\u6CD5\u540C\u6B65NIC QoS

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2661
# args: amsg.getVmInstanceUuid()
not\ dest\ host\ found\ in\ db\ by\ uuid\:\ %s,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = \u6CA1\u6709\u5728\u7269\u7406\u673A{0}\u4E0A\u53D1\u73B0\u6570\u636E\u5E93\uFF0C\u4E0D\u80FD\u53D1\u9001\u66F4\u6539\u5BC6\u7801\u7684\u6307\u4EE4\u5230\u8FD9\u4E2A\u7269\u7406\u673A\u4E0A

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2691
# args: 
state\ is\ not\ correct\ while\ change\ password. = \u8BE5\u72B6\u6001\u4E0D\u652F\u6301\u4FEE\u6539\u5BC6\u7801

# at: src/main/java/org/zstack/compute/vm/VmAllocateCdRomFlow.java:56
# args: spec.getVmInventory().getUuid()
vm[uuid\:%s]\ cdRom\ deviceId\ repetition = VM[uuid\uFF1A{0}]CDROM DeviceID\u91CD\u590D

# at: src/main/java/org/zstack/compute/vm/VmAllocateHostAndPrimaryStorageFlow.java:69
# args: imageUuid,cachedPsUuids
creation\ rely\ on\ image\ cache[uuid\:%s,\ locate\ ps\ uuids\:\ [%s]],\ cannot\ create\ other\ places. = \u521B\u5EFA\u4F9D\u8D56\u4E8E\u955C\u50CF\u7F13\u5B58[uuid\uFF1A{0}\uFF0C\u5B9A\u4F4DPS uuid\uFF1A[{1}]]\uFF0C\u65E0\u6CD5\u521B\u5EFA\u5176\u4ED6\u4F4D\u7F6E\u3002

# at: src/main/java/org/zstack/compute/vm/VmAllocateNicIpFlow.java:83
# args: v.getL3Invs().get(0).getUuid()
there\ is\ no\ available\ ipRange\ on\ L3\ network\ [%s] = \u4E09\u5C42\u7F51\u7EDC[{0}]\u4E2D\u6CA1\u6709\u53EF\u7528\u7684\u7F51\u7EDC\u6BB5

# at: src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java:50
# args: spec.getVmInventory().getUuid()
\ Can\ not\ find\ the\ vm's\ host,\ please\ start\ the\ vm[%s],\ then\ mount\ the\ disk = \u672A\u627E\u5230\u4E91\u4E3B\u673A\u7684\u7269\u7406\u673A\uFF0C\u8BF7\u91CD\u542F\u4E91\u4E3B\u673A[{0}]\uFF0C\u7136\u540E\u6302\u8F7D\u4E91\u76D8

# at: src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java:68
# args: iso.getUuid(),host.getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ iso[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ running\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = \u4E0D\u80FD\u53D1\u73B0iso[uuid:{0}]\u5728\u4EFB\u4F55\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A\u7684\u5E76\u4E14\u5904\u4E8EConnected\u72B6\u6001\u5907\u4EFD\u7684\u955C\u50CF\u670D\u52A1\u5668\u3002\u53EF\u4EE5\u8FDB\u884C\u5BF9\u4EE5\u4E0B\u9009\u9879\u7684\u68C0\u67E5: \n1. \u955C\u50CF\u670D\u52A1\u5668\u662F\u5426\u5DF2\u7ECF\u6302\u8F7D\u5230\u533A\u57DF\u4E2D\u7684\u4EFB\u4F55\u8FD0\u884C\u72B6\u6001\u7684\u4E91\u4E3B\u673A[name: {2}, uuid:{3}]\u4E0A\uFF1B\n2. \u5982\u679C\u955C\u50CF\u670D\u52A1\u5668\u4E0D\u662F\u5904\u4E8E\u8FDE\u63A5\u72B6\u6001\uFF0C\u8BF7\u5C1D\u8BD5\u91CD\u8FDE

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:713
# args: msg.getVmInstanceUuid(),msg.getIsoUuid()
VM[uuid\:%s]\ already\ has\ an\ ISO[uuid\:%s]\ attached = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u4E86ISO[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:169
# args: 
either\ l3NetworkUuids\ or\ backupStorageUuid\ must\ be\ set = \u5FC5\u987B\u8BBE\u7F6EL3Networkuuid\u6216BackupStorageuuid

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:205
# args: msg.getVmInstanceUuid(),state
unable\ to\ change\ to\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = \u65E0\u6CD5\u66F4\u6539\u4E3A\u4E09\u5C42\u7F51\u7EDC\u3002VM[uuid\uFF1A{0}]\u672A\u8FD0\u884C\u6216\u5DF2\u505C\u6B62\u3002\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:211
# args: msg.getDestL3NetworkUuid()
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ doesn't\ has\ have\ ip\ range = \u65E0\u6CD5\u66F4\u6539\u4E3A\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u6CA1\u6709IP\u8303\u56F4

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:221
# args: newAddedL3Uuids,l2Uuids
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ different\ l2\ networks\ [uuids\:%s] = \u65E0\u6CD5\u66F4\u6539\u4E3A\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5C5E\u4E8E\u4E0D\u540C\u7684\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:228
# args: newAddedL3Uuids,l2Uuids
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ l2\ networks\ [uuids\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = \u65E0\u6CD5\u66F4\u6539\u4E3A\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5C5E\u4E8E\u5C1A\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55\u96C6\u7FA4\u7684\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:240
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = \u65E0\u6CD5\u66F4\u6539\u4E3A\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:247
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ change\ to\ a\ non-guest\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = \u65E0\u6CD5\u66F4\u6539\u4E3A\u975E\u6765\u5BBE\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:255
# args: l3Uuid
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = \u65E0\u6CD5\u66F4\u6539\u4E3A\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:258
# args: l3Uuid
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = \u65E0\u6CD5\u66F4\u6539\u4E3A\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u662F\u7CFB\u7EDF\u7F51\u7EDC\uFF0CVM\u662F\u7528\u6237VM

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:942
# args: staticIp,l3Uuid
the\ static\ IP[%s]\ is\ not\ in\ any\ IP\ range\ of\ the\ L3\ network[uuid\:%s] = \u8BE5\u9759\u6001IP[{0}]\u4E0D\u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u7684\u4EFB\u4F55IP\u6BB5

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:949
# args: staticIp,l3Uuid
the\ static\ IP[%s]\ has\ been\ occupied\ on\ the\ L3\ network[uuid\:%s] = \u8BE5\u9759\u6001IP[{0}]\u5DF2\u7ECF\u5B58\u5728\u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E2D

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:912
# args: e.getKey(),newAddedL3Uuids
static\ ip\ l3\ uuid[%s]\ is\ not\ included\ in\ nic\ l3\ [%s] = \u9759\u6001IP\u7684\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u4E0D\u5728\u7F51\u5361\u7684L3\u5217\u8868[uuid:{1}]\u4E2D

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:373
# args: image.getName(),image.getUuid()
the\ image[name\:%s,\ uuid\:%s]\ is\ an\ ISO,\ rootDiskSize\ must\ be\ set = \u955C\u50CF[name:{0}, uuid:{1}]\u662F\u4E00\u4E2AIOS, \u5FC5\u987B\u8BBE\u7F6E\u4E91\u76D8\u5927\u5C0F

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:383
# args: msg.getVmInstanceUuid(),vo.getState().toString()
Can\ not\ create\ CD-ROM\ for\ vm[uuid\:%s]\ which\ is\ in\ state[%s]\  = \u65E0\u6CD5\u4E3A\u5904\u4E8E\u72B6\u6001[{1}]\u7684VM[uuid\uFF1A{0}]\u521B\u5EFACD-ROM

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:391
# args: vo.getPlatform()
Current\ platform\ %s\ not\ support\ update\ nic\ driver\ yet = \u5F53\u524D\u5E73\u53F0{0}\u5C1A\u4E0D\u652F\u6301\u66F4\u65B0NIC\u9A71\u52A8\u7A0B\u5E8F

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:407
# args: 
rootDiskSize\ is\ needed\ when\ image\ media\ type\ is\ ISO = \u5F53\u955C\u50CF\u7C7B\u578B\u662FISO\u65F6\u4E91\u76D8\u5927\u5C0F\u9700\u8981\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:419
# args: msg.getVmInstanceUuid(),msg.getHostUuid()
the\ vm[uuid\:%s]\ is\ already\ on\ host[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u8FD0\u884C\u4E8E\u7269\u7406\u673A[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:436
# args: 
the\ VM\ cannot\ do\ online\ cpu/memory\ update\ because\ of\ disabling\ Instance\ Offering\ Online\ Modification.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu/memory\ update\ again = \u4E91\u4E3B\u673A\u65E0\u6CD5\u6267\u884C\u5728\u7EBF\u5347\u7EA7CPU/\u5185\u5B58\uFF0C\u56E0\u4E3A\u672A\u542F\u7528\u8BA1\u7B97\u89C4\u683C\u5728\u7EBF\u4FEE\u6539\u3002\u8BF7\u5173\u95ED\u8BE5\u4E91\u4E3B\u673A\u518D\u5C1D\u8BD5

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:495
# args: vo.getUuid(),vo.getState(),StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), ",")
The\ state\ of\ vm[uuid\:%s]\ is\ %s.\ Only\ these\ state[%s]\ is\ allowed\ to\ update\ cpu\ or\ memory. = \u4E91\u4E3B\u673A[uuid:{0}]\u7684\u72B6\u6001\u4E3A{1}\u3002\u53EA\u6709\u8FD9\u4E9B\u72B6\u6001[{2}]\u5141\u8BB8\u5728\u7EBF\u5347\u7EA7CPU/\u5185\u5B58

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:452
# args: vo.getUuid()
can't\ decrease\ capacity\ when\ vm[uuid\:%s]\ is\ running = \u65E0\u6CD5\u5728\u4E91\u4E3B\u673A[uuid:{0}]\u8FD0\u884C\u65F6\u51CF\u5C11\u5BB9\u91CF

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:482
# args: 
the\ VM\ cannot\ do\ cpu\ hot\ plug\ because\ of\ disabling\ cpu\ hot\ plug.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu\ hot\ plug\ again = \u4E91\u4E3B\u673A\u65E0\u6CD5\u6267\u884C\u5728\u7EBF\u6DFB\u52A0CPU\uFF0C\u56E0\u4E3A\u672A\u542F\u7528CPU\u70ED\u63D2\u62D4\u3002\u8BF7\u5173\u95ED\u8BE5\u4E91\u4E3B\u673A\u518D\u5C1D\u8BD5

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:488
# args: 
the\ VM\ cannot\ do\ memory\ hot\ plug\ because\ of\ disabling\ memory\ hot\ plug.\ Please\ stop\ the\ VM\ then\ do\ the\ memory\ hot\ plug\ again = \u4E91\u4E3B\u673A\u65E0\u6CD5\u6267\u884C\u5728\u7EBF\u6DFB\u52A0\u5185\u5B58\uFF0C\u56E0\u4E3A\u672A\u542F\u7528\u5185\u5B58\u70ED\u63D2\u62D4\u3002\u8BF7\u5173\u95ED\u8BE5\u4E91\u4E3B\u673A\u518D\u5C1D\u8BD5

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:506
# args: vo.getUuid()
can't\ decrease\ cpu\ of\ vm[uuid\:%s]\ when\ it\ is\ running = \u65E0\u6CD5\u5728\u4E91\u4E3B\u673A[uuid:{0}]\u8FD0\u884C\u65F6\u51CF\u5C11CPU\u6570\u76EE

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:512
# args: vo.getUuid()
can't\ decrease\ memory\ size\ of\ vm[uuid\:%s]\ when\ it\ is\ running = \u65E0\u6CD5\u5728\u4E91\u4E3B\u673A[uuid:{0}]\u8FD0\u884C\u65F6\u51CF\u5C11\u5BB9\u91CF

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:523
# args: 
either\ l3NetworkUuids\ or\ imageUuid\ must\ be\ set = \u4E09\u5C42\u7F51\u7EDC\u7684uuid\u4EEC\u6216\u8005\u955C\u50CF\u7684uuid\u5FC5\u987B\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:538
# args: ip
%s\ is\ not\ a\ valid\ IPv4\ address = {0}\u4E0D\u662F\u6709\u6548\u7684IPv4\u5730\u5740

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:576
# args: ip,vmNicVO.getUuid()
ip\ address\ [%s]\ already\ set\ to\ vmNic\ [uuid\:%s] = IP\u5730\u5740[{0}]\u5DF2\u7ECF\u8BBE\u7F6E\u5230\u7F51\u5361[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:557
# args: ip,rangeVO.getNetworkCidr()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [%s] = IP\u5730\u5740[{0}]\u4E0D\u5728IP\u5730\u5740\u6BB5[{1}]\u8303\u56F4\u5185

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:566
# args: ip
%s\ is\ not\ a\ valid\ IPv6\ address = {0}\u4E0D\u662F\u6709\u6548\u7684IPv6\u5730\u5740

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:584
# args: ip,rangeVO.getStartIp(),rangeVO.getEndIp()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [startIp\ %s,\ endIp\ %s] = IP\u5730\u5740[{0}]\u4E0D\u5728IP\u5730\u5740\u6BB5[{1}-{2}]\u8303\u56F4\u5185

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:595
# args: 
could\ not\ set\ ip\ address,\ due\ to\ no\ ip\ address\ is\ specified = \u65E0\u6CD5\u8BBE\u7F6EIP\u5730\u5740\uFF0C\u56E0\u4E3A\u672A\u6307\u5B9AIP\u5730\u5740

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:610
# args: msg.getIp()
static\ ip\ [%s]\ format\ error = \u9759\u6001IP[{0}]\u683C\u5F0F\u9519\u8BEF

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:622
# args: 
ipv4\ address\ need\ a\ netmask = IPv4\u5730\u5740\u9700\u8981\u7F51\u7EDC\u63A9\u7801

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:640
# args: msg.getIp6()
ip\ address\ [%s]\ already\ set\ to\ vmNic = IP\u5730\u5740[{0}]\u5DF2\u8BBE\u7F6E\u4E3Avmnic

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:634
# args: 
ipv6\ address\ need\ a\ prefix = IPv6\u5730\u5740\u9700\u8981\u524D\u7F00

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:654
# args: msg.getVmInstanceUuid(),msg.getL3NetworkUuid()
the\ VM[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E0A\u6CA1\u6709\u4EFB\u4F55\u7F51\u5361

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:661
# args: msg.getStaticIp(),msg.getVmInstanceUuid()
could\ not\ delete\ static\ ip\ [%s]\ for\ vm\ [uuid\:%s]\ because\ it\ doesn't\ existed = \u65E0\u6CD5\u5220\u9664VM[uuid\uFF1A{1}]\u7684\u9759\u6001IP[{0}]\uFF0C\u56E0\u4E3A\u5B83\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:673
# args: o,msg.getBootOrder()
invalid\ boot\ device[%s]\ in\ boot\ order%s = \u5728\u542F\u52A8\u5217\u8868{1}\u4E2D\u7684\u8BBE\u5907[{0}]\u542F\u52A8\u5931\u8D25

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:696
# args: 
boot\ volume\ cannot\ be\ shareable. = \u542F\u52A8\u5377\u65E0\u6CD5\u5171\u4EAB\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:700
# args: msg.getVolumeUuid(),msg.getVmInstanceUuid()
volume[uuid\:%s]\ must\ be\ attached\ to\ vm[uuid\:%s] = \u5377[uuid\uFF1A{0}]\u5FC5\u987B\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:705
# args: msg.getVmInstanceUuid()
the\ vm\ %s\ with\ memory\ snapshots\ do\ not\ support\ setting\ boot\ volume = \u5177\u6709\u5185\u5B58\u5FEB\u7167\u7684\u4E91\u4E3B\u673A{0}\u4E0D\u652F\u6301\u8BBE\u7F6E\u542F\u52A8\u5377

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:718
# args: type
Unsupported\ Image\ Media\ Type\:\ [%s]\  = \u4E0D\u652F\u6301\u7684\u955C\u50CF\u5A92\u4F53\u7C7B\u578B\uFF1A[{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:733
# args: cdRomUuid
The\ cdRom[uuid\:%s]\ does\ not\ exist = CDROM[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:737
# args: msg.getVmInstanceUuid(),cdRomUuid
VM[uuid\:%s]\ cdRom[uuid\:%s]\ has\ mounted\ the\ ISO = VM[uuid\uFF1A{0}]CDROM[uuid\uFF1A{1}]\u5DF2\u88C5\u8F7DISO

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:755
# args: msg.getVmInstanceUuid()
VM[uuid\:%s]\ has\ multiple\ ISOs\ attached,\ specify\ the\ isoUuid\ when\ detaching = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u52A0\u8F7D\u4E86\u591A\u4E2AISO\uFF0C\u5378\u8F7DISO\u65F6\u9700\u8981\u6307\u5B9AisoUuid

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:863
# args: l3Uuid
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = \u4E0D\u80FD\u6302\u8F7D\u4E09\u5C42\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u8BE5\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u5904\u4E8E\u672A\u542F\u52A8\u72B6\u6001

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:813
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = \u65E0\u6CD5\u6302\u8F7D\u4E09\u5C42\u7F51\u7EDC\u3002\u4E91\u4E3B\u673A[uuid: {0}]\u65E2\u4E0D\u5904\u4E8ERunning\u4E5F\u4E0D\u5904\u4E8EStopped\u72B6\u6001\u4E2D\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:819
# args: msg.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ doesn't\ has\ have\ ip\ range = \u65E0\u6CD5\u8FDE\u63A5\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u6CA1\u6709IP\u8303\u56F4

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:829
# args: newAddedL3Uuids,l2Uuids
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ different\ l2\ networks\ [uuids\:%s] = \u4E0D\u80FD\u6302\u8F7D\u4E09\u5C42\u7F51\u7EDC\uFF0C\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u5C5E\u4E8E\u4E0D\u540C\u7684\u4E8C\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:836
# args: newAddedL3Uuids,l2Uuids
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ l2\ networks\ [uuids\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = \u65E0\u6CD5\u8FDE\u63A5\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5C5E\u4E8E\u5C1A\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55\u96C6\u7FA4\u7684\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:848
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = \u4E0D\u80FD\u6302\u8F7D\u4E09\u5C42\u7F51\u7EDC\uFF0C\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u5230\u4E91\u4E3B\u673A[uuid: {1}]\u4E0A\u4E86

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:855
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ attach\ a\ non-guest\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = \u65E0\u6CD5\u8FDE\u63A5\u975E\u6765\u5BBE\u4E09\u5C42\u7F51\u7EDC\u3002\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:866
# args: l3Uuid
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = \u4E0D\u80FD\u8FDE\u63A5\u4E09\u5C42\u7F51\u7EDC\u3002\u8FD9\u4E2A\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u662F\u7CFB\u7EDF\u7F51\u7EDC\uFF0C\u4F46\u4E91\u4E3B\u673A\u662F\u4E00\u4E2A\u7528\u6237\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1300
# args: e.getMessage()
invalid\ json\ format,\ causes\:\ %s = \u65E0\u6548\u7684JSON\u683C\u5F0F\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:986
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ the\ nic.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = \u65E0\u6CD5\u8FDE\u63A5NIC\u3002VM[uuid\uFF1A{0}]\u672A\u8FD0\u884C\u6216\u5DF2\u505C\u6B62\u3002\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:993
# args: vmNicVO.getVmInstanceUuid()
unable\ to\ attach\ the\ nic.\ The\ nic\ has\ been\ attached\ with\ vm[uuid\:\ %s] = \u65E0\u6CD5\u8FDE\u63A5NIC\u3002\u5DF2\u4F7F\u7528VM[uuid\uFF1A{0}]\u8FDE\u63A5NIC

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1004
# args: vmNicVO.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = \u65E0\u6CD5\u8FDE\u63A5NIC\u3002\u5176\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1009
# args: vmNicVO.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ the\ nic\ with\ a\ non-guest\ L3\ network.\ Its\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = \u65E0\u6CD5\u5C06NIC\u8FDE\u63A5\u5230\u975E\u6765\u5BBE\u4E09\u5C42\u7F51\u7EDC\u3002\u5176\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1018
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ disabled = \u65E0\u6CD5\u8FDE\u63A5NIC\u3002\u5176\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1021
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = \u65E0\u6CD5\u8FDE\u63A5NIC\u3002\u5176\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u662F\u7CFB\u7EDF\u7F51\u7EDC\uFF0CVM\u662F\u7528\u6237VM

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1028
# args: l3NetworkVO.getL2NetworkUuid()
unable\ to\ attach\ the\ nic.\ Its\ l2\ network\ [uuid\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = \u65E0\u6CD5\u8FDE\u63A5NIC\u3002\u5176\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5C1A\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55\u96C6\u7FA4

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1037
# args: msg.getVmNicUuid(),nicVO.getType()
could\ not\ update\ nic[uuid\:\ %s]\ state,\ due\ to\ nic\ type[%s]\ not\ support = \u65E0\u6CD5\u66F4\u65B0NIC[uuid\uFF1A{0}]\u72B6\u6001\uFF0C\u56E0\u4E3A\u4E0D\u652F\u6301NIC\u7C7B\u578B[{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1043
# args: msg.getVmNicUuid()
could\ not\ update\ nic[uuid\:\ %s]\ state,\ due\ to\ vm\ not\ support = \u65E0\u6CD5\u66F4\u65B0NIC[uuid\uFF1A{0}]\u72B6\u6001\uFF0C\u56E0\u4E3AVM\u4E0D\u652F\u6301

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1060
# args: vmUuid,state
unable\ to\ detach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = \u4E0D\u80FD\u5378\u8F7D\u4E09\u5C42\u7F51\u7EDC\uFF0C\u4E91\u4E3B\u673A[uuid: {0}]\u4E0D\u662F\u8FD0\u884C\u72B6\u6001\u6216\u8005\u6682\u505C\u72B6\u6001\uFF0C\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1075
# args: msg.getVmInstanceUuid(),state
vm[uuid\:%s]\ can\ only\ attach\ volume\ when\ state\ is\ Running\ or\ Stopped,\ current\ state\ is\ %s = \u4E91\u4E3B\u673A[uuid:{0}]\u6302\u8F7D\u76D8\u65F6\u72B6\u6001\u53EA\u80FD\u662F\u8FD0\u884C\u6216\u8005\u6682\u505C\u72B6\u6001\uFF0C\u800C\u73B0\u5728\u7684\u72B6\u6001\u662F{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1083
# args: 
image\ mediaType\ is\ ISO\ but\ missing\ root\ disk\ settings = \u955C\u50CF\u5A92\u4F53\u7C7B\u578B\u4E3AISO\uFF0C\u4F46\u7F3A\u5C11\u6839\u78C1\u76D8\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1087
# args: 
Unexpected\ root\ disk\ settings = \u610F\u5916\u7684\u6839\u78C1\u76D8\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1154
# args: 
Unexpected\ data\ disk\ settings.\ dataDiskSizes\ need\ to\ be\ greater\ than\ 0 = \u610F\u5916\u7684\u6570\u636E\u78C1\u76D8\u8BBE\u7F6E\u3002DataDiskSizes\u9700\u8981\u5927\u4E8E0

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1206
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ platform\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = \u81F3\u5C11\u5E94\u8BBE\u7F6E\u6D88\u606F\u6216\u955C\u50CF[uuid\uFF1A{0}]\u4E2D\u7684\u4E00\u4E2A\u5B57\u6BB5\u5E73\u53F0

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1210
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ guestOsType\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = \u81F3\u5C11\u5E94\u8BBE\u7F6E\u90AE\u4EF6\u6216\u955C\u50CF[uuid\uFF1A{0}]\u4E2D\u7684\u4E00\u4E2A\u5B57\u6BB5GuestOsType

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1214
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ architecture\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = \u81F3\u5C11\u5E94\u8BBE\u7F6E\u6D88\u606F\u6216\u955C\u50CF[uuid\uFF1A{0}]\u4E2D\u7684\u4E00\u4E2A\u5B57\u6BB5\u4F53\u7CFB\u7ED3\u6784

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1349
# args: errorMsg
Cannot\ set\ the\ following\ properties\ at\ the\ same\ time\:\ %s = \u4E0D\u80FD\u540C\u65F6\u8BBE\u7F6E\u4EE5\u4E0B\u5C5E\u6027\uFF1A{0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1357
# args: properties
Need\ to\ set\ one\ of\ the\ following\ properties,\ and\ can\ only\ be\ one\ of\ them\:\ %s = \u9700\u8981\u8BBE\u7F6E\u4EE5\u4E0B\u5C5E\u6027\u4E4B\u4E00\uFF0C\u4E14\u53EA\u80FD\u662F\u5176\u4E2D\u4E00\u4E2A\uFF1A{0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1249
# args: 
cannot\ create\ vm\ instance\ from\ a\ shareable\ volume. = \u65E0\u6CD5\u4ECE\u53EF\u5171\u4EAB\u4E91\u76D8\u521B\u5EFAVM\u5B9E\u4F8B\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1253
# args: 
could\ not\ create\ vm\ instance\ from\ a\ attached\ volume. = \u65E0\u6CD5\u4ECE\u8FDE\u63A5\u7684\u5377\u521B\u5EFAVM\u5B9E\u4F8B\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1257
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ could\ not\ satisfy\ conditions[state\:Enabled\ status\:Ready] = \u5377[uuid\uFF1A{0}]\u65E0\u6CD5\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A\u5DF2\u542F\u7528\u72B6\u6001\uFF1A\u5C31\u7EEA]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1293
# args: 
l3NetworkUuids\ and\ vmNicInventories\ mustn't\ both\ be\ empty\ or\ both\ be\ set = l3NetworkUuids\u548Cvmnicinventory\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A\u6216\u540C\u65F6\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1415
# args: cdRomIsoUuid
The\ image[uuid\=%s]\ does\ not\ exist = \u955C\u50CF[uuid={0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1420
# args: 
Do\ not\ allow\ to\ mount\ duplicate\ ISO = \u4E0D\u5141\u8BB8\u88C5\u8F7D\u91CD\u590D\u7684ISO

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1435
# args: 
The\ console\ password\ cannot\ start\ with\ 'password'\ which\ may\ trigger\ a\ VNC\ security\ issue = \u63A7\u5236\u53F0\u5BC6\u7801\u4E0D\u80FD\u4EE5password\u5F00\u5934\uFF0C\u8FD9\u6837\u53EF\u80FD\u5BFC\u81F4\u4E00\u4E2AVNC\u5B89\u5168\u95EE\u9898

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1440
# args: 
can\ not\ call\ this\ api\ because\ it's\ Deprecated = \u65E0\u6CD5\u8C03\u7528\u6B64API\uFF0C\u56E0\u4E3A\u5B83\u5DF2\u88AB\u5F03\u7528

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1457
# args: vmCdRomVO.getUuid()
The\ CdRom[%s]\ Already\ the\ default = CDROM[{0}]\u5DF2\u7ECF\u662F\u9ED8\u8BA4\u7684

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:271
# args: vo.getUuid(),vo.getName()
vm[uuid\:%s,\ name\:%s]\ has\ been\ deleted = \u4E91\u4E3B\u673A[uuid:{0}, name:{1}]\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:595
# args: vmInv.getUuid(),vmInv.getHostUuid(),reply.getError()
failed\ to\ check\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s],\ %s = \u65E0\u6CD5\u68C0\u67E5\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684VM[uuid\uFF1A{0}]\u7684\u72B6\u6001\uFF0C{2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:602
# args: vmInv.getUuid(),vmInv.getHostUuid()
got\ an\ unrecognized\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s] = \u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684VM[uuid\uFF1A{0}]\u7684\u72B6\u6001\u65E0\u6CD5\u8BC6\u522B

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:984
# args: self.getUuid(),l3Uuid
the\ vm[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}] \u6CA1\u6709\u7F51\u5361\u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:1382
# args: 
the\ vm\ has\ been\ deleted = \u4E91\u4E3B\u673A\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3758
# args: msg.getUuid()
VM[uuid\:%s]\ state\ is\ not\ Running. = VM[uuid\uFF1A{0}]\u72B6\u6001\u672A\u8FD0\u884C\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:4837
# args: isoUuid,psUuid,self.getName(),self.getUuid()
the\ ISO[uuid\:%s]\ is\ on\ backup\ storage\ that\ is\ not\ compatible\ of\ the\ primary\ storage[uuid\:%s]\ where\ the\ VM[name\:%s,\ uuid\:%s]\ is\ on = ISO[uuid:{0}]\u5728\u955C\u50CF\u670D\u52A1\u5668\u4E0A\uFF0C\u8FD9\u4E2AISO\u4E0D\u80FD\u517C\u5BB9\u4E3B\u5B58\u50A8[uuid:{1}]\u5728\u4E91\u4E3B\u673A[name:{2}, uuid:{3}]\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:5325
# args: self.getHostUuid(),cpuNum - oldCpuNum,struct.alignedMemory - oldMemorySize
host[uuid\:%s]\ capacity\ is\ not\ enough\ to\ offer\ cpu[%s],\ memory[%s\ bytes] = \u7269\u7406\u673A[uuid:{0}]\u65E0\u6CD5\u63D0\u4F9BCPU: [{1}]\uFF0C\u5185\u5B58: [{2} bytes]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:5633
# args: isoUuid,self.getUuid()
ISO[uuid\:%s]\ is\ not\ attached\ to\ VM[uuid\:%s] = ISO[uuid:{0}]\u672A\u88AB\u52A0\u8F7D\u5230\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:7168
# args: cdRomSpecs.size(),max
One\ vm\ cannot\ create\ %s\ CDROMs,\ vm\ can\ only\ add\ %s\ CDROMs = \u4E00\u4E2AVM\u65E0\u6CD5\u521B\u5EFA{0}\u4E2ACDROM\uFF0CVM\u53EA\u80FD\u6DFB\u52A0{1}\u4E2ACDROM

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:8150
# args: msg.getVmInstanceUuid(),max
VM[uuid\:%s]\ can\ only\ add\ %s\ CDROMs = VM[uuid\uFF1A{0}]\u53EA\u80FD\u6DFB\u52A0{1}\u4E2ACDROM

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:8219
# args: self.getUuid(),msg.getPriority(),reply.getError()
update\ vm[%s]\ priority\ to\ [%s]\ failed,because\ %s = \u5C06\u4E91\u4E3B\u673A[{0}]\u7684\u4F18\u5148\u7EA7\u66F4\u65B0\u4E3A[{1}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:65
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartNewCreatedVmExtensionPoint[%s]\ refuses\ to\ create\ vm[uuid\:%s]\ because\ %s = VmInstanceStartNewCreatedVmExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u521B\u5EFA\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:192
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceRebootExtensionPoint[%s]\ refuses\ to\ reboot\ vm[uuid\:%s]\ because\ %s = VmInstanceRebootExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u91CD\u542F\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:234
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceDestroyVmExtensionPoint[%s]\ refuses\ to\ destroy\ vm[uuid\:%s]\ because\ %s = VmInstanceDestroyVmExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u5220\u9664\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:284
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartExtensionPoint[%s]\ refuses\ to\ start\ vm[uuid\:%s]\ because\ %s = VmInstanceStartExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u542F\u52A8\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1136
# args: msg.getName()
could\ not\ create\ vm,\ a\ vm\ with\ the\ name\ [%s]\ already\ exists = \u65E0\u6CD5\u521B\u5EFAVM\uFF0C\u5DF2\u5B58\u5728\u540D\u4E3A[{0}]\u7684VM

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2245
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ create\ vm\ without\ image = \u5728\u4E0D\u4F7F\u7528\u955C\u50CF\u7684\u60C5\u51B5\u4E0B\u521B\u5EFAVM\u65F6\uFF0CRootDiskOfferInGuuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:308
# args: 
Spice\ certificate\ does\ not\ exist,\ Please\ check\ if\ spice\ tls\ is\ enabled = SPICE\u8BC1\u4E66\u4E0D\u5B58\u5728\uFF0C\u8BF7\u68C0\u67E5\u662F\u5426\u542F\u7528\u4E86SPICE TLS

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:492
# args: msg.getImageUuid(),msg.getZoneUuid()
the\ image[uuid\:%s]\ is\ not\ on\ any\ backup\ storage\ that\ has\ been\ attached\ to\ the\ zone[uuid\:%s] = \u955C\u50CF[uuid:{0}]\u4E0D\u5728\u4EFB\u4F55\u52A0\u8F7D\u5230\u533A\u57DF[uuid:{1}]\u7684\u955C\u50CF\u670D\u52A1\u5668\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:565
# args: bss.get(0).getUuid(),bss.get(0).getType()
no\ primary\ storage\ accessible\ to\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ is\ found = \u672A\u627E\u5230\u955C\u50CF\u670D\u52A1\u5668[uuid:{0}, type:{1}]\u53EF\u8BBF\u95EE\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:586
# args: psUuids,zoneUuid
the\ primary\ storages[uuids\:%s]\ has\ not\ attached\ any\ cluster\ on\ the\ zone[uuid\:%s] = \u4E3B\u5B58\u50A8[uuids:{0}]\u5C1A\u672A\u52A0\u8F7D\u533A\u57DF[uuid:{1}]\u4E0A\u7684\u4EFB\u4F55\u96C6\u7FA4

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:605
# args: psUuids
no\ l2Networks\ found\ in\ clusters\ that\ have\ attached\ to\ primary\ storages[uuids\:%s] = \u5728\u5DF2\u52A0\u8F7D\u5230\u4E3B\u5B58\u50A8[uuids:{0}]\u7684\u96C6\u7FA4\u4E2D\u672A\u627E\u5230\u4E8C\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:672
# args: image.getName(),image.getUuid()
zoneUuid\ must\ be\ set\ because\ the\ image[name\:%s,\ uuid\:%s]\ is\ on\ multiple\ backup\ storage = zoneUuid\u5FC5\u987B\u88AB\u8BBE\u7F6E\uFF0C\u56E0\u4E3Aimage[name:{0}, uuid:{1}]\u5728\u591A\u4E2A\u955C\u50CF\u670D\u52A1\u5668\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1067
# args: 
CreateVmInstanceMsg\ cannot\ be\ null = CreateVmInstanceMsg\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1158
# args: StringUtils.join(errorCodes.stream().map(ErrorCode::getDescription).collect(Collectors.toList()), ", ")
handle\ system\ tag\ fail\ when\ creating\ vm\ because\ [%s] = \u7531\u4E8E[{0}]\uFF0C\u5728\u521B\u5EFAVM\u65F6\u5904\u7406\u7CFB\u7EDF\u6807\u8BB0\u5931\u8D25

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1589
# args: tuple.get(0, String.class),tuple.get(1, String.class)
unable\ to\ enable\ this\ function.\ There\ are\ multi\ nics\ of\ L3\ network[uuid\:%s]\ in\ the\ vm[uuid\:\ %s] = \u65E0\u6CD5\u542F\u7528\u6B64\u529F\u80FD\u3002\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\u4E2D\u5B58\u5728\u591A\u4E2A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u7684NIC

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1623
# args: hostname,tag
hostname[%s]\ specified\ in\ system\ tag[%s]\ is\ not\ a\ valid\ domain\ name = \u5728\u7CFB\u7EDF\u6807\u7B7E[{1}]\u4E2D\u7279\u522B\u58F0\u660E\u7684\u7269\u7406\u673A\u540D[{0}]\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684\u57DF\u540D

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1635
# args: hostnameCount
only\ one\ hostname\ system\ tag\ is\ allowed,\ but\ %s\ got = \u53EA\u5141\u8BB8\u901A\u8FC7\u7CFB\u7EDF\u6807\u7B7E\u8BBE\u7F6E\u4E00\u4E2A\u7269\u7406\u673A\u540D\uFF0C\u4F46\u662F\u5B9E\u9645\u4E0A\u6709{0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1660
# args: ip,sysTag
%s\ is\ not\ a\ valid\ ip\ address.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = {0}\u4E0D\u662F\u6709\u6548\u7684IP\u5730\u5740\u3002\u8BF7\u66F4\u6B63\u9759\u6001IP\u7684\u7CFB\u7EDF\u6807\u8BB0[{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1666
# args: ip,l3Uuid,sysTag
IP[%s]\ is\ already\ used\ on\ the\ L3\ network[uuid\:%s].\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = IP[{0}]\u5DF2\u5728\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{1}]\u4E0A\u4F7F\u7528\u3002\u8BF7\u66F4\u6B63\u9759\u6001IP\u7684\u7CFB\u7EDF\u6807\u8BB0[{2}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1683
# args: ip,l3Uuid,cr.getReason()
IP[%s]\ is\ not\ available\ on\ the\ L3\ network[uuid\:%s]\ because\:\ %s = \u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E2D\uFF0CIP[{0}]\u4E0D\u53EF\u7528, \u56E0\u4E3A{2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1706
# args: tag,sameTag.getResourceUuid(),hostname,l3Uuid
conflict\ hostname\ in\ system\ tag[%s];\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = \u7CFB\u7EDF\u6807\u7B7E\u7684\u7269\u7406\u673A\u540D\u5B58\u5728\u51B2\u7A81[{0}]\uFF1B\u5DF2\u7ECF\u5B58\u5728\u4EE5\u4E00\u4E2A\u7269\u7406\u673A\u540D\u4E3A[{2}]\u7684VM[uuid:{1}]\u51FA\u73B0\u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{3}]\u4E2D

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1737
# args: o,order
invalid\ boot\ device[%s]\ in\ boot\ order[%s] = \u5728\u5F15\u5BFC\u987A\u5E8F[{1}]\u4E2D\u5B58\u5728\u65E0\u6548\u7684\u5F15\u5BFC\u8BBE\u5907[{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1753
# args: 
cpuSockets\ must\ be\ an\ integer = CPUSockets\u5FC5\u987B\u4E3A\u6574\u6570

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1762
# args: 
cpuCores\ must\ be\ an\ integer = cpucores\u5FC5\u987B\u4E3A\u6574\u6570

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1771
# args: 
cpuThreads\ must\ be\ an\ integer = CPUThreads\u5FC5\u987B\u4E3A\u6574\u6570

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1782
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ vm[uuid\:\ %s]. = \u5728\u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2Auserdata\u7684\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1808
# args: 
Shouldn't\ be\ more\ than\ one\ userdata\ systemTag\ for\ one\ vm. = \u5728\u4E00\u4E2A\u4E91\u4E3B\u673A\u4E2D\u4E0D\u80FD\u5B58\u5728\u591A\u4E2Auserdata\u7684\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1932
# args: type
vm\ machine\ type\ requires\ [q35,\ pc,\ virt],\ but\ get\ [%s] = VM\u8BA1\u7B97\u673A\u7C7B\u578B\u9700\u8981[q35\uFF0CPC\uFF0Cvirt]\uFF0C\u4F46\u5F97\u5230[{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1992
# args: systemTag,SecurityElementEnableTokenByTag
invalid\ securityElementEnable[%s],\ %s\ is\ not\ securityElementEnable\ tag = SecurityElementEnable[{0}]\u65E0\u6548\uFF0C{1}\u4E0D\u662FSecurityElementEnable\u6807\u8BB0

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1995
# args: systemTag,SecurityElementEnableTokenByTag
invalid\ securityElementEnable[%s],\ %s\ is\ not\ boolean\ class = SecurityElementEnable[{0}]\u65E0\u6548\uFF0C{1}\u4E0D\u662F\u5E03\u5C14\u7C7B

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2022
# args: systemTag,usbRedirectTokenByTag
invalid\ usbRedirect[%s],\ %s\ is\ not\ usbRedirect\ tag = usbRedirect[{0}]\u65E0\u6548\uFF0C{1}\u4E0D\u662FusbRedirect\u6807\u8BB0

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2025
# args: systemTag,usbRedirectTokenByTag
invalid\ usbRedirect[%s],\ %s\ is\ not\ boolean\ class = usbRedirect[{0}]\u65E0\u6548\uFF0C{1}\u4E0D\u662F\u5E03\u5C14\u7C7B

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2561
# args: ref.getResourceUuid()
the\ resource[uuid\:%s]\ is\ a\ ROOT\ volume,\ you\ cannot\ change\ its\ owner,\ instead,change\ the\ owner\ of\ the\ VM\ the\ root\ volume\ belongs\ to = \u5F53\u524D\u8D44\u6E90[uuid:{0}]\u662F\u4E00\u4E2A\u4E91\u76D8\uFF0C\u4F60\u4E0D\u80FD\u6539\u53D8\u5B83\u7684\u6240\u6709\u8005\uFF0C\u4F46\u662F\u4F60\u80FD\u591F\u4FEE\u6539\u5BF9\u5E94VM\u7684\u6240\u6709\u8005

# at: src/main/java/org/zstack/compute/vm/VmInstantiateAttachingVolumeFlow.java:54
# args: spec.getDestHost().getUuid(),pinv.getUuid()
Failed\ to\ instantiate\ volume.\ Because\ vm's\ host[uuid\:\ %s]\ and\ allocated\ primary\ storage[uuid\:\ %s]\ is\ not\ connected. = \u65E0\u6CD5\u5B9E\u4F8B\u5316\u5377\u3002\u56E0\u4E3AVM\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]\u548C\u5206\u914D\u7684\u4E3B\u5B58\u50A8[uuid\uFF1A{1}]\u672A\u8FDE\u63A5\u3002

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:211
# args: msg.getMac()
Duplicate\ mac\ address\ [%s] = \u91CD\u590D\u7684MAC\u5730\u5740[{0}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:221
# args: vmType
clean\ traffic\ is\ not\ supported\ for\ vm\ type\ [%s] = VM\u7C7B\u578B[{0}]\u4E0D\u652F\u6301\u6E05\u7406\u6D41\u91CF

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:100
# args: KVMGlobalConfig.MAX_DATA_VOLUME_NUM.value(int.class)
The\ number\ of\ data\ volumes\ exceeds\ the\ limit[num\:\ %s],\ please\ reduce\ the\ number\ of\ data\ volumes\ during\ vm\ creation. = \u6570\u636E\u4E91\u76D8\u7684\u6570\u91CF\u8D85\u8FC7\u9650\u5236[\u6570\u91CF\uFF1A{0}]\uFF0C\u8BF7\u5728\u521B\u5EFA\u4E91\u4E3B\u673A\u671F\u95F4\u51CF\u5C11\u6570\u636E\u4E91\u76D8\u7684\u6570\u91CF\u3002

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:130
# args: VmInstanceState.Stopped,msg.getVmInstanceUuid()
Can\ not\ set\ security\ level\ to\ not\ %s\ vm\ [uuid\:%s] = \u8BBE\u7F6E\u5BC6\u7EA7\u5931\u8D25\uFF0C\u65E0\u6CD5\u5BF9\u4E0D\u5904\u4E8E{0}\u72B6\u6001\u7684\u4E91\u4E3B\u673A\u64CD\u4F5C[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:147
# args: 
The\ operation\ only\ allows\ on\ user\ vm = \u8BE5\u64CD\u4F5C\u4EC5\u5141\u8BB8\u5728\u7528\u6237\u4E91\u4E3B\u673A\u4E0A\u6267\u884C

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:177
# args: msg.getVmInstanceUuid(),volumeVOS.stream().map(VolumeVO::getUuid).collect(Collectors.toList()),primaryStorageUuid,(totalCapacity - snapshotsCapacity) * msg.getNames().size(),primaryStorageVO.getCapacity().getAvailableCapacity()
there\ are\ not\ enough\ capacity\ for\ full\ vm\ clone\ to\ vm[uuid\:\ %s],\ volumes[uuid\:\ %s]\ on\ primary\ storage[uuid\:\ %s]\ required\:\ %s\ bytes,\ current\ available\ capacity\ is\ %s\ bytes = \u6CA1\u6709\u8DB3\u591F\u7684\u7A7A\u95F4\u5BF9\u4E91\u4E3B\u673A[uuid: {0}]\u505A\u6574\u673A\u514B\u9686\uFF0C\u4E3B\u5B58\u50A8[uuid: {2}]\u4E0A\u7684\u4E91\u76D8[uuid: {1}]\u5171\u9700\u8981[{3}]\u5B57\u8282\u7684\u7A7A\u95F4\uFF0C\u76EE\u524D\u4E3B\u5B58\u50A8\u7684\u53EF\u7528\u7A7A\u95F4\u4E3A[{4}]\u5B57\u8282

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:191
# args: msg.getVmNicUuid()
The\ nic\ [%s%s]\ is\ not\ mounted\ on\ the\ VM = \u7F51\u5361[{0}]\u4E0D\u80FD\u88AB\u6302\u8F7D\u5230\u4E91\u4E3B\u673A\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:197
# args: 
The\ operation\ only\ allows\ on\ user\ vm\  = \u8BE5\u64CD\u4F5C\u53EA\u80FD\u5728\u7528\u6237\u4E91\u4E3B\u673A\u4E0A\u8FDB\u884C

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:202
# args: vmInstanceVO.getUuid()
The\ operation\ only\ allows\ when\ vm\ [%s]\ state\ is\ stopped\  = \u8BE5\u64CD\u4F5C\u53EA\u6709\u4E91\u4E3B\u673A[{0}]\u72B6\u6001\u4E3A\u5DF2\u505C\u6B62\u624D\u80FD\u8FDB\u884C

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:231
# args: msg.getVmInstanceUuid()
user\ has\ no\ privilege\ to\ change\ image\ of\ vm\ %s = \u5F53\u524D\u7528\u6237\u4E0D\u80FD\u4FEE\u6539\u4E91\u4E3B\u673A{0}\u7684\u955C\u50CF

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:243
# args: 
do\ not\ change\ vm\ image\ when\ it's\ not\ stopped = \u5F53\u4E91\u4E3B\u673A\u955C\u50CF\u672A\u505C\u6B62\u65F6\uFF0C\u4E0D\u8981\u66F4\u6539\u5B83

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:260
# args: msg.getVmInstanceUuid()
make\ sure\ the\ primary\ storage\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = \u786E\u8BA4\u4E3B\u5B58\u50A8[uuid:{0}]\u662F\u53EF\u7528\u7684\u4E14\u5DF2\u8FDE\u63A5

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:275
# args: msg.getVmInstanceUuid()
make\ sure\ the\ last\ host\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = \u786E\u5B9A\u7269\u7406\u673A[uuid:{0}]\u662F\u53EF\u7528\u7684\u4E14\u5DF2\u8FDE\u63A5

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:285
# args: msg.getVmInstanceUuid()
vm[uuid\:%s]\ has\ no\ default\ l3,\ cannot\ change\ image\ for\ it = VM[uuid\uFF1A{0}]\u6CA1\u6709\u9ED8\u8BA4\u7684L3\uFF0C\u65E0\u6CD5\u4E3A\u5176\u66F4\u6539\u955C\u50CF

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:305
# args: msg.getVmInstanceUuid(),msg.getImageUuid()
instance[uuid\:%s]\ cannot\ be\ changed\ image\ to\ image[uuid\:%s] = \u65E0\u6CD5\u5C06\u5B9E\u4F8B[uuid\uFF1A{0}]\u7684\u955C\u50CF\u66F4\u6539\u4E3A\u955C\u50CF[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:314
# args: 
either\ uuid\ or\ account\ or\ password\ must\ be\ set = uuid\u6216\u8005\u8D26\u6237\u6216\u8005\u5BC6\u7801\u9700\u8981\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:327
# args: msg.getDirection()
direction\ must\ be\ set\ in\ (in,\ out),\ but\ was\ %s = \u65B9\u5411\u5FC5\u987B\u8BBE\u7F6E\u5728(in, out)\uFF0C\u4F46\u662F\u8F93\u5165\u7684\u662F{0}

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:333
# args: 
Monitor\ number\ must\ be\ 1\ or\ 2\ or\ 4. = \u76D1\u542C\u5668\u6570\u91CF\u5FC5\u987B\u662F1\u30012\u62164

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:341
# args: 
outboundBandwidth\ and\ inboundBandwidth\ must\ be\ set\ at\ lease\ one. = \u4E0A\u884C\u5E26\u5BBD\u548C\u4E0B\u884C\u5E26\u5BBD\u81F3\u5C11\u6709\u4E00\u4E2A\u9700\u8981\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:350
# args: 
the\ nic\ can't\ apply\ Qos\ with\ the\ port\ mirror\ service\ at\ same\ time. = NIC\u4E0D\u80FD\u540C\u65F6\u5BF9\u7AEF\u53E3\u955C\u50CF\u670D\u52A1\u5E94\u7528QoS\u3002

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:359
# args: msg.getUuid()
nic\ id\:\ %s\ does\ not\ exist... = \u7F51\u5361id: {0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:370
# args: 
The\ 'uuids'\ parameter\ must\ belong\ to\ the\ VmInstanceVO\ or\ HostVO = \u201C uuids \u201D\u53C2\u6570\u5FC5\u987B\u5C5E\u4E8Evminstancevo\u6216hostvo

# at: src/main/java/org/zstack/compute/vm/VmNicManagerImpl.java:261
# args: state,VmInstanceState.Stopped
vm\ current\ state[%s],\ modify\ virtio\ requires\ the\ vm\ state[%s] = VM\u5F53\u524D\u72B6\u6001[{0}]\uFF0C\u4FEE\u6539virtio\u9700\u8981VM\u72B6\u6001[{1}]

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:111
# args: 
wrong\ format\ of\ password\ strength\ config = \u5BC6\u7801\u5F3A\u5EA6\u914D\u7F6E\u7684\u683C\u5F0F\u9519\u8BEF

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:114
# args: 
minimum\ can\ not\ be\ larger\ than\ maximum = \u6700\u5C0F\u503C\u4E0D\u80FD\u5927\u4E8E\u6700\u5927\u503C

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:74
# args: minimum,maximum
password\ length\ must\ be\ [%s-%s] = \u5BC6\u7801\u957F\u5EA6\u5FC5\u987B\u4E3A[{0}-{1}]

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:93
# args: 
password\ does\ not\ match\ numbers,\ uppercase\ and\ lowercase,\ and\ special\ character\ combinations = \u5BC6\u7801\u4E0E\u6570\u5B57\u3001\u5927\u5C0F\u5199\u548C\u7279\u6B8A\u5B57\u7B26\u7EC4\u5408\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:117
# args: resourceUuid,vmInstanceUuid
missing\ parameter,\ resourceUuid\:\ %s,\ vmInstanceUuid\:\ %s\ is\ requested = \u7F3A\u5C11\u53C2\u6570\uFF0CResourceUuid\uFF1A{0}\uFF0C\u8BF7\u6C42vmInstanceUuid\uFF1A{1}

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:153
# args: vmInstanceUuid
missing\ parameter,\ vmInstanceUuid\:\ %s\ is\ requested = \u7F3A\u5C11\u53C2\u6570\uFF0C\u8BF7\u6C42\u4E86vmInstanceUuid\uFF1A{0}

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:334
# args: vmInstanceUuid
cannot\ find\ vm\ with\ uuid\:\ %s = \u627E\u4E0D\u5230uuid\u4E3A{0}\u7684\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:338
# args: resourceUuid
cannot\ find\ vm\ device\ with\ uuid\:\ %s = \u627E\u4E0D\u5230uuid\u4E3A{0}\u7684VM\u8BBE\u5907

# at: src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java:38
# args: vmUuid,hostUuid
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\ host[%s]\ not\ have\ numa\ node = VM[{0}]\u542F\u52A8\u5931\u8D25\uFF0C\u56E0\u4E3A\u5DF2\u542F\u7528NUMA\uFF0C\u4F46\u7269\u7406\u673A[{1}]\u6CA1\u6709NUMA\u8282\u70B9

# at: src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java:41
# args: vmUuid
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\ cpu\ not\ pin = VM[{0}]\u542F\u52A8\u5931\u8D25\uFF0C\u56E0\u4E3ANUMA\u5DF2\u542F\u7528\uFF0C\u4F46CPU\u672Apin

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:45
# args: 
hot\ plug\ not\ close = \u70ED\u63D2\u62D4\u672A\u5173\u95ED

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:49
# args: 
vm\ cpu\ not\ all\ pinning = \u4E91\u4E3B\u673ACPU\u672A\u5B8C\u5168\u56FA\u5B9A

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:53
# args: entry.getKey().toString()
cpu[%s]\ not\ pin\ in\ a\ same\ host\ numa\ node = CPU[{0}]\u672A\u56FA\u5B9A\u5728\u540C\u4E00\u7269\u7406\u673ANUMA\u8282\u70B9\u4E2D

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:57
# args: vmUuid,String.join(VmNumaConstant.RULES_SEPARATOR, errors)
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\:\ %s = VM[{0}]\u542F\u52A8\u5931\u8D25\uFF0C\u56E0\u4E3ANUMA\u5DF2\u542F\u7528\uFF0C\u4F46\uFF1A{1}

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaFilterFlow.java:52
# args: 
No\ host\ is\ available\ to\ create\ vm\ Instance.Because\ vNuma\ vms\ need\ to\ be\ created\ on\ hosts\ with\ same\ numa,\ but\ no\ hosts\ is\ available\ after\ filter\ primary\ vm's\ host = \u6CA1\u6709\u7269\u7406\u673A\u53EF\u7528\u4E8E\u521B\u5EFAVM\u5B9E\u4F8B\u3002\u56E0\u4E3A\u9700\u8981\u5728\u5177\u6709\u76F8\u540CNUMA\u7684\u7269\u7406\u673A\u4E0A\u521B\u5EFAvNUMA VM\uFF0C\u4F46\u5728\u7B5B\u9009\u4E3BVM\u7684\u7269\u7406\u673A\u540E\u6CA1\u6709\u53EF\u7528\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaManagerImpl.java:92
# args: 
fail\ to\ set\ vm\ numa,\ incorrect\ input\ format,only\ accept\ true\ or\ false = \u65E0\u6CD5\u8BBE\u7F6EVM NUMA\uFF0C\u8F93\u5165\u683C\u5F0F\u4E0D\u6B63\u786E\uFF0C\u4EC5\u63A5\u53D7TRUE\u6216FALSE

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaUtils.java:46
# args: word
invalid\ cpu\ set\ [%s] = CPU\u96C6[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:98
# args: msg.getHostUuid(),refVO.getHostGroupUuid()
the\ host[uuid\:%s]\ already\ attached\ to\ host\ scheduling\ group[uuid\:%s] = \u7269\u7406\u673A[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u7269\u7406\u673A\u8C03\u5EA6\u7EC4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:107
# args: 
host\ clusterUuid\ is\ null = \u7269\u7406\u673AClusteruuid\u4E3A\u7A7A

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:111
# args: 
hosts\ that\ you\ can\ add\ to\ a\ host\ scheduling\ group\ must\ be\ enabled\ and\ connected\ to\ the\ MN. = \u60A8\u53EF\u4EE5\u6DFB\u52A0\u5230\u7269\u7406\u673A\u8C03\u5EA6\u7EC4\u7684\u7269\u7406\u673A\u5FC5\u987B\u542F\u7528\u5E76\u8FDE\u63A5\u5230Mn\u3002

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:117
# args: hostVO.getUuid(),hostVO.getZoneUuid(),hostGroup.getUuid(),hostGroup.getZoneUuid()
unmatched\ zone\ detected,\ host[uuid\:\ %s,\ zone\ uuid\:\ %s]'s\ zone\ is\ different\ from\ host\ sheduling\ rule\ group[uuid\:\ %s,\ zone\ uuid\:\ %s] = \u68C0\u6D4B\u5230\u4E0D\u5339\u914D\u7684\u533A\u57DF\uFF0C\u7269\u7406\u673A[uuid\uFF1A{0}\uFF0C\u533A\u57DFuuid\uFF1A{1}]\u7684\u533A\u57DF\u4E0D\u540C\u4E8E\u7269\u7406\u673A\u8BA1\u5212\u89C4\u5219\u7EC4[UUId\uFF1A{2}\uFF0C\u533A\u57DFUUId\uFF1A{3}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:132
# args: msg.getVmUuid(),refVO.getVmGroupUuid()
vm[uuid\:%s]\ already\ attached\ to\ vm\ scheduling\ group[uuid\:%s] = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A\u8C03\u5EA6\u7EC4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:145
# args: vm.getUuid(),vm.getZoneUuid(),groupVO.getUuid(),groupVO.getZoneUuid()
unmatched\ zone\ detected,\ vm[uuid\:\ %s,\ zone\ uuid\:\ %s]'s\ zone\ is\ different\ from\ vm\ sheduling\ rule\ group[uuid\:\ %s,\ zone\ uuid\:\ %s] = \u68C0\u6D4B\u5230\u4E0D\u5339\u914D\u7684\u533A\u57DF\uFF0CVM[uuid\uFF1A{0}\uFF0C\u533A\u57DFuuid\uFF1A{1}]\u7684\u533A\u57DF\u4E0D\u540C\u4E8EVM\u8C03\u5EA6\u89C4\u5219\u7EC4[UUId\uFF1A{2}\uFF0C\u533A\u57DFUUId\uFF1A{3}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:161
# args: VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString(),vm.getState().toString()
vm\ can\ change\ its\ vm\ scheduling\ group\ only\ in\ state\ [%s,%s],\ but\ vm\ is\ in\ state\ [%s] = VM\u53EA\u80FD\u5728\u72B6\u6001[{0}\uFF0C{1}]\u4E0B\u66F4\u6539\u5176VM\u8C03\u5EA6\u7EC4\uFF0C\u4F46VM\u5904\u4E8E\u72B6\u6001[{2}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:171
# args: 
cannot\ operate\ vpc\ vm\ scheduling\ group = \u65E0\u6CD5\u8FD0\u884CVPC\u4E91\u4E3B\u673A\u8C03\u5EA6\u7EC4

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:209
# args: 
zoneUuid\ is\ not\ null = zoneUuid\u4E0D\u4E3A\u7A7A

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:399
# args: 
the\ vm\ scheduling\ group[uuid\:%s]\ has\ already\ had\ a\ executed\ exclusive\ vm\ or\ affinitive\ vm\ scheduling\ policy\ attached.\ you\ cannot\ attach\ either\ of\ the\ two\ scheduling\ policies\ that\ require\ execution\ to\ the\ group\ again = VM\u8C03\u5EA6\u7EC4[uuid\uFF1A{0}]\u5DF2\u9644\u52A0\u5DF2\u6267\u884C\u7684\u72EC\u5360VM\u6216\u5173\u8054VM\u8C03\u5EA6\u7B56\u7565\u3002\u60A8\u4E0D\u80FD\u518D\u6B21\u5C06\u9700\u8981\u6267\u884C\u7684\u4E24\u4E2A\u8BA1\u5212\u7B56\u7565\u4E2D\u7684\u4EFB\u4F55\u4E00\u4E2A\u9644\u52A0\u5230\u7EC4

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleFilterFlow.java:132
# args: 
can\ not\ satisfied\ vm\ scheduling\ rule\ group\ conditions = \u65E0\u6CD5\u6EE1\u8DB3VM\u8C03\u5EA6\u89C4\u5219\u7EC4\u6761\u4EF6

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:158
# args: self.getUuid(),host.getUuid(),vmUuid
vm\ scheduling\ group[uuid\:%s]\ reserve\ host\ [uuid\:%s]\ for\ vm\ [uuid\:\ %s]\ failed = \u4E91\u4E3B\u673A\u8C03\u5EA6\u7EC4[uuid\uFF1A{0}]\u4E3A\u4E91\u4E3B\u673A[uuid\uFF1A{2}]\u4FDD\u7559\u7269\u7406\u673A[UuId\uFF1A{1}]\u5931\u8D25

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:392
# args: vmInv.getUuid(),hostUuid,refVO.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],which\ does\ not\ comply\ with\ the\ scheduling\ rule\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u73B0\u5728\u6B63\u5728\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u8FD0\u884C\uFF0C\u8BE5\u7269\u7406\u673A\u4E0D\u7B26\u5408\u4E0E\u4E91\u4E3B\u673A\u8C03\u5EA6\u7EC4[uuid\uFF1A{2}]\u5173\u8054\u7684\u8C03\u5EA6\u89C4\u5219\u3002

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:402
# args: msg.getVmGroupUuid()
hostGroup[uuid\:%s]\ is\ no\ host = \u7269\u7406\u673A\u7EC4[uuid\uFF1A{0}]\u4E0D\u662F\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:407
# args: msg.getVmUuid(),hostUuid,VMSchedulingRuleType.AFFINITY.toString(),msg.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],\ which\ does\ not\ comply\ with\ the\ scheduling\ rule[%s]\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u73B0\u5728\u6B63\u5728\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u8FD0\u884C\uFF0C\u8BE5\u7269\u7406\u673A\u4E0D\u7B26\u5408\u4E0E\u4E91\u4E3B\u673A\u8C03\u5EA6\u7EC4[uuid\uFF1A{3}]\u5173\u8054\u7684\u8C03\u5EA6\u89C4\u5219[{2}]\u3002

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:414
# args: msg.getVmUuid(),hostUuid,VMSchedulingRuleType.ANTIAFFINITY.toString(),msg.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],which\ does\ not\ comply\ with\ the\ scheduling\ rule[%s]\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u73B0\u5728\u6B63\u5728\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u8FD0\u884C\uFF0C\u8BE5\u7269\u7406\u673A\u4E0D\u7B26\u5408\u4E0E\u4E91\u4E3B\u673A\u8C03\u5EA6\u7EC4[UuId\uFF1A{3}]\u5173\u8054\u7684\u8C03\u5EA6\u89C4\u5219[{2}]\u3002

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:82
# args: msg.getHostGroupUuid()
cannot\ find\ the\ host\ scheduling\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230\u7269\u7406\u673A\u8C03\u5EA6\u7EC4[uuid\uFF1A{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:95
# args: msg.getVmSchedulingRuleUuid()
cannot\ find\ the\ vm\ scheduling\ rule[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230VM\u8BA1\u5212\u89C4\u5219[uuid\uFF1A{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:108
# args: msg.getVmSchedulingRuleGroupUuid()
cannot\ find\ the\ vm\ scheduling\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230VM\u8C03\u5EA6\u7EC4[uuid\uFF1A{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:86
# args: msg.getAllocatorStrategy()
unsupported\ host\ allocation\ strategy[%s] = \u4E0D\u88AB\u652F\u6301\u7684\u7269\u7406\u673A\u5206\u914D\u7B56\u7565[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:72
# args: msg.getType()
unsupported\ instance\ offering\ type[%s] = \u4E0D\u88AB\u652F\u6301\u7684\u8BA1\u7B97\u89C4\u683C\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:76
# args: msg.getCpuNum()
cpu\ num[%s]\ is\ less\ than\ 1 = cpu\u6570\u91CF[{0}]\u5C11\u4E8E1

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:80
# args: msg.getMemorySize()
memory\ size[%s\ bytes]\ is\ less\ than\ 16M,\ no\ modern\ operating\ system\ is\ likely\ able\ to\ boot\ with\ such\ small\ memory\ size = \u5185\u5B58\u5927\u5C0F[{0} bytes]\u5C11\u4E8E16M\uFF0C\u6CA1\u6709\u4E00\u4E2A\u73B0\u4EE3\u64CD\u4F5C\u7CFB\u7EDF\u80FD\u591F\u5728\u5982\u6B64\u5C0F\u7684\u5185\u5B58\u91CC\u88AB\u5F15\u5BFC

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:92
# args: msg.getAllocationStrategy()
unsupported\ primary\ storage\ allocation\ strategy[%s] = \u4E0D\u88AB\u652F\u6301\u7684\u4E3B\u5B58\u50A8\u5206\u914D\u7B56\u7565[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1043
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ instanceOffering[uuid\:\ %s]. = \u5B9E\u4F8B[uuid\uFF1A{0}]\u5DF2\u6709\u4E00\u4E2A\u7528\u6237\u6570\u636E\u7CFB\u7EDF\u6807\u8BB0\u3002

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1108
# args: 
Shouldn't\ be\ more\ than\ one\ systemTag\ for\ one\ instanceOffering. = \u5BF9\u4E8E\u4E00\u4E2A\u5B9E\u4F8B\u63D0\u4F9B\uFF0C\u4E0D\u5E94\u8D85\u8FC7\u4E00\u4E2A\u7CFB\u7EDF\u6807\u8BB0\u3002

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1085
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ diskOffering[uuid\:\ %s]. = DiskOffering[uuid\uFF1A{0}]\u5DF2\u6709\u4E00\u4E2AUserData\u7CFB\u7EDF\u6807\u8BB0\u3002

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:104
# args: 
the\ console\ agent\ is\ not\ connected;\ it's\ mostly\ like\ the\ management\ node\ just\ starts,\ please\ wait\ for\ the\ console\ agent\ connected,\ or\ you\ can\ reconnect\ it\ manually\ if\ disconnected\ for\ a\ long\ time. = \u63A7\u5236\u53F0\u4EE3\u7406\u5931\u8054\uFF0C\u5F88\u6709\u53EF\u80FD\u7BA1\u7406\u8282\u70B9\u521A\u521A\u542F\u52A8\uFF0C\u8BF7\u7B49\u5F85\u63A7\u5236\u53F0\u4EE3\u7406\u7684\u8FDE\u63A5\uFF0C\u5982\u679C\u957F\u65F6\u95F4\u6CA1\u6709\u8FDE\u4E0A\u53EF\u4EE5\u5C1D\u8BD5\u624B\u52A8\u91CD\u8FDE\u63A7\u5236\u53F0\u4EE3\u7406\u3002

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:125
# args: vm.getUuid()
cannot\ find\ host\ IP\ of\ the\ vm[uuid\:%s],\ is\ the\ vm\ running??? = \u65E0\u6CD5\u627E\u5230vm[uuid:{0}]\u7684\u7269\u7406\u673AIP\uFF0C\u8BF7\u786E\u8BA4\u8BE5vm\u662F\u5426\u5728\u8FD0\u884C\uFF1F\uFF1F\uFF1F

# at: src/main/java/org/zstack/console/ConsoleApiInterceptor.java:49
# args: msg.getVmInstanceUuid(),state
Console\ is\ only\ available\ when\ the\ VM[uuid\:%s]\ is\ Running\ or\ Crashed,\ but\ the\ current\ state\ is\ %s = \u63A7\u5236\u53F0\u4EC5\u5728VM[uuid\uFF1A{0}]\u6B63\u5728\u8FD0\u884C\u6216\u5D29\u6E83\u65F6\u53EF\u7528\uFF0C\u4F46\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/console/ConsoleProxyBase.java:133
# args: uri.toString()
establish\ VNC\:\ unexpected\ uri\:\ %s = \u5EFA\u7ACBVNC\uFF1A\u610F\u5916\u7684URI\uFF1A{0}

# at: src/main/java/org/zstack/console/ConsoleProxyBase.java:198
# args: ret.getError()
unable\ to\ check\ console\ proxy\ availability,\ because\ %s = \u65E0\u6CD5\u68C0\u67E5\u63A7\u5236\u53F0\u4EE3\u7406\u662F\u5426\u53EF\u7528\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:189
# args: 
Ansible\ private\ key\ not\ found. = \u627E\u4E0D\u5230Ansible\u79C1\u94A5\u3002

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:387
# args: uuid
invalid\ management\ node\ uuid[%s] = \u975E\u6CD5\u7684\u7BA1\u7406\u8282\u70B9uuid[{0}]

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:520
# args: 
failed\ to\ configure\ consoleProxyOverriddenIp[code\:%d]\ or\ consoleProxyPort[code\:%d] = \u65E0\u6CD5\u914D\u7F6EConsoleProxyOverriddeNip[\u4EE3\u7801\uFF1A{0}]\u6216ConsoleProxyPort[\u4EE3\u7801\uFF1A{1}]

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:543
# args: 
failed\ to\ reconnect\ console\ proxy = \u91CD\u8FDE\u63A7\u5236\u53F0\u4EE3\u7406\u5931\u8D25

# at: src/main/java/org/zstack/core/ansible/AnsibleRunner.java:426
# args: 
User\ name\ or\ password\ or\ port\ number\ may\ be\ problematic = \u7528\u6237\u540D\u3001\u5BC6\u7801\u6216\u8005\u7AEF\u53E3\u53EF\u80FD\u662F\u9519\u8BEF\u7684

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:106
# args: srcFolder,srcRes.getStdout(),srcRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s].\nstdout\:%s\nstderr\:%s = \u65E0\u6CD5\u68C0\u67E5\u6587\u4EF6\u5939[{0}]\u4E0B\u6587\u4EF6\u7684md5sum.\nstdout:{1}\nstderr:{2}

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:121
# args: dstFolder,hostname,dstRes.getStdout(),dstRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s]\ on\ the\ host[ip\:%s].\nstdout\:%s\nstderr\:%s = \u65E0\u6CD5\u68C0\u67E5\u7269\u7406\u673A[ip:{1}]\u7684\u6587\u4EF6\u5939[{0}]\u4E0B\u6587\u4EF6\u7684md5sum.\nstdout:{2}\nstderr:{3}

# at: src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java:684
# args: errMsg
message\ is\ not\ in\ corrected\ JSON\ mediaType,\ %s = \u6D88\u606F\u662F\u9519\u8BEF\u7684JSON\u683C\u5F0F\uFF0C{0}

# at: src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java:69
# args: EventFacade.WEBHOOK_TYPE
for\ webhooks\ with\ type[%s],\ the\ field\ opaque\ cannot\ be\ null = \u5BF9\u4E8E[{0}]\u7C7B\u578B\u7684webhooks\uFF0Copaque\u5B57\u6BB5\u4E0D\u80FD\u4E3Anull

# at: src/main/java/org/zstack/core/config/GlobalConfig.java:430
# args: 
do\ not\ allow\ skip\ verification = \u4E0D\u5141\u8BB8\u8DF3\u8FC7\u9A8C\u8BC1

# at: src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java:118
# args: msg.getCategory(),msg.getName()
Unable\ to\ find\ GlobalConfig[category\:\ %s,\ name\:\ %s] = \u65E0\u6CD5\u627E\u5230\u5168\u5C40\u53D8\u91CF[category:{0}, name:{1}]

# at: src/main/java/org/zstack/core/debug/DebugManagerImpl.java:93
# args: 
taskInfo\ was\ not\ found = \u672A\u627E\u5230TaskInfo

# at: src/main/java/org/zstack/core/encrypt/EncryptFacadeImpl.java:204
# args: encrypt.error
Encryption\ error\ \:\ %s = \u52A0\u5BC6\u9519\u8BEF\uFF1A{0}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:71
# args: 
non\ file\ or\ jsoncontent\ input = \u975E\u6587\u4EF6\u6216JSON\u5185\u5BB9\u8F93\u5165

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:76
# args: 
file\ or\ jsoncontent\ cannot\ both\ nonempty = \u6587\u4EF6\u6216JSONContent\u4E0D\u80FD\u540C\u65F6\u4E3A\u975E\u7A7A

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:108
# args: e.getMessage()
Unable\ to\ scan\ folder\:\ %s = \u65E0\u6CD5\u626B\u63CF\u6587\u4EF6\u5939\uFF1A{0}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:112
# args: filename
%s\ is\ not\ existed\ or\ is\ empty\ folder = {0}\u4E0D\u5B58\u5728\u6216\u4E3A\u7A7A\u6587\u4EF6\u5939

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:249
# args: 
elaboration\ code\ must\ be\ number! = \u7CBE\u5316\u4EE3\u7801\u5FC5\u987B\u4E3A\u6570\u5B57\uFF01

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:318
# args: returnValue.get(0).getContent(),returnValue.get(0).getReason()
%s\:\ %s = {0}: {1}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:415
# args: 
input\ args\ 'regex'\ or\ 'category'\ must\ be\ set = \u5FC5\u987B\u8BBE\u7F6E\u8F93\u5165\u53C2\u6570\u201C regex \u201D\u6216\u201C category \u201D

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:32
# args: service.getName()
service[%s]\ has\ been\ registered = \u670D\u52A1(service)[{0}]\u5DF2\u7ECF\u88AB\u6CE8\u518C

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:93
# args: msg.getName()
service[%s]\ is\ not\ registered = \u670D\u52A1[{0}]\u672A\u6CE8\u518C

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:99
# args: msg.getName()
service[%s]\ does\ not\ support\ reload\ config = \u670D\u52A1[{0}]\u4E0D\u652F\u6301\u91CD\u65B0\u52A0\u8F7D\u914D\u7F6E

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:105
# args: msg.getName()
service[%s]\ is\ not\ running = \u670D\u52A1[{0}]\u672A\u8FD0\u884C

# at: src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java:315
# args: vo.getUuid(),vo.getName()
cannot\ trigger\ a\ finished\ GC\ job[uuid\:%s,\ name\:%s] = \u65E0\u6CD5\u89E6\u53D1\u4E00\u4E2A\u5B8C\u6210\u8FC7\u7684GC\u4EFB\u52A1

# at: src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java:38
# args: msg.getApiId()
parameter\ apiId[%s]\ is\ not\ a\ valid\ uuid. = \u53C2\u6570apiId[{0}]\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684uuid

# at: src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:656
# args: url,finalTimeout
unable\ to\ echo\ %s\ in\ %sms = \u65E0\u6CD5\u5728{1}ms\u5185\u8FD4\u56DE{0}

# at: src/main/java/org/zstack/core/retry/Retry.java:103
# args: __name__,times,interval
an\ operation[%s]\ fails\ after\ retrying\ %s\ times\ with\ the\ interval\ %s\ seconds = \u5728\u91CD\u8BD5{1}\u6B21\u95F4\u9694\u65F6\u95F4\u4E3A{2}\u540E\u64CD\u4F5C[{0}]\u5931\u8D25

# at: src/main/java/org/zstack/core/salt/SaltRunner.java:297
# args: stateName,targetIp,retry
failed\ to\ run\ salt\ state[%s]\ on\ system[%s],\ failed\ after\ %s\ retries = \u91CD\u8BD5{2}\u6B21\u4E4B\u540E\uFF0C\u5728\u7CFB\u7EDF[{1}]\u4E0A\u8FD0\u884C\u52A0\u76D0\u72B6\u6001[{0}]\u5931\u8D25

# at: src/main/java/org/zstack/core/salt/SaltSetupMinionJob.java:84
# args: targetIp
scp\ is\ not\ found\ on\ system[%s],\ unable\ to\ setup\ salt = \u5728\u7CFB\u7EDF[{0}]\u4E0A\u627E\u4E0D\u5230SCP\uFF0C\u65E0\u6CD5\u8BBE\u7F6E\u9500\u552E

# at: src/main/java/org/zstack/core/timeout/ApiTimeoutManagerImpl.java:76
# args: ApiTimeoutGlobalProperty.MINIMAL_TIMEOUT
api\ timeout\ cannot\ be\ set\ smaller\ than\ %s = API\u8D85\u65F6\u4E0D\u80FD\u8BBE\u7F6E\u4E3A\u5C0F\u4E8E{0}

# at: src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java:28
# args: url
Invalid\ url[%s] = \u65E0\u6548\u7684URL[{0}]

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:72
# args: 
the\ identity\ authentication\ does\ not\ specify\ the\ resource\ pool\ to\ provide\ the\ service = \u8EAB\u4EFD\u8BA4\u8BC1\u672A\u6307\u5B9A\u63D0\u4F9B\u670D\u52A1\u7684\u8D44\u6E90\u6C60

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:83
# args: setting.resourcePoolType,model
wrong\ secret\ resource\ pool\ model,\ expect\ %s,\ actual\ %s = \u673A\u5BC6\u8D44\u6E90\u6C60\u6A21\u578B\u9519\u8BEF\uFF0C\u5E94\u4E3A{0}\uFF0C\u5B9E\u9645\u4E3A{1}

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:81
# args: resourceUuid
failed\ to\ find\ model\ for\ secretResourcePool\ [%s] = \u627E\u4E0D\u5230SecretResourcePool[{0}]\u7684\u6A21\u578B

# at: src/main/java/org/zstack/crypto/auth/CryptoAuthenticationHelper.java:121
# args: 
failed\ to\ find\ certificate\ info = \u627E\u4E0D\u5230\u8BC1\u4E66\u4FE1\u606F

# at: src/main/java/org/zstack/crypto/auth/CryptoEncryptionParamParser.java:57
# args: plainText,e.getMessage()
failed\ to\ parse\ plain\ text\ in\ encryption\ param\ to\ json\ object\:\ %s,\ %s = \u65E0\u6CD5\u5C06\u52A0\u5BC6\u53C2\u6570\u4E2D\u7684\u7EAF\u6587\u672C\u89E3\u6790\u4E3AJSON\u5BF9\u8C61\uFF1A{0}\uFF0C{1}

# at: src/main/java/org/zstack/crypto/auth/UKeyCryptoAuthenticationFacade.java:73
# args: 
operation\ not\ supported = \u4E0D\u652F\u6301\u7684\u64CD\u4F5C

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java:200
# args: userUuid
user[uuid\=%s]\ not\ found = \u627E\u4E0D\u5230\u7528\u6237[uuid={0}]

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java:204
# args: 
certificate\ uuid\ is\ empty\ and\ UKey\ system\ tag\ does\ not\ exist = \u8BC1\u4E66uuid\u4E3A\u7A7A\uFF0C\u4E14UKEY\u7CFB\u7EDF\u6807\u8BB0\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateManagerImpl.java:217
# args: msg.getCertificateUuid()
certificate[uuid\=%s]\ not\ found = \u672A\u627E\u5230\u8BC1\u4E66[uuid={0}]

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:47
# args: msg.getResourceType()
check\ batch\ data\ integrity\ fail,\ unsupported\ resourceType\:\ %s = \u68C0\u67E5\u6279\u5904\u7406\u6570\u636E\u5B8C\u6574\u6027\u5931\u8D25\uFF0C\u4E0D\u652F\u6301\u7684\u8D44\u6E90\u7C7B\u578B\uFF1A{0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:57
# args: msg.getResourceType()
add\ integrity\ resource\ fail,\ unsupported\ resourceType\:\ %s = \u6DFB\u52A0\u5B8C\u6574\u6027\u8D44\u6E90\u5931\u8D25\uFF0C\u4E0D\u652F\u6301\u7684\u8D44\u6E90\u7C7B\u578B\uFF1A{0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:65
# args: msg.getEncryptType()
start\ data\ protection\ encryptType[%s]\ is\ error = \u542F\u52A8\u6570\u636E\u4FDD\u62A4\u52A0\u5BC6\u7C7B\u578B[{0}]\u51FA\u9519

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:240
# args: inventory.getUuid()
the\ snapshot[uuid\:%s]\ is\ not\ encrypted = \u5FEB\u7167[uuid\uFF1A{0}]\u672A\u52A0\u5BC6

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:249
# args: inventory.getUuid()
verify\ volume\ snapshot[%s]\ consistency\ failed = \u9A8C\u8BC1\u5377\u5FEB\u7167[{0}]\u4E00\u81F4\u6027\u5931\u8D25

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:311
# args: inventory.getId(),exception.getMessage()
encryption\ image\ cache[id\:%s]\ error\:\ %s = \u52A0\u5BC6\u955C\u50CF\u7F13\u5B58[ID\uFF1A{0}]\u9519\u8BEF\uFF1A{1}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:375
# args: inventory.getId()
the\ image\ cache[id\:%s]\ is\ not\ encrypted = \u955C\u50CF\u7F13\u5B58[ID\uFF1A{0}]\u672A\u52A0\u5BC6

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:388
# args: inventory.getId()
verify\ image\ cache[%s]\ consistency\ failed = \u9A8C\u8BC1\u955C\u50CF\u7F13\u5B58[{0}]\u4E00\u81F4\u6027\u5931\u8D25

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:668
# args: msg.getNodeType(),msg.getPath()
nodeType\ %s\ integrity\ file[path\:%s]\ already\ exists = NodeType{0}\u5B8C\u6574\u6027\u6587\u4EF6[\u8DEF\u5F84\uFF1A{1}]\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:682
# args: msg.getNodeType()
invalid\ nodeType[%s] = \u8282\u70B9\u7C7B\u578B[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:694
# args: msg.getNodeType(),msg.getPath()
filed\ to\ add\ integrity\ file[%s.%s],\ it's\ a\ directory\ now. = \u5DF2\u5F52\u6863\u4EE5\u6DFB\u52A0\u5B8C\u6574\u6027\u6587\u4EF6[{0}.{1}]\uFF0C\u5B83\u73B0\u5728\u662F\u4E00\u4E2A\u76EE\u5F55\u3002

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:699
# args: msg.getNodeType(),msg.getPath()
integrity\ file[%s.%s]\ is\ not\ exists = \u5B8C\u6574\u6027\u6587\u4EF6[{0}.{1}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:716
# args: msg.getNodeUuid()
host\ %s\ is\ not\ exists = \u7269\u7406\u673A{0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:724
# args: res.getStderr()
Shell\ fail,\ because\ %s = Shell\u5931\u8D25\uFF0C\u539F\u56E0\u662F{0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:747
# args: msg.getNodeType(),msg.getPath(),exception.getMessage()
add\ integrity\ file[%s.%s]\ fail,\ because\ %s = \u6DFB\u52A0\u5B8C\u6574\u6027\u6587\u4EF6[{0}.{1}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{2}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/EncryptColumnIntegrityFactory.java:141
# args: 
unsupported\ operation\ for\ EncryptColumnIntegrityFactory = \u4E0D\u652F\u6301\u5BF9EncryptColumnIntegrityFactory\u7684\u64CD\u4F5C

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:138
# args: encrypt.error
virtualID\ attribute\ encryption\ error,\ because\:%s = VirtualID\u5C5E\u6027\u52A0\u5BC6\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:187
# args: resourceUuid
IAM2VirtualIDAttributeVO\ %s\ does\ not\ exists = IAM2VirtualIDAttributeVO{0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:194
# args: encrypt.error
virtualID\ attribute\ check\ error,\ because\:%s = VirtualID\u5C5E\u6027\u68C0\u67E5\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/RolePolicyIntegrityFactory.java:115
# args: encrypt.error
rolePolicy\ encryption\ error,\ because\:%s = RolePolicy\u52A0\u5BC6\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/crypto/datacrypto/smp/SMPCryptoBase.java:40
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters = \u5171\u4EAB\u88C5\u5165\u70B9\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5728\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u7269\u7406\u673A

# at: src/main/java/org/zstack/crypto/securitymachine/AttachVerifyPair.java:26
# args: 
originText\ or\ certificateText\ can\ not\ be\ null = \u539F\u59CB\u6587\u672C\u6216\u8BC1\u4E66\u6587\u672C\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:60
# args: msg.getSecurityMachineUuid()
the\ security\ machine\ [%s]\ does\ not\ exist = \u5BC6\u7801\u673A[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:86
# args: msg.getManagementIp()
managementIp[%s]\ is\ not\ in\ IPV4\ format = ManagementIP[{0}]\u4E0D\u662FIPv4\u683C\u5F0F

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:92
# args: msg.getName(),msg.getManagementIp(),error
failed\ to\ connect\ to\ the\ security\ machine\ %s[%s],\ because\ %s = \u65E0\u6CD5\u8FDE\u63A5\u5230\u5BC6\u7801\u673A{0}[{1}]\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:112
# args: msg.getSecurityMachineUuid()
after\ the\ crypto\ function\ is\ enabled,\ at\ least\ one\ security\ machine\ should\ be\ reserved\ in\ the\ corresponding\ resource\ pool = \u542F\u7528\u52A0\u5BC6\u529F\u80FD\u540E\uFF0C\u5E94\u5728\u76F8\u5E94\u7684\u8D44\u6E90\u6C60\u4E2D\u81F3\u5C11\u4FDD\u7559\u4E00\u53F0\u5BC6\u7801\u673A

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:123
# args: msg.getAlgType(),StringUtils.join(EncryptType.values(), ',')
invalid\ algType\ %s,\ supported\ types\:\ %s. = AlgType{0}\u65E0\u6548\uFF0C\u652F\u6301\u7684\u7C7B\u578B\uFF1A{1}\u3002

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:127
# args: poolForProtect
the\ resource\ pool[%s]\ specified\ by\ data\ protection\ does\ not\ exist = \u6570\u636E\u4FDD\u62A4\u6307\u5B9A\u7684\u8D44\u6E90\u6C60[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:145
# args: 
cannot\ be\ deleted.\ after\ the\ encryption\ function\ is\ enabled,\ the\ number\ of\ synced\ security\ machines\ in\ the\ resource\ pool\ that\ provides\ the\ service\ is\ at\ least\ 1 = \u65E0\u6CD5\u5220\u9664\u3002\u542F\u7528\u52A0\u5BC6\u529F\u80FD\u540E\uFF0C\u63D0\u4F9B\u8BE5\u670D\u52A1\u7684\u8D44\u6E90\u6C60\u4E2D\u540C\u6B65\u7684\u5BC6\u7801\u673A\u81F3\u5C11\u4E3A1\u53F0

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:444
# args: 
securityMachine\ is\ disabled,\ failed\ to\ detect\ heartbeat = SecurityMachine\u5DF2\u7981\u7528\uFF0C\u65E0\u6CD5\u68C0\u6D4B\u5FC3\u8DF3

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:584
# args: 
an\ other\ connect\ security\ machine\ task\ is\ running,\ cancel\ the\ new\ task\ and\ wait\ return = \u5176\u4ED6\u8FDE\u63A5\u5BC6\u7801\u673A\u4EFB\u52A1\u6B63\u5728\u8FD0\u884C\uFF0C\u8BF7\u53D6\u6D88\u65B0\u4EFB\u52A1\u5E76\u7B49\u5F85\u8FD4\u56DE

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:183
# args: data,algType
encrypt\ data[%s]\ or\ algType[%s]\ is\ null = \u52A0\u5BC6\u6570\u636E[{0}]\u6216AlgType[{1}]\u4E3A\u7A7A

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:165
# args: resourceUuid
cannot\ find\ model\ for\ secretResourcePool\ [%s] = \u627E\u4E0D\u5230SecretResourcePool[{0}]\u7684\u6A21\u578B

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:105
# args: poolForAuth
the\ crypto\ function\ is\ enabled\ but\ the\ resource\ pool[%s]\ for\ auto\ login\ is\ not\ set. = \u5DF2\u542F\u7528\u52A0\u5BC6\u529F\u80FD\uFF0C\u4F46\u672A\u8BBE\u7F6E\u7528\u4E8E\u81EA\u52A8\u767B\u5F55\u7684\u8D44\u6E90\u6C60[{0}]\u3002

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:113
# args: poolForProtect
the\ crypto\ function\ is\ enabled\ but\ the\ resource\ pool[%s]\ for\ data\ protect\ is\ not\ set. = \u5DF2\u542F\u7528\u52A0\u5BC6\u529F\u80FD\uFF0C\u4F46\u672A\u8BBE\u7F6E\u6570\u636E\u4FDD\u62A4\u7684\u8D44\u6E90\u6C60[{0}]\u3002

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:122
# args: state.toString()
the\ current\ state[%s]\ does\ not\ allow\ manual\ modification\ of\ the\ state = \u5F53\u524D\u72B6\u6001[{0}]\u4E0D\u5141\u8BB8\u624B\u52A8\u4FEE\u6539\u72B6\u6001

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:149
# args: 
cannot\ disable\ all\ security\ machines\ when\ the\ crypto\ function\ is\ enabled = \u542F\u7528\u52A0\u5BC6\u529F\u80FD\u65F6\uFF0C\u65E0\u6CD5\u7981\u7528\u6240\u6709\u5BC6\u7801\u673A

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:159
# args: 
check\ whether\ the\ resource\ pool\ uuid\ is\ set\ for\ authentication = \u68C0\u67E5\u662F\u5426\u4E3A\u8EAB\u4EFD\u9A8C\u8BC1\u8BBE\u7F6E\u4E86\u8D44\u6E90\u6C60uuid

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:202
# args: algType
unknown\ encryptType[%s] = \u672A\u77E5\u7684\u52A0\u5BC6\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:216
# args: data,algType
decrypt\ data[%s]\ or\ algType[%s]\ is\ null = \u89E3\u5BC6\u6570\u636E[{0}]\u6216AlgType[{1}]\u4E3A\u7A7A

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:225
# args: algType
invalid\ decrypt\ algType\:\ %s = \u65E0\u6548\u7684\u89E3\u5BC6AlgType\uFF1A{0}

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:280
# args: msg.getManagementIp()
there\ has\ been\ a\ security\ machine\ having\ managementIp[%s] = \u5DF2\u5B58\u5728\u5177\u6709ManagementIP[{0}]\u7684\u5BC6\u7801\u673A

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:82
# args: securityMachineType
no\ client\ for\ security\ machine[type\=%s] = \u5BC6\u7801\u673A[\u7C7B\u578B={0}]\u6CA1\u6709\u5BA2\u6237\u7AEF

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:101
# args: securityMachineType
no\ security\ machine\ client\ factory\ for\ security\ machine[type\=%s] = \u5BC6\u7801\u673A[\u7C7B\u578B={0}]\u6CA1\u6709\u5BC6\u7801\u673A\u5BA2\u6237\u7AEF\u5DE5\u5382

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:50
# args: 
there\ is\ no\ security\ machine\ that\ can\ be\ activated = \u6CA1\u6709\u53EF\u4EE5\u6FC0\u6D3B\u7684\u5BC6\u7801\u673A\u3002

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:54
# args: msg.getType(),StringUtils.join(SecurityMachineKeyType.values(), ',')
invalid\ token\ type\ %s,\ only\ supports\ %s. = \u4EE4\u724C\u7C7B\u578B{0}\u65E0\u6548\uFF0C\u4EC5\u652F\u6301{1}\u3002

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:68
# args: msg.getSecretResourcePoolUuid()
the\ identity\ authentication\ function\ is\ enabled\ but\ the\ corresponding\ resource\ pool\ is\ not\ set,\ please\ re-enable\ the\ function\ and\ try\ again = \u8EAB\u4EFD\u8BA4\u8BC1\u529F\u80FD\u5DF2\u542F\u7528\uFF0C\u4F46\u672A\u8BBE\u7F6E\u76F8\u5E94\u7684\u8D44\u6E90\u6C60\uFF0C\u8BF7\u91CD\u65B0\u542F\u7528\u540E\u518D\u8BD5

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:72
# args: msg.getSecretResourcePoolUuid()
cannot\ delete\ the\ resource\ pool\ %s\ when\ in\ use = \u65E0\u6CD5\u5220\u9664\u6B63\u5728\u4F7F\u7528\u7684\u8D44\u6E90\u6C60{0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:237
# args: 
generate\ certificate\ failed = \u751F\u6210\u8BC1\u4E66\u5931\u8D25

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:134
# args: rsp.getData()
flkSec\ securityMachine\ unhealthy\:\ %s = FlkSec SecurityMachine\u4E0D\u6B63\u5E38\uFF1A{0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:161
# args: keyLabel,sm4EncryptResponse.result
keyLabel\ %s\ and\ encryptResult\ %s\ are\ inconsistent = KeyLabel{0}\u548CEncryptResult{1}\u4E0D\u4E00\u81F4

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:168
# args: vo.getUuid(),response.error
the\ connection\ to\ the\ security\ machine\ %s\ failed\ during\ the\ process\ of\ generating\ the\ test\ key\ because\ %s = \u5728\u751F\u6210\u6D4B\u8BD5\u5BC6\u94A5\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u4E0E\u5BC6\u7801\u673A{0}\u7684\u8FDE\u63A5\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:185
# args: vo.getUuid(),dataProtectTokenRes.error
failed\ to\ generate\ dataProtect\ token\ for\ the\ security\ machine\ %s\ because\ %s = \u65E0\u6CD5\u4E3A\u5BC6\u7801\u673A{0}\u751F\u6210DataProtect\u4EE4\u724C\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:196
# args: vo.getUuid(),hmacTokenTokenRes.error
failed\ to\ generate\ hmac\ token\ for\ the\ security\ machine\ %s\ because\ %s = \u65E0\u6CD5\u4E3A\u5BC6\u7801\u673A{0}\u751F\u6210HMAC\u4EE4\u724C\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:208
# args: vo.getUuid(),encryptRes.error
failed\ to\ get\ encrypt\ result\ for\ the\ security\ machine\ %s\ because\ %s = \u65E0\u6CD5\u83B7\u53D6\u5BC6\u7801\u673A{0}\u7684\u52A0\u5BC6\u7ED3\u679C\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineBase.java:123
# args: self.getManagementIp()
the\ security\ machine\ [%s]\ failed\ to\ manually\ detect\ synchronization,\ please\ confirm\ whether\ the\ security\ machine\ has\ synchronized\ the\ key! = \u5BC6\u7801\u673A[{0}]\u624B\u52A8\u68C0\u6D4B\u540C\u6B65\u5931\u8D25\uFF0C\u8BF7\u786E\u8BA4\u5BC6\u7801\u673A\u662F\u5426\u5DF2\u540C\u6B65\u5BC6\u94A5\uFF01

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineFactory.java:32
# args: msg.getName(),vo.getModel()
security\ machine[uuid\:%s]\ model\ is\ not\ %s = \u5BC6\u7801\u673A[uuid\uFF1A{0}]\u578B\u53F7\u4E0D\u662F{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolApiInterceptor.java:52
# args: msg.getModel()
currently\ does\ not\ support\ the\ creation\ of\ %s\ resource\ pools = \u5F53\u524D\u4E0D\u652F\u6301\u521B\u5EFA{0}\u8D44\u6E90\u6C60

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolFactory.java:33
# args: msg.getResourceUuid(),vo.getModel()
secretResourcePool[uuid\:%s]\ model\ is\ not\ %s = SecretResourcePool[uuid\uFF1A{0}]\u6A21\u578B\u4E0D\u662F{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:409
# args: agentBasic.INSMGetReturnCode(),agentBasic.INSMGetErrMsg()
large\ file\ hmac\ encrypt\ failed,\ code\:\ %s,\ detail\:\ %s = \u5927\u6587\u4EF6HMAC\u52A0\u5BC6\u5931\u8D25\uFF0C\u4EE3\u7801\uFF1A{0}\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:457
# args: 
failed\ to\ find\ secret\ key = \u627E\u4E0D\u5230\u5BC6\u94A5

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:465
# args: e.getMessage()
failed\ to\ parse\ secret\ key,\ error\:\ %s = \u65E0\u6CD5\u5206\u6790\u5BC6\u94A5\uFF0C\u9519\u8BEF\uFF1A{0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:500
# args: 
cipherText\ can\ not\ be\ null = \u5BC6\u6587\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:503
# args: 
encryptSubjectDN\ can\ not\ be\ null = EncryptSubjectDN\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:508
# args: 
failed\ to\ parse\ MS\ Envelope = \u89E3\u6790MS\u4FE1\u5C01\u5931\u8D25

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:533
# args: 
failed\ to\ export\ secret\ key = \u65E0\u6CD5\u5BFC\u51FA\u5BC6\u94A5

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:550
# args: 
import\ secret\ key\ fail = \u5BFC\u5165\u5BC6\u94A5\u5931\u8D25

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:196
# args: vo.getUuid(),activateTokenRes.error
failed\ to\ generate\ activated\ token\ for\ the\ security\ machine\ %s\ because\ %s = \u65E0\u6CD5\u4E3A\u5BC6\u7801\u673A{0}\u751F\u6210\u6FC0\u6D3B\u7684\u4EE4\u724C\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:206
# args: dataProtectTokenName,vo.getUuid(),dataProtectTokenRes.error
failed\ to\ generate\ dataProtect\ token\ %s\ for\ the\ security\ machine\ %s\ because\ %s = \u65E0\u6CD5\u4E3A\u5BC6\u7801\u673A{1}\u751F\u6210DataProtect\u4EE4\u724C{0}\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:216
# args: hmacTokenName,vo.getUuid(),hmacTokenTokenRes.error
failed\ to\ generate\ hmac\ token\ %s\ for\ the\ security\ machine\ %s\ because\ %s = \u65E0\u6CD5\u4E3A\u5BC6\u7801\u673A{1}\u751F\u6210HMAC\u4EE4\u724C{0}\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/cube/CubeManagerImpl.java:505
# args: cmd.host,cmd.detail
host[uuid\:\ %s]\ memory\ ecc\ triggered,\ detail\:\ %s = \u7269\u7406\u673A[uuid\uFF1A{0}]\u5185\u5B58ECC\u5DF2\u89E6\u53D1\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{1}

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:99
# args: 
parameters\ [accountUuid]\ only\ can\ be\ used\ by\ admin\ user! = \u53C2\u6570[accountUuid]\u5FC5\u987B\u88ABadmin\u7528\u6237\u8BBE\u7F6E

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:54
# args: msg.getExpirePolicy()
expire\ policy\:\ %s\ is\ not\ valid = \u65E0\u6548\u7684\u8FC7\u671F\u7B56\u7565:{0}

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:57
# args: msg.getVlan()
vlanId[%s]\ has\ been\ existed! = VlanId[{0}]\u5DF2\u5B58\u5728\uFF01

# at: src/main/java/org/zstack/daho/core/DahoSdkImpl.java:128
# args: 
create\ daho\ vll\ task\ failed! = \u521B\u5EFAdaho vll\u4EFB\u52A1\u5931\u8D25

# at: src/main/java/org/zstack/daho/core/DahoSdkImpl.java:169
# args: msg.getAccountUuid()
no\ aliyun\ account\ found\ for\ accountUuid\:\ %s = \u627E\u4E0D\u5230\u5F53\u524D\u8D26\u6237{0}\u5BF9\u5E94\u7684\u963F\u91CC\u4E91\u8D26\u6237

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:105
# args: list,msg.getDirectoryUuid()
resources\ %s\ has\ already\ been\ bound\ to\ directory\ uuid[%s]\ ,\ multiple\ paths\ are\ not\ supported = \u8D44\u6E90{0}\u5DF2\u7ED1\u5B9A\u5230\u76EE\u5F55uuid[{1}]\uFF0C\u4E0D\u652F\u6301\u591A\u4E2A\u8DEF\u5F84

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:112
# args: list,ALLOW_RESOURCE_TYPES
resource\ types\ %s\ are\ not\ supported\ by\ directory,\ allowed\ types\ are\ %s = \u76EE\u5F55\u4E0D\u652F\u6301\u8D44\u6E90\u7C7B\u578B{0}\uFF0C\u5141\u8BB8\u7684\u7C7B\u578B\u4E3A{1}

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:129
# args: 
name\ contains\ unsupported\ characters,\ name\ can\ only\ contain\ Chinese\ characters,\ English\ letters,\ numbers,\ spaces,\ and\ the\ following\ characters\:\ ()\uFF08\uFF09\u3010\u3011@._-+\  = \u540D\u79F0\u5305\u542B\u4E0D\u652F\u6301\u7684\u5B57\u7B26\uFF0C\u540D\u79F0\u53EA\u80FD\u5305\u542B\u4E2D\u6587\u5B57\u7B26\u3001\u82F1\u6587\u5B57\u6BCD\u3001\u6570\u5B57\u3001\u7A7A\u683C\u548C\u4EE5\u4E0B\u5B57\u7B26\uFF1A\uFF08\uFF09\uFF08\uFF09[]@._-+

# at: src/main/java/org/zstack/directory/DirectoryBase.java:356
# args: msg.getDirectoryUuid(),msg.getTargetParentUuid()
circular\ dependency\ detected,\ directory\ %s\ and\ directory\ %s\ will\ cause\ circular\ dependency = \u68C0\u6D4B\u5230\u5FAA\u73AF\u4F9D\u8D56\uFF0C\u76EE\u5F55{0}\u548C\u76EE\u5F55{1}\u5C06\u5BFC\u81F4\u5FAA\u73AF\u4F9D\u8D56

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:147
# args: list.get(0).getUuid(),msg.getName()
duplicate\ directory\ name,\ directory[uuid\:\ %s]\ with\ name\ %s\ already\ exists = \u5DF2\u5B58\u5728\u540D\u79F0\u4E3A{1}\u7684\u91CD\u590D\u76EE\u5F55\u540D\u3001\u76EE\u5F55[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:154
# args: 
fail\ to\ create\ directory,\ directories\ are\ up\ to\ four\ levels = \u521B\u5EFA\u76EE\u5F55\u5931\u8D25\uFF0C\u76EE\u5F55\u6700\u591A\u6709\u56DB\u5C42

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:158
# args: msg.getType(),DIRECTORY_TYPES
the\ type\ of\ directory\ %s\ is\ not\ supported,\ the\ supported\ directory\ types\ are\ %s = \u4E0D\u652F\u6301\u76EE\u5F55{0}\u7684\u7C7B\u578B\uFF0C\u652F\u6301\u7684\u76EE\u5F55\u7C7B\u578B\u4E3A{1}

# at: src/main/java/org/zstack/directory/VmDirectoryChecker.java:27
# args: vo.getZoneUuid()
all\ resources\ zoneUuid\ must\ be\ consistent\ with\ the\ directory\ zoneUuid[%s] = \u6240\u6709\u8D44\u6E90\u7684zoneuuid\u5FC5\u987B\u4E0E\u76EE\u5F55zoneuuid[{0}]\u4E00\u81F4

# at: src/main/java/org/zstack/drs/DRSBase.java:216
# args: 
Advice\ not\ allowed\ while\ scheduling = \u8BA1\u5212\u65F6\u4E0D\u5141\u8BB8\u901A\u77E5

# at: src/main/java/org/zstack/drs/DRSBase.java:277
# args: 
delete\ DRS\ is\ not\ allowed\ while\ the\ vm\ is\ being\ migrated = \u8FC1\u79FB\u4E91\u4E3B\u673A\u65F6\u4E0D\u5141\u8BB8\u5220\u9664DRS

# at: src/main/java/org/zstack/drs/DRSBase.java:370
# args: 
Scheduling\ is\ not\ allowed\ while\ the\ vm\ is\ being\ migrated = \u8FC1\u79FB\u4E91\u4E3B\u673A\u65F6\u4E0D\u5141\u8BB8\u8BA1\u5212

# at: src/main/java/org/zstack/drs/DRSBase.java:481
# args: 
Lack\ of\ host\ CPU,\ memory\ monitoring\ data = \u7F3A\u5C11\u7269\u7406\u673ACPU\u3001\u5185\u5B58\u76D1\u63A7\u6570\u636E

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:55
# args: msg.getClusterUuid()
The\ cluster[%s]\ has\ created\ DRS = \u96C6\u7FA4[{0}]\u5DF2\u521B\u5EFADRS

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:59
# args: 
DRS\ is\ disabled = DRS\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:64
# args: 
thresholds\ can\ not\ be\ empty = \u9608\u503C\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:73
# args: threshold.getThresholdName()
illegal\ thresholdName[%s] = \u9608\u503C\u540D\u79F0[{0}]\u975E\u6CD5

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:77
# args: threshold.getOperator()
illegal\ threshold\ operator[%s] = \u9608\u503C\u8FD0\u7B97\u7B26[{0}]\u975E\u6CD5

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:81
# args: 
thresholdValue\ can\ not\ be\ empty = \u9608\u503C\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:86
# args: 
illegal\ thresholdValue,\ valid\ range\:\ (0,\ 100] = \u9608\u503C\u975E\u6CD5\uFF0C\u6709\u6548\u8303\u56F4\uFF1A\uFF08[0\uFF0C100]

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:103
# args: 
GlobalConfig\ ENABLE_DRS\ is\ closed = GlobalConfig\u542F\u7528_DRS\u5DF2\u5173\u95ED

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:107
# args: msg.getUuid(),vo.getState().toString()
The\ DRS[%s]\ state\ is\ %s = DRS[{0}]\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:122
# args: adviceVO.getDrsUuid()
The\ DRS[%s]\ automation\ level\ is\ not\ manual = DRS[{0}]\u81EA\u52A8\u5316\u7EA7\u522B\u4E0D\u662F\u624B\u52A8\u7684

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:136
# args: msg.getAdviceUuid()
advice[%s]\ has\ expired = \u5EFA\u8BAE[{0}]\u5DF2\u8FC7\u671F

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:145
# args: 
Successfully\ executed,\ no\ repeated\ executions\ allowed = \u6267\u884C\u6210\u529F\uFF0C\u4E0D\u5141\u8BB8\u91CD\u590D\u6267\u884C

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:152
# args: adviceVO.getVmUuid()
The\ vm[%s]\ has\ been\ deleted = \u4E91\u4E3B\u673A[{0}]\u5DF2\u5220\u9664

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:155
# args: adviceVO.getVmUuid()
The\ vm[%s]\ state\ is\ not\ running = VM[{0}]\u72B6\u6001\u672A\u8FD0\u884C

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:158
# args: adviceVO.getVmUuid(),adviceVO.getVmSourceHostUuid()
The\ vm[%s]\ is\ no\ longer\ on\ the\ source\ host[%s] = VM[{0}]\u4E0D\u518D\u4F4D\u4E8E\u6E90\u7269\u7406\u673A[{1}]\u4E0A

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:273
# args: msg.getClusterUuid()
The\ cluster[%s]\ does\ not\ support\ DRS. = \u96C6\u7FA4[{0}]\u4E0D\u652F\u6301DRS\u3002

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:290
# args: reasons
Can\ not\ create\ DRS,\ %s = \u65E0\u6CD5\u521B\u5EFADRS\uFF0C{0}

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:323
# args: 
hostUuids\ is\ empty = HOSTuuidS\u4E3A\u7A7A

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:330
# args: 
query\ hosts\ utilization\ data\ failed = \u67E5\u8BE2\u7269\u7406\u673A\u5229\u7528\u7387\u6570\u636E\u5931\u8D25

# at: src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java:83
# args: bundle.getEncryptionType()
failed\ to\ parse\ API\ message\:\ can\ not\ parse\ encryption\ param\ with\ type\ %s = \u672A\u80FD\u5206\u6790API\u6D88\u606F\uFF1A\u65E0\u6CD5\u5206\u6790\u7C7B\u578B\u4E3A{0}\u7684\u52A0\u5BC6\u53C2\u6570

# at: src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java:128
# args: matchTags.size()
failed\ to\ parse\ API\ message\:\ found\ %d\ encryption\ param\ system\ tags,\ expect\ 1 = \u672A\u80FD\u5206\u6790API\u6D88\u606F\uFF1A\u627E\u5230{0}\u4E2A\u52A0\u5BC6\u53C2\u6570\u7CFB\u7EDF\u6807\u8BB0\uFF0C\u5E94\u4E3A1\u4E2A

# at: src/main/java/org/zstack/externalbackup/zbox/HostZBoxBackupRecoverGC.java:142
# args: volumeUuids
some\ volume[uuids\:%s]\ recover\ failed.\ you\ can\ trigger\ it\ again\ by\ reconnect\ it. = \u67D0\u4E9B\u5377[uuid\uFF1A{0}]\u6062\u590D\u5931\u8D25\u3002\u60A8\u53EF\u4EE5\u901A\u8FC7\u91CD\u65B0\u8FDE\u63A5\u6765\u518D\u6B21\u89E6\u53D1\u5B83\u3002

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java:34
# args: externalBackupUuid
there\ is\ another\ external\ backup[uuid\:\ %s]\ recovering = \u53E6\u4E00\u4E2A\u5916\u90E8\u5907\u4EFD[uuid\uFF1A{0}]\u6B63\u5728\u6062\u590D

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java:38
# args: 
both\ hostUuids\ and\ backupStorageUuids\ are\ empty.\ you\ must\ specify\ one\ or\ both\ of\ them. = Hostuuid\u548CBackupStorageuuid\u5747\u4E3A\u7A7A\u3002\u60A8\u5FC5\u987B\u6307\u5B9A\u5176\u4E2D\u4E00\u4E2A\u6216\u4E24\u4E2A\u3002

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:691
# args: 
please\ insert\ zbox\ to\ management\ node. = \u8BF7\u5C06ZBOX\u63D2\u5165\u7BA1\u7406\u8282\u70B9\u3002

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:219
# args: 
cannot\ find\ recover.conf\ under\ zbox\ backup\ install\ dir. = \u5728ZBOX\u5907\u4EFD\u5B89\u88C5\u76EE\u5F55\u4E0B\u627E\u4E0D\u5230recover.conf\u3002

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:741
# args: result.getExecutionLog()
fail\ to\ backup\ database\:\ %s = \u65E0\u6CD5\u5907\u4EFD\u6570\u636E\u5E93\uFF1A{0}

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:591
# args: 
zbox\ should\ be\ inserted\ to\ a\ host\ first. = \u5E94\u9996\u5148\u5C06ZBox\u63D2\u5165\u7269\u7406\u673A\u3002

# at: src/main/java/org/zstack/externalservice/cronjob/CronJobImpl.java:81
# args: 
crond\ is\ not\ running = crond\u4EFB\u52A1\u672A\u5728\u8FD0\u884C

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:485
# args: 
Missing\ CPU/memory\ settings = \u7F3A\u5C11CPU/\u5185\u5B58\u8BBE\u7F6E

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:489
# args: 
Unexpected\ CPU/memory\ settings = \u610F\u5916\u7684CPU/\u5185\u5B58\u8BBE\u7F6E

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:498
# args: instanceOfferingUuid
instance\ offering[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = \u8BA1\u7B97\u89C4\u683C[uuid:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u6839\u636E\u8BE5\u89C4\u683C\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:502
# args: instanceOfferingUuid,ivo.getType()
instance\ offering[uuid\:%s,\ type\:%s]\ is\ not\ UserVm\ type,\ can't\ create\ vm\ from\ it = \u8BA1\u7B97\u89C4\u683C[uuid:{0}, type:{1}]\u4E0D\u662FUserVm\u7C7B\u578B\uFF0C\u4E0D\u80FD\u901A\u8FC7\u5B83\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:539
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = \u955C\u50CF[uuid:{0}]\u6CA1\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u6839\u636E\u8BE5\u955C\u50CF\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:544
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ ready\ yet,\ can't\ create\ vm\ from\ it = \u955C\u50CF[uuid\uFF1A{0}]\u5C1A\u672A\u5C31\u7EEA\uFF0C\u65E0\u6CD5\u4ECE\u4E2D\u521B\u5EFAVM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:559
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ system\ image,\ can't\ be\ used\ to\ create\ user\ vm = \u955C\u50CF[uuid:{0}] \u662F\u7CFB\u7EDF\u955C\u50CF\uFF0C\u4E0D\u80FD\u4F7F\u7528\u5B83\u521B\u5EFA\u7528\u6237\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:575
# args: diskUuids
disk\ offerings[uuids\:%s]\ are\ Disabled,\ can\ not\ create\ vm\ from\ it = \u4E91\u76D8\u89C4\u683C[uuids:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u4F7F\u7528\u5B83\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:450
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ secondary\ vm[uuid\:%s] = FT\u8F85\u52A9\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u5F53\u524D\u64CD\u4F5C

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:126
# args: group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
pvm[uuid\:%s]\ and\ svm[uuid\:%s]\ volume\ number\ not\ matches,\ do\ not\ allowed\ to\ start = PVM[uuid\uFF1A{0}]\u548CSVM[uuid\uFF1A{1}]\u5377\u53F7\u4E0D\u5339\u914D\uFF0C\u4E0D\u5141\u8BB8\u542F\u52A8

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:135
# args: i,group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
volume\ with\ index\:\ %d,\ of\ pvm[uuid\:%s]\ and\ svm[uuid\:%s]\ have\ different\ size,\ do\ not\ allowed\ to\ start = PVM[uuid\uFF1A{1}]\u548CSVM[uuid\uFF1A{2}]\u4E2D\u7D22\u5F15\u4E3A{0}\u7684\u5377\u5927\u5C0F\u4E0D\u540C\uFF0C\u4E0D\u5141\u8BB8\u542F\u52A8

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:146
# args: i,group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
volume\ with\ index\:\ %d,\ of\ pvm[uuid\:%s]\ and\ svm[uuid\:%s]'s\ cache\ volume\ have\ different\ size,\ do\ not\ allowed\ to\ start = PVM[uuid\uFF1A{1}]\u548CSVM[uuid\uFF1A{2}]\u7684\u7F13\u5B58\u5377\u7684\u7D22\u5F15\u4E3A{0}\u7684\u5377\u5927\u5C0F\u4E0D\u540C\uFF0C\u4E0D\u5141\u8BB8\u542F\u52A8

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:169
# args: msg.getUuid(),faultToleranceVmGroupUuid
image[uuid\:%s]\ is\ still\ used\ by\ fault\ tolerance\ vm[uuid\:%s] = \u5BB9\u9519\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\u4ECD\u5728\u4F7F\u7528\u955C\u50CF[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:212
# args: msg.getL3NetworkUuid(),String.join(",", vmInstanceUuids),VmInstanceState.Paused,VmInstanceState.Running
could\ not\ delete\ l3\ network[uuid\:%s].\ Fault\ tolerance\ vm[%s]\ in\ states[%s,\ %s]\ still\ using\ it.\ Stop\ related\ fault\ tolerance\ vms\ before\ delete\ l3\ network = \u65E0\u6CD5\u5220\u9664\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u3002\u72B6\u6001\u4E3A[{2}\uFF0C{3}]\u7684\u5BB9\u9519VM[{1}]\u4ECD\u5728\u4F7F\u7528\u3002\u5728\u5220\u9664\u4E09\u5C42\u7F51\u7EDC\u4E4B\u524D\u505C\u6B62\u76F8\u5173\u7684\u5BB9\u9519\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:266
# args: msg.getFaultToleranceVmUuid()
Can\ not\ fail-over\ vm[uuid\:%s],\ please\ enable\ ft\ in\ GlobalConfig = \u65E0\u6CD5\u5BF9VM[uuid\uFF1A{0}]\u8FDB\u884C\u6545\u969C\u8F6C\u79FB\uFF0C\u8BF7\u5728GlobalConfig\u4E2D\u542F\u7528FT

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:270
# args: msg.getFaultToleranceVmUuid()
Can\ not\ fail-over\ vm[uuid\:%s],\ please\ confirm\ it\ is\ a\ fault\ tolerance\ vm\ group = \u65E0\u6CD5\u5BF9VM[uuid\uFF1A{0}]\u8FDB\u884C\u6545\u969C\u8F6C\u79FB\uFF0C\u8BF7\u786E\u8BA4\u5B83\u662F\u5BB9\u9519VM\u7EC4

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:276
# args: msg.getFaultToleranceVmUuid(),FaultToleranceStatus.Protected,FaultToleranceStatus.Unknown
Can\ not\ fail-over\ vm[uuid\:%s],\ because\ fault\ tolerance\ vm\ group\ is\ not\ in\ status\ of\ [%s,\ %s] = \u65E0\u6CD5\u5BF9VM[uuid\uFF1A{0}]\u8FDB\u884C\u6545\u969C\u8F6C\u79FB\uFF0C\u56E0\u4E3A\u5BB9\u9519VM\u7EC4\u7684\u72B6\u6001\u4E0D\u662F[{1}\uFF0C{2}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:301
# args: Joiner.on(",").join(vmUuids)
Can\ not\ maintain\ host,\ because\ ft\ vms[%s]\ are\ under\ recovering = \u65E0\u6CD5\u7EF4\u62A4\u7269\u7406\u673A\uFF0C\u56E0\u4E3A\u6B63\u5728\u6062\u590DFT VM[{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:319
# args: msg.getClass(),msg.getVmInstanceUuid(),state
current\ operation[api\:%s]\ is\ not\ supported\ when\ ft\ vm[uuid\:%s,\ state\:%s]\ is\ not\ stopped = \u672A\u505C\u6B62FT VM[uuid\uFF1A{1}\uFF0C\u72B6\u6001\uFF1A{2}]\u65F6\uFF0C\u4E0D\u652F\u6301\u5F53\u524D\u64CD\u4F5C[API\uFF1A{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:367
# args: VmHaLevel.FaultTolerance.toString()
Can\ not\ set\ vm\ level\ to\ %s,\ please\ enable\ ft\ in\ GlobalConfig = \u65E0\u6CD5\u5C06VM\u7EA7\u522B\u8BBE\u7F6E\u4E3A{0}\uFF0C\u8BF7\u5728GlobalConfig\u4E2D\u542F\u7528FT

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:515
# args: 
Ft\ network\ is\ not\ set = \u672A\u8BBE\u7F6EFT\u7F51\u7EDC

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:423
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ cpu\ number,\ need\ to\ stop\ both\ of\ the\ vms = \u65E0\u6CD5\u66F4\u65B0FT VM[uuid\uFF1A{0}]CPU\u7F16\u53F7\uFF0C\u9700\u8981\u505C\u6B62\u4E24\u4E2AVM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:427
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ memory\ size,\ need\ to\ stop\ both\ of\ the\ vms = \u65E0\u6CD5\u66F4\u65B0FT VM[uuid\uFF1A{0}]\u5185\u5B58\u5927\u5C0F\uFF0C\u9700\u8981\u505C\u6B62\u4E24\u4E2AVM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:431
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ platform,\ need\ to\ stop\ both\ of\ the\ vms = \u65E0\u6CD5\u66F4\u65B0FT VM[uuid\uFF1A{0}]\u5E73\u53F0\uFF0C\u9700\u8981\u505C\u6B62\u4E24\u4E2AVM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:442
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ group\ vm[uuid\:%s] = FT\u7EC4VM[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u5F53\u524D\u64CD\u4F5C

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:446
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ primary\ vm[uuid\:%s] = FT\u4E3BVM[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u5F53\u524D\u64CD\u4F5C

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:466
# args: msg.getVmInstanceUuid()
current\ operation\ is\ not\ supported\ on\ secondary\ vm[uuid\:%s] = \u8F85\u52A9\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u5F53\u524D\u64CD\u4F5C

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:472
# args: 
can\ not\ migrate\ FT\ primary\ vm = \u65E0\u6CD5\u8FC1\u79FBFT\u4E3B\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:476
# args: 
can\ not\ migrate\ FT\ secondary\ vm = \u65E0\u6CD5\u8FC1\u79FBFT\u8F85\u52A9\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:511
# args: 
Failed\ to\ create\ ft\ vm,\ please\ enable\ ft\ in\ GlobalConfig = \u65E0\u6CD5\u521B\u5EFAFT VM\uFF0C\u8BF7\u5728GlobalConfig\u4E2D\u542F\u7528FT

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:549
# args: msg.getImageUuid(),imgFormat
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ can\ be\ used\ to\ create\ vm = \u955C\u50CF[uuid\uFF1A{0}]\u7684\u5A92\u4F53\u7C7B\u578B\u4E3A\uFF1A{1}\uFF0C\u53EA\u80FD\u4F7F\u7528RootVolumeTemplate\u521B\u5EFAVM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:554
# args: msg.getImageUuid(),imageFileFmt,ImageConstant.QCOW2_FORMAT_STRING
image[uuid\:%s]\ is\ of\ format\:\ %s,\ only\ %s\ can\ be\ used\ to\ create\ vm = \u955C\u50CF[uuid\uFF1A{0}]\u7684\u683C\u5F0F\u4E3A\uFF1A{1}\uFF0C\u53EA\u6709{2}\u53EF\u7528\u4E8E\u521B\u5EFAVM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:364
# args: hostUuid
failed\ to\ allocate\ port\ on\ host[uuid\:\ %s] = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u5206\u914D\u7AEF\u53E3

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:369
# args: hostUuid
allocated\ port\ num\ less\ than\ requested\ on\ host[uuid\:\ %s] = \u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u5206\u914D\u7684\u7AEF\u53E3\u53F7\u5C0F\u4E8E\u8BF7\u6C42\u7684\u7AEF\u53E3\u53F7

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:524
# args: smsg.getPrimaryVmInstanceUuid()
could\ not\ get\ hostUuid\ of\ primary\ vm[uuid\:%s] = \u65E0\u6CD5\u83B7\u53D6\u4E3B\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u7684Hostuuid

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:892
# args: 
can\ not\ start\ secondary\ vm,\ because\ primary\ vm\ is\ still\ stopped = \u65E0\u6CD5\u542F\u52A8\u8F85\u52A9\u4E91\u4E3B\u673A\uFF0C\u56E0\u4E3A\u4E3B\u4E91\u4E3B\u673A\u4ECD\u5904\u4E8E\u505C\u6B62\u72B6\u6001

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:1322
# args: vm.getUuid()
Can\ not\ migrate\ ft\ secondary\ vm[uuid\:%s] = \u65E0\u6CD5\u8FC1\u79FBFT\u8F85\u52A9\u4E91\u4E3B\u673A[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:1327
# args: vm.getUuid()
Can\ not\ migrate\ ft\ primary\ vm[uuid\:%s] = \u65E0\u6CD5\u8FC1\u79FBFT\u4E3B\u4E91\u4E3B\u673A[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java:546
# args: 
Current\ ft\ vm\ is\ in\ unknown\ status,\ can\ not\ stop\ it,\ please\ try\ to\ fail-over\ it\ manually = \u5F53\u524DFT\u4E91\u4E3B\u673A\u5904\u4E8E\u672A\u77E5\u72B6\u6001\uFF0C\u65E0\u6CD5\u505C\u6B62\uFF0C\u8BF7\u5C1D\u8BD5\u624B\u52A8\u6545\u969C\u8F6C\u79FB

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java:596
# args: self.getUuid()
unable\ to\ start\ the\ vm[uuid\:%s].\ It\ doesn't\ have\ any\ nic,\ please\ attach\ a\ nic\ and\ try\ again = \u65E0\u6CD5\u542F\u52A8\u4E91\u4E3B\u673A[uuid:{0}]\u3002\u8BE5\u4E91\u4E3B\u673A\u6CA1\u6709\u7F51\u5361\uFF0C\u8BF7\u6DFB\u52A0\u7F51\u5361\u540E\u518D\u8BD5

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3110
# args: nicUuid,pvm.getHostUuid()
failed\ to\ allocate\ port\ of\ nic[uuid\:\ %s]\ on\ host[uuid\:\ %s] = \u65E0\u6CD5\u5206\u914D\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684NIC[uuid\uFF1A{0}]\u7684\u7AEF\u53E3

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3115
# args: nicUuid,pvm.getHostUuid()
allocated\ port\ num\ less\ than\ requested\ of\ nic[uuid\:\ %s]\ on\ host[uuid\:\ %s] = \u5206\u914D\u7684\u7AEF\u53E3\u6570\u5C0F\u4E8E\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684NIC[uuid\uFF1A{0}]\u8BF7\u6C42\u7684\u7AEF\u53E3\u6570

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:727
# args: 
can\ not\ create\ secondary\ vm,\ because\ primary\ vm\ is\ stopped = \u65E0\u6CD5\u521B\u5EFA\u8F85\u52A9\u4E91\u4E3B\u673A\uFF0C\u56E0\u4E3A\u4E3B\u4E91\u4E3B\u673A\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:641
# args: 
an\ other\ fault\ tolerance\ gc\ task\ is\ running,\ cancel\ the\ new\ task\ and\ wait\ return = \u5176\u4ED6\u5BB9\u9519GC\u4EFB\u52A1\u6B63\u5728\u8FD0\u884C\uFF0C\u8BF7\u53D6\u6D88\u65B0\u4EFB\u52A1\u5E76\u7B49\u5F85\u8FD4\u56DE

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:2256
# args: 
can\ not\ start\ secondary\ vm,\ because\ primary\ vm\ is\ stopped = \u65E0\u6CD5\u542F\u52A8\u8F85\u52A9\u4E91\u4E3B\u673A\uFF0C\u56E0\u4E3A\u4E3B\u4E91\u4E3B\u673A\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1212
# args: 
created\ svm\ found,\ report\ error\ for\ this\ start\ secondary\ vm\ request = \u627E\u5230\u5DF2\u521B\u5EFA\u7684SVM\uFF0C\u62A5\u544A\u6B64\u542F\u52A8\u8F85\u52A9\u4E91\u4E3B\u673A\u8BF7\u6C42\u7684\u9519\u8BEF

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1468
# args: vmInstanceUuid
could\ not\ failover\ vm[uuid\:%s].\ Related\ fault\ tolerance\ vm\ group\ not\ exists = \u65E0\u6CD5\u5BF9\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u8FDB\u884C\u6545\u969C\u5207\u6362\u3002\u76F8\u5173\u5BB9\u9519\u4E91\u4E3B\u673A\u7EC4\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1484
# args: group.getPrimaryVmInstanceUuid()
pvm[uuid\:%s]\ not\ exists = PVM[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1596
# args: 
unexpected\ exception = \u610F\u5916\u5F02\u5E38

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1556
# args: 
could\ not\ failover.\ Secondary\ vm\ is\ unknown\ but\ no\ fault\ tolerance\ network\ address\ available = \u65E0\u6CD5\u8FDB\u884C\u6545\u969C\u8F6C\u79FB\u3002\u8F85\u52A9\u4E91\u4E3B\u673A\u672A\u77E5\uFF0C\u4F46\u6CA1\u6709\u53EF\u7528\u7684\u5BB9\u9519\u7F51\u7EDC\u5730\u5740

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1495
# args: 
could\ not\ failover.\ Primary\ vm\ is\ unknown\ but\ no\ fault\ tolerance\ network\ address\ available = \u65E0\u6CD5\u8FDB\u884C\u6545\u969C\u8F6C\u79FB\u3002\u4E3B\u4E91\u4E3B\u673A\u672A\u77E5\uFF0C\u4F46\u6CA1\u6709\u53EF\u7528\u7684\u5BB9\u9519\u7F51\u7EDC\u5730\u5740

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1669
# args: hostUuid
cannot\ found\ available\ ip\ from\ current\ ft\ network.\ Check\ whether\ global\ config[category\:ft\ name\:fault.tolerance.network.cidr]\ is\ correctly\ set,\ and\ confirm\ that\ host[uuid\:%s]\ own\ ip\ address\ in\ the\ CIDR = \u5728\u5F53\u524DFT\u7F51\u7EDC\u4E2D\u627E\u4E0D\u5230\u53EF\u7528\u7684IP\u3002e.\u68C0\u67E5\u662F\u5426\u6B63\u786E\u8BBE\u7F6E\u4E86\u5168\u5C40\u914D\u7F6E[Category\uFF1AFT Name\uFF1AFault.TolerancNetwork.CIDR]\uFF0C\u5E76\u786E\u8BA4\u7269\u7406\u673A[uuid\uFF1A{0}]\u5728CIDR\u4E2D\u62E5\u6709IP\u5730\u5740

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3009
# args: 
not\ fault\ tolerance\ vm\ port\ found = \u672A\u627E\u5230\u5BB9\u9519VM\u7AEF\u53E3

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:95
# args: imageUuid,spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage.\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = \u4E0D\u80FD\u53D1\u73B0\u955C\u50CF[uuid:{0}]\u5728\u4EFB\u4F55\u5904\u4E8EConnected\u72B6\u6001\u5907\u4EFD\u7684\u955C\u50CF\u670D\u52A1\u5668\u3002\u53EF\u4EE5\u8FDB\u884C\u5BF9\u4EE5\u4E0B\u9009\u9879\u7684\u68C0\u67E5: \n1. \u955C\u50CF\u670D\u52A1\u5668\u662F\u5426\u5DF2\u7ECF\u8FC7\u8F7D\u5230\u533A\u57DF\u4E2D\u7684\u4E91\u4E3B\u673A[name: {1}, uuid:{2}]\u4E2D\uFF1B\n2. \u5982\u679C\u955C\u50CF\u670D\u52A1\u5668\u4E0D\u662F\u5904\u4E8E\u8FDE\u63A5\u72B6\u6001\uFF0C\u8BF7\u5C1D\u8BD5\u91CD\u8FDE

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:89
# args: imageUuid,spec.getVmInventory().getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = \u4E0D\u80FD\u53D1\u73B0\u955C\u50CF[uuid:{0}]\u5728\u4EFB\u4F55\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A\u7684\u5E76\u4E14\u5904\u4E8EConnected\u72B6\u6001\u5907\u4EFD\u7684\u955C\u50CF\u670D\u52A1\u5668\u3002\u53EF\u4EE5\u8FDB\u884C\u5BF9\u4EE5\u4E0B\u9009\u9879\u7684\u68C0\u67E5: \n1. \u955C\u50CF\u670D\u52A1\u5668\u662F\u5426\u5DF2\u7ECF\u8FC7\u8F7D\u5230\u533A\u57DF\u4E2D\u7684\u4E91\u4E3B\u673A[name: {2}, uuid:{3}]\u4E2D\uFF1B\n2. \u5982\u679C\u955C\u50CF\u670D\u52A1\u5668\u4E0D\u662F\u5904\u4E8EConnected\u72B6\u6001\uFF0C\u8BF7\u5C1D\u8BD5\u91CD\u8FDE

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:117
# args: zoneUuid,isoImageUuid
no\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s]\ contains\ the\ ISO[uuid\:%s] = \u6CA1\u6709\u5305\u542B\u7740ISO[uuid:{1}]\u7684\u955C\u50CF\u670D\u52A1\u5668\u6DFB\u52A0\u5230\u533A\u57DF[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/ShadowVmCloneTagsFlow.java:63
# args: 
missing\ fault\ tolerance\ vm\ group = \u7F3A\u5C11\u5BB9\u9519VM\u7EC4

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:63
# args: vo.getL3NetworkUuid(),vo.getFlowMeterUuid()
The\ network[%s]\ have\ been\ added\ into\ the\ flow\ meter[%s] = \u7F51\u7EDC[{0}]\u5DF2\u6DFB\u52A0\u5230\u6D41\u91CF\u8BA1[{1}]\u4E2D

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:71
# args: 
The\ virtual\ router\ have\ been\ added\ into\ other\ flow\ meter = \u5DF2\u5C06\u865A\u62DF\u8DEF\u7531\u5668\u6DFB\u52A0\u5230\u5176\u4ED6\u6D41\u91CF\u8BA1\u4E2D

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:77
# args: msg.getVersion(),FlowMeterConstants.TYPE.NetFlow.toString()
invalid\ type\ parameter\ is\ %s\ and\ should\ be\ in\ %s = \u65E0\u6548\u7684\u7C7B\u578B\u53C2\u6570\u4E3A{0}\uFF0C\u5E94\u4F4D\u4E8E{1}\u4E2D

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:154
# args: msg.getServer()
[%s]\ is\ not\ formatted\ as\ IP\ address = [{0}]\u7684\u683C\u5F0F\u4E0D\u662FIP\u5730\u5740

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:143
# args: collector.getUuid()
Collector\ duplicate\ with\ %s = \u6536\u96C6\u5668\u4E0E{0}\u91CD\u590D

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:164
# args: collectorVO.getFlowMeterUuid()
FlowMeter[%s]\ doesn't\ exist = \u6D41\u91CF\u8BA1[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:168
# args: collectorVO.getFlowMeterUuid(),vo.getVersion().toString()
FlowMeter[%s]\ IPv6\ doesn't\ support\ version[%s] = \u6D41\u91CF\u8BA1[{0}]IPv6\u4E0D\u652F\u6301\u7248\u672C[{1}]

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:150
# args: 
no\ specify\ parameter = \u6CA1\u6709\u6307\u5B9A\u53C2\u6570

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:159
# args: msg.getUuid()
Flow\ collector[%s]\ doesn't\ exist = \u6D41\u6536\u96C6\u5668[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:183
# args: server,port,collector.getUuid()
Collector\ [%s\ %d]\ duplicate\ with\ %s = \u6536\u96C6\u5668[{0}{1}]\u4E0E{2}\u91CD\u590D

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:88
# args: vmUuid
unable\ to\ set\ vm\ hostname.\ the\ vm[uuid\:%s]\ do\ not\ have\ default\ L3\ network = \u65E0\u6CD5\u8BBE\u7F6E\u4E91\u4E3B\u673A\u7269\u7406\u673A\u540D\u3002VM[uuid\uFF1A{0}]\u6CA1\u6709\u9ED8\u8BA4\u7684\u4E09\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:103
# args: sameTag.getResourceUuid(),hostname,defaultL3uuid
conflict\ hostname,\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = \u7269\u7406\u673A\u540D\u51B2\u7A81\uFF0C\u5728\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{2}]\u4E0A\u5B58\u5728\u7269\u7406\u673A\u540D\u4E3A[{1}]\u7684\u4E91\u4E3B\u673A[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:111
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ vm\ not\ running. = \u66F4\u65B0VM[uuid\uFF1A{0}]\u7F51\u7EDC\u914D\u7F6E\u5931\u8D25\uFF0C\u56E0\u4E3AVM\u672A\u8FD0\u884C\u3002

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:116
# args: msg.getVmInstanceUuid(),vm.getType()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ the\ vm\ type\ %s\ is\ not\ supported. = \u66F4\u65B0VM[uuid\uFF1A{0}]\u7F51\u7EDC\u914D\u7F6E\u5931\u8D25\uFF0C\u56E0\u4E3A\u4E0D\u652F\u6301VM\u7C7B\u578B{1}\u3002

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:129
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ guesttools\ not\ running. = \u66F4\u65B0VM[uuid\uFF1A{0}]\u7F51\u7EDC\u914D\u7F6E\u5931\u8D25\uFF0C\u56E0\u4E3AguestTools\u672A\u8FD0\u884C\u3002

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:125
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ the\ guesttools\ version\ is\ too\ low\ for\ this\ feature. = \u66F4\u65B0VM[uuid\uFF1A{0}]\u7F51\u7EDC\u914D\u7F6E\u5931\u8D25\uFF0C\u56E0\u4E3AGuestTools\u7248\u672C\u592A\u4F4E\uFF0C\u65E0\u6CD5\u4F7F\u7528\u6B64\u529F\u80FD\u3002

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:136
# args: nic.getUuid()
sync\ nic[uuid\:%s]\ network\ config\ failed,\ the\ current\ qga\ tools\ only\ support\ manual\ ipv6\ configuration\ and\ do\ not\ support\ automatic\ sync = \u540C\u6B65NIC[uuid\uFF1A{0}]\u7F51\u7EDC\u914D\u7F6E\u5931\u8D25\uFF0C\u5F53\u524DQGA\u5DE5\u5177\u4EC5\u652F\u6301\u624B\u52A8IPv6\u914D\u7F6E\uFF0C\u4E0D\u652F\u6301\u81EA\u52A8\u540C\u6B65

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:147
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ hypervisor\ type\ is\ not\ supported = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u6302\u8F7D\u589E\u5F3A\u5DE5\u5177\u955C\u50CF\uFF0C\u56E0\u4E3A\u5176\u865A\u62DF\u5316\u5C42\u76EE\u524D\u4E0D\u652F\u6301\u589E\u5F3A\u5DE5\u5177

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:154
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ not\ running = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u6302\u8F7D\u589E\u5F3A\u5DE5\u5177\u955C\u50CF\uFF0C\u56E0\u4E3A\u5B83\u76EE\u524D\u5E76\u672A\u5904\u4E8E\u8FD0\u884C\u72B6\u6001

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:161
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u6302\u8F7D\u589E\u5F3A\u5DE5\u5177\u955C\u50CF\uFF0C\u56E0\u4E3A\u5B83\u4E0D\u662F\u7528\u6237\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:168
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it\ has\ no\ cdrom = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}\u6302\u8F7D\u589E\u5F3A\u5DE5\u5177\u955C\u50CF\uFF0C\u56E0\u4E3A\u5B83\u6CA1\u6709\u914D\u5907\u5149\u9A71

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:191
# args: vmUuid
cannot\ get\ guest-tools\ info\ from\ vm[uuid\:%s]\ because\ it's\ not\ running = \u65E0\u6CD5\u4ECE\u4E91\u4E3B\u673A[uuid:{0}]\u5185\u90E8\u83B7\u53D6\u589E\u5F3A\u5DE5\u5177\u4FE1\u606F\uFF0C\u56E0\u4E3A\u5B83\u76EE\u524D\u5E76\u672A\u5904\u4E8E\u8FD0\u884C\u72B6\u6001

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:197
# args: vmUuid
cannot\ get\ guest-tools\ info\ from\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = \u65E0\u6CD5\u4ECE\u4E91\u4E3B\u673A[uuid:{0}]\u5185\u90E8\u83B7\u53D6\u589E\u5F3A\u5DE5\u5177\u4FE1\u606F\uFF0C\u56E0\u4E3A\u5B83\u4E0D\u662F\u7528\u6237\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:219
# args: invalidSet
invalid\ debug\ parameter\:\ %s = \u65E0\u6548\u7684\u8C03\u8BD5\u53C2\u6570\uFF1A{0}

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:227
# args: msg.getVmInstanceUuid()
can\ not\ update\ guest\ tools\ state\ for\ vm\ [uuid\:%s]\ because\ vm\ is\ deleted = \u65E0\u6CD5\u66F4\u65B0VM[uuid\uFF1A{0}]\u7684\u6765\u5BBE\u5DE5\u5177\u72B6\u6001\uFF0C\u56E0\u4E3AVM\u5DF2\u5220\u9664

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:232
# args: msg.getVmInstanceUuid()
can\ not\ update\ guest\ tools\ state\ for\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = \u65E0\u6CD5\u66F4\u65B0VM[uuid\uFF1A{0}]\u7684\u6765\u5BBE\u5DE5\u5177\u72B6\u6001\uFF0C\u56E0\u4E3A\u5B83\u4E0D\u662F\u7528\u6237VM

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:704
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ hypervisor\ type\ is\ not\ supported = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}\u83B7\u53D6\u6700\u65B0\u53EF\u7528\u7684\u589E\u5F3A\u5DE5\u5177\u955C\u50CF\uFF0C\u56E0\u4E3A\u5176\u865A\u62DF\u5316\u5C42\u76EE\u524D\u4E0D\u652F\u6301\u589E\u5F3A\u5DE5\u5177

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:713
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ not\ running\ or\ volume\ recovering. = \u65E0\u6CD5\u83B7\u53D6VM[uuid\uFF1A{0}]\u7684\u6700\u65B0\u6765\u5BBE\u5DE5\u5177\uFF0C\u56E0\u4E3A\u5B83\u672A\u8FD0\u884C\u6216\u5377\u6B63\u5728\u6062\u590D\u3002

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:722
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u83B7\u53D6\u6700\u65B0\u53EF\u7528\u7684\u589E\u5F3A\u5DE5\u5177\u955C\u50CF\uFF0C\u56E0\u4E3A\u5B83\u4E0D\u662F\u7528\u6237\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:1067
# args: Platform.getManagementServerId(),msg.getHostUuid()
no\ proper\ guest\ tools\ iso\ found\ in\ management\ node[uuid\:%s]\ for\ host[uuid\:%s] = \u65E0\u6CD5\u5728\u7BA1\u7406\u8282\u70B9[uuid:{0}]\u4E0A\u4E3A\u7269\u7406\u673A[uuid:{1}]\u5BFB\u627E\u5230\u5408\u9002\u7684\u589E\u5F3A\u5DE5\u5177\u955C\u50CF

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:2042
# args: vm.getUuid(),vm.getName()
failed\ to\ set\ vm[uuid\:\ %s,\ name\:\ %s]\ hostname,\ because\ qga\ state\ is\ not\ running\ and\ there\ is\ no\ dhcp\ service = \u65E0\u6CD5\u8BBE\u7F6EVM[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u7269\u7406\u673A\u540D\uFF0C\u56E0\u4E3AQGA\u72B6\u6001\u672A\u5728\u8FD0\u884C\uFF0C\u5E76\u4E14\u6CA1\u6709DHCP\u670D\u52A1

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:144
# args: vmUuid,rsp.getError()
failed\ to\ get\ guest\ tools\ info\ from\ vm[uuid\:%s],\ because\:%s = \u65E0\u6CD5\u4ECE\u4E91\u4E3B\u673A[uuid:{0}]\u5185\u90E8\u83B7\u53D6\u589E\u5F3A\u5DE5\u5177\u4FE1\u606F\uFF0C\u56E0\u4E3A:{1}

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:244
# args: host.getUuid()
failed\ to\ download\ guest\ tools\ iso\ because\ no\ kvm\ host[uuid\:%s]\ found = KVM\u7269\u7406\u673A[uuid:{0}]\u4E0D\u5B58\u5728\uFF0C\u65E0\u6CD5\u4E3A\u5176\u4E0B\u8F7D\u589E\u5F3A\u5DE5\u5177\u955C\u50CF

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:313
# args: vm.getUuid(),rsp.getError()
failed\ to\ attach\ guest\ tools\ iso\ to\ vm[uuid\:%s],\ because\:%s = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u6302\u8F7D\u589E\u5F3A\u5DE5\u5177\u955C\u50CF\uFF0C\u56E0\u4E3A:{1}

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:358
# args: vm.getUuid(),rsp.getError()
failed\ to\ detach\ guest\ tools\ iso\ from\ vm[uuid\:%s],\ because\:%s = \u65E0\u6CD5\u4ECEVM[uuid\uFF1A{0}]\u5206\u79BB\u6765\u5BBE\u5DE5\u5177ISO\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/guesttools/pvpanic/PVPanicCrashStrategyManagerImpl.java:200
# args: errCode
can\ not\ be\ here = \u4E0D\u80FD\u5728\u8FD9\u91CC\u3002

# at: src/main/java/org/zstack/ha/HaInterceptor.java:90
# args: vm.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ it\ is\ not\ stopped = \u65E0\u6CD5\u5728VM[uuid\uFF1A{0}]\u4E0A\u8BBE\u7F6EFT\uFF0C\u56E0\u4E3A\u5B83\u672A\u505C\u6B62

# at: src/main/java/org/zstack/ha/HaInterceptor.java:94
# args: vm.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ some\ data\ volume\ is\ still\ attached = \u65E0\u6CD5\u5728VM[uuid\uFF1A{0}]\u4E0A\u8BBE\u7F6EFT\uFF0C\u56E0\u4E3A\u67D0\u4E9B\u6570\u636E\u4E91\u76D8\u4ECD\u5904\u4E8E\u6302\u63A5\u72B6\u6001

# at: src/main/java/org/zstack/ha/HaInterceptor.java:102
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ since\ pci\ device\ attached = \u7531\u4E8E\u8FDE\u63A5\u4E86PCI\u8BBE\u5907\uFF0C\u65E0\u6CD5\u5728VM[uuid\uFF1A{0}]\u4E0A\u8BBE\u7F6EFT

# at: src/main/java/org/zstack/ha/HaInterceptor.java:108
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached\ by\ passthrough = \u65E0\u6CD5\u5728VM[uuid\uFF1A{0}]\u4E0A\u8BBE\u7F6EFT\uFF0C\u56E0\u4E3A\u5B58\u5728\u901A\u8FC7passthrough\u8FDE\u63A5\u7684USB\u8BBE\u5907

# at: src/main/java/org/zstack/ha/HaInterceptor.java:119
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vmm[uuid\:%s]\ since\ mdev\ device\ attached = \u65E0\u6CD5\u5728VMM[uuid\uFF1A{0}]\u4E0A\u8BBE\u7F6EFT\uFF0C\u56E0\u4E3A\u5DF2\u8FDE\u63A5MDEV\u8BBE\u5907

# at: src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java:257
# args: struct.getHostUuid(),struct.getHostIp()
hosts\ failed\ to\ port\ scan\ the\ failure\ host[uuid\:%s,\ ip\:%s] = \u626B\u63CFIP\u4E3A{1}\u7684\u4E3B\u673A\u7AEF\u53E3\u5931\u8D25

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:96
# args: checkers.indexOf(checker) + 1,checkers.size(),checker.getClass().getSimpleName(),s.getSuccessTimes() * s.getSuccessInterval()
(%d/%d)\ start\ HaHostChecker\ %s\:\ predict\ time\ is\ [%d]\ seconds = \uFF08{0}/{1}\uFF09\u542F\u52A8HaHostChecker{2}\uFF1A\u9884\u6D4B\u65F6\u95F4\u4E3A[{3}]\u79D2

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:160
# args: self.getName(),self.getUuid()
cannot\ find\ the\ host\ of\ the\ vm[name\:%s,\ uuid\:%s],\ hostUuid\ is\ null = \u627E\u4E0D\u5230vm[name:{0}, uuid:{1}]\u7684\u7269\u7406\u673A, \u56E0\u4E3AhostUuid\u4E3Anull

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:167
# args: 
no\ HaHostChecker\ found,\ cannot\ do\ HA = \u627E\u4E0D\u5230HaHostChecker\uFF0C\u65E0\u6CD5\u6267\u884CHA

# at: src/main/java/org/zstack/ha/HaManagementNodeChecker.java:102
# args: 
the\ management\ node\ fails\ to\ scan\ the\ host = \u7BA1\u7406\u8282\u70B9\u626B\u63CF\u7269\u7406\u673A\u5931\u8D25

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1873
# args: vmUuid
the\ VM[uuid\:%s]\ volume\ stored\ location\ primary\ storage\ is\ in\ a\ state\ of\ maintenance = \u4E91\u4E3B\u673A[{0}]\u4E91\u76D8\u6240\u5728\u4E3B\u5B58\u50A8\u5904\u4E8E\u7EF4\u62A4\u72B6\u6001

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1615
# args: 
VM\ is\ started\ successfully = \u4E91\u4E3B\u673A\u5DF2\u6210\u529F\u542F\u52A8

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1618
# args: 
Failed\ to\ start\ the\ NeverStop\ VM = \u65E0\u6CD5\u542F\u52A8NeverStop\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:394
# args: newValue
the\ value[%s]\ is\ lesser\ than\ 0\ or\ greater\ than\ 1\  = \u503C[{0}]\u5C0F\u4E8E0\u6216\u5927\u4E8E1

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:699
# args: HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)
A\ GC\ job\ is\ submitted\ to\ HA\ the\ VM[retry\ delay\:\ %s\ seconds] = \u63D0\u4EA4GC\u4EFB\u52A1\u6765\u9AD8\u53EF\u7528VM[\u91CD\u8BD5\u95F4\u9694: {0} \u79D2]

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1301
# args: 
HA\ is\ successfully\ completed = HA\u5DF2\u6210\u529F\u5B8C\u6210

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1309
# args: 
Failed\ to\ HA\ the\ VM = \u9AD8\u53EF\u7528VM\u5931\u8D25

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1195
# args: 
vm\ stopped\ unexpectedly,\ double\ check\ state = VM\u610F\u5916\u505C\u6B62\uFF0C\u8BF7\u518D\u6B21\u68C0\u67E5\u72B6\u6001

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1204
# args: vmUuid,hostUuid
cannot\ determine\ VM[%s]\ status\ on\ host[%s],\ try\ to\ start\ it = \u65E0\u6CD5\u786E\u5B9A\u7269\u7406\u673A[{1}]\u4E0A\u7684VM[{0}]\u72B6\u6001\uFF0C\u5C1D\u8BD5\u542F\u52A8\u865A\u62DF\u673A

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1601
# args: 
vm\ state\ is\ stopped,\ try\ to\ start\ it = \u4E91\u4E3B\u673A\u72B6\u6001\u4E3A\u201C\u5DF2\u505C\u6B62\u201D\uFF0C\u5C1D\u8BD5\u542F\u52A8\u865A\u62DF\u673A

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1227
# args: vmUuid,hostUuid
VM[%s]\ is\ running\ on\ host[%s] = VM[{0}]\u6B63\u5728\u7269\u7406\u673A[{1}]\u4E0A\u8FD0\u884C

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1240
# args: vmUuid,hostUuid
VM[%s]\ is\ paused\ on\ host[%s] = \u7269\u7406\u673A[{1}]\u4E0A\u7684\u4E91\u4E3B\u673A[{0}]\u5DF2\u6682\u505C

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1268
# args: vm.getHypervisorType()
the\ hypervisor[%s]\ does\ not\ support\ VM\ HA = \u5F53\u524D\u4E91\u4E3B\u673A\u76D1\u89C6\u5668(hypervisor)[{0}]\u4E0D\u652F\u6301VM HA

# at: src/main/java/org/zstack/ha/HostCheckResult.java:59
# args: ratio,threshold,hostUuid,errors
[HA\ Worker]\:\ the\ success\ ratio[%s]\ below\ the\ threshold[%s],\ the\ host[uuid\:%s]\ is\ judged\ as\ dead,\ errors\ are\ %s.\ Start\ HA\ all\ the\ vms\ on\ this\ host\ before = [HA Worker]\uFF1A\u6210\u529F\u7387[{0}]\u4F4E\u4E8E\u9608\u503C[{1}]\uFF0C\u7269\u7406\u673A[uuid\uFF1A{2}]\u88AB\u5224\u65AD\u4E3A\u6B7B\uFF0C\u9519\u8BEF\u4E3A{3}\u3002\u4E4B\u524D\u5728\u6B64\u7269\u7406\u673A\u4E0A\u542F\u52A8\u6240\u6709\u4E91\u4E3B\u673A\u7684HA

# at: src/main/java/org/zstack/ha/HostCheckResult.java:56
# args: ratio,threshold
[HA\ worker]\:\ all\ host\ checkers\ are\ finished\ and\ the\ success\ ratio\ is\ %s\ that\ is\ greater\ than\ the\ threshold[%s];\ no\ HA\ need\ for\ the\ vms\ on\ this\ host\ before.\ Please\ wait\ for\ the\ host\ reconnected = [HA Worker]\uFF1A\u6240\u6709\u7269\u7406\u673A\u68C0\u67E5\u5668\u90FD\u5DF2\u5B8C\u6210\uFF0C\u6210\u529F\u7387\u4E3A{0}\uFF0C\u5927\u4E8E\u9608\u503C[{1}]\u3002\u4EE5\u524D\uFF0C\u6B64\u7269\u7406\u673A\u4E0A\u7684\u4E91\u4E3B\u673A\u4E0D\u9700\u8981HA\u3002\u8BF7\u7B49\u5F85\u7269\u7406\u673A\u91CD\u65B0\u8FDE\u63A5

# at: src/main/java/org/zstack/ha/NeverStopVmGC.java:102
# args: 
VM\ state\ is\ not\ running,\ try\ to\ start\ it = \u4E91\u4E3B\u673A\u72B6\u6001\u4E3A\u672A\u8FD0\u884C\uFF0C\u5C1D\u8BD5\u542F\u52A8\u865A\u62DF\u673A

# at: src/main/java/org/zstack/header/backup/NonBackupInfo.java:14
# args: 
enter\ the\ new\ value\ here,\ empty\ means\ no\ change. = \u5728\u6B64\u8F93\u5165\u65B0\u503C\uFF0C\u7A7A\u8868\u793A\u4E0D\u53D8\u3002

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:44
# args: type
keyType\ not\ supported\ type\ [%s] = KeyType\u4E0D\u652F\u6301\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:60
# args: msg.getKey(),msg.getType(),accountUuid
key\:\ [%s]\ with\ type\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = AccountUuId[{2}]\u5DF2\u5B58\u5728\u7C7B\u578B\u4E3A[{1}]\u7684\u9879[{0}]

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:84
# args: msg.getKey(),accountUuid
key\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = key: [{0}]\u5DF2\u7ECF\u5B58\u5728\u4E8EaccountUuid: [{1}]

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java:63
# args: msg.getRegionId(),ak
regionId\ [%s]\ already\ created\ by\ ak\ [%s] = \u533A\u57DFID[{0}]\u5DF2\u7ECF\u88ABAccessKey[{1}]\u521B\u5EFA

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java:46
# args: type
dcType\ not\ supported\ type\ [%s] = DCType\u4E0D\u652F\u6301\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterManagerImpl.java:96
# args: msg.getUuid()
DataCenter\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = \u533A\u57DF[{0}]\u4ECD\u5728\u540C\u6B65\u8FDB\u7A0B\u4E2D\uFF0C\u8BF7\u7A0D\u540E

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:55
# args: msg.getZoneId(),izo.getUuid()
identity\ zone\ [%s]\ already\ existed,\ uuid\ is\:\ %s = \u53EF\u7528\u533A[{0}]\u5DF2\u7ECF\u5B58\u5728\uFF0Cuuid\u662F{1}

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:72
# args: type,dvo.getDcType().toString()
type\ [%s]\ is\ not\ matched\ datacenter\ type\ [%s] = \u7C7B\u578B[{0}]\u4E0E\u533A\u57DF\u7C7B\u578B[{1}]\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:82
# args: 
either\ dataCenterUuid\ or\ regionId\ should\ be\ set,\ please\ check\ the\ parameters. = dataCenterUuid\u548CregionId\u5E94\u8BE5\u88AB\u8BBE\u7F6E\uFF0C\u8BF7\u68C0\u67E5\u53C2\u6570

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneManagerImpl.java:111
# args: msg.getUuid()
IdentityZone\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = \u53EF\u7528\u533A[{0}]\u4ECD\u5728\u540C\u6B65\u8FDB\u7A0B\u4E2D\uFF0C\u8BF7\u7A0D\u540E

# at: src/main/java/org/zstack/hybrid/network/HybridEipCascadeExtension.java:88
# args: 
EcsInstance\ must\ be\ running\ or\ stopped\ while\ deleting\ eip\  = \u5220\u9664\u5F39\u6027IP\u65F6\u4E91\u4E3B\u673A\u5FC5\u987B\u65F6\u5141\u8BB8\u4E2D\u6216\u8005\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:83
# args: vbri.getUuid(),vbri.getDataCenterUuid(),vrouteri.getUuid(),vrouteri.getDataCenterUuid()
router\ interface\ must\ be\ in\ the\ same\ datacenter,\ but\ ri[%s]\ is\ in\ dc[%s]\ and\ ri[%s]\ is\ in\ dc[%s] = \u8DEF\u7531\u63A5\u53E3\u5FC5\u987B\u5728\u76F8\u540C\u7684\u533A\u57DF\uFF0C\u4F46\u662F\u63A5\u53E3[{0}]\u5728\u533A\u57DF[{1}]\u800C\u63A5\u53E3[{2}]\u5728\u533A\u57DF[{3}]

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:93
# args: vrouteri.getUuid(),vrouteri.getStatus()
router\ interface[%s]\ status\ is\ not\ idle,\ it\ is\ %s = \u8DEF\u7531\u63A5\u53E3[{0}]\u5E76\u975E\u95F2\u7F6E\u72B6\u6001\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:101
# args: vrouteri.getUuid(),vrouteri.getOppositeInterfaceUuid()
router\ interface[%s]\ already\ has\ a\ connection,\ it\ is\ %s = \u8DEF\u7531\u63A5\u53E3[{0}]\u5DF2\u7ECF\u6709\u94FE\u63A5{1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:109
# args: 
accessPointUuid\ cannot\ be\ null\ if\ the\ router\ interface\ on\ VBR\ type\ router = \u5F53\u8DEF\u7531\u63A5\u53E3\u7684\u7C7B\u578B\u4E3AVBR\u8DEF\u7531\u65F6\uFF0CaccessPointUuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:183
# args: 
cannot\ delete\ system\ entry = \u4E0D\u80FD\u5220\u9664\u7CFB\u7EDF\u8DEF\u7531\u6761\u76EE

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:189
# args: 
only\ support\ intranet\ rule\ in\ vpc = \u5728VPC\u4E2D\u4EC5\u4EC5\u652F\u6301\u5185\u7F51\u89C4\u5219

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:194
# args: msg.getCidr()
%s\ is\ not\ a\ valid\ cidr = {0}\u662F\u4E00\u4E2A\u65E0\u6548\u7684CIDR

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:204
# args: 
security\ group\ rule\ already\ existed = \u5B89\u5168\u7EC4\u5DF2\u7ECF\u5B58\u5728\u4E86

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:210
# args: msg.getDstCidrBlock()
dstCidrBlock[%s]\ is\ not\ a\ valid\ cidr = dstCidrBlock[{0}]\u662F\u4E00\u4E2A\u65E0\u6548\u7684CIDR

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:239
# args: msg.getNextHopType()
next\ hop\ type\ [%s]\ not\ supported\ create\ route\ entry\ now! = \u4E0D\u652F\u6301\u4E0B\u4E00\u4E2A\u8DC3\u70B9\u7C7B\u578B[{0}]\uFF0C\u8BF7\u7ACB\u5373\u521B\u5EFA\u8DEF\u7531\u6761\u76EE\uFF01

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:235
# args: msg.getNextHopUuid()
no\ such\ vpn\ gateway\:\ %s = \u6CA1\u6709\u8FD9\u6837\u7684VPN\u7F51\u5173: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:224
# args: rivo.getvRouterType().toString(),msg.getvRouterType()
nexthop\ routerInterface\ belongs\ to\ %s,\ but\ the\ entry\ belongs\ to\ %s = \u4E0B\u4E00\u8DF3\u8DEF\u7531\u63A5\u53E3\u7C7B\u578B\u662F{0}\uFF0C\u4F46\u662F\u8BE5\u8DEF\u7531\u7C7B\u578B\u662F{1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:217
# args: msg.getNextHopUuid()
no\ such\ ecs\ instance\:\ %s = \u6CA1\u6709\u8FD9\u6837\u7684ESC\u4E91\u4E3B\u673A: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:249
# args: 
virtual\ border\ router\ only\ support\ routerinterface\ as\ next\ hop\ type = \u4F5C\u4E3A\u4E0B\u4E00\u8DF3\u7C7B\u578B\uFF0C\u865A\u62DF\u8FB9\u754C\u8DEF\u7531\u53EA\u652F\u6301\u8DEF\u7531\u63A5\u53E3

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:269
# args: msg.getCidrBlock(),vpcCidr
vswitch's\ cidr\ [%s]\ not\ in\ the\ vpc's\ [%s] = \u865A\u62DF\u4EA4\u6362\u673A\u7684CIDR\u6CA1\u6709\u5728VPC[{1}]\u4E2D

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:276
# args: old.getUuid()
cidr\ is\ overlap\ by\ another\ vswitch\:\ %s = CIDR\u548C\u5176\u4ED6\u7684\u865A\u62DF\u4EA4\u6362\u673A{0}\u6709\u91CD\u53E0

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:289
# args: msg.getCidrBlock()
invalid\ CidrBlock\:\ %s,\ which\ must\ subnet\ in\ '10.0.0.0/8',\ '172.16.0.0/12',\ '192.168.0.0/16' = \u65E0\u6548\u7684CIDR\u5757: {0}\uFF0CCIDR\u5FC5\u987B\u572810.0.0.0/8\u3001172.16.0.0/12\u548C192.168.0.0/16\u5B50\u7F51\u5185

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:305
# args: msg.getvRouterUuid()
no\ such\ virtual\ router\:\ %s = \u6CA1\u6709\u8FD9\u4E2A\u7684\u865A\u62DF\u8DEF\u7531: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:300
# args: msg.getvRouterUuid()
no\ such\ virtual\ border\ router\:\ %s = \u6CA1\u6709\u8FD9\u4E2A\u865A\u62DF\u8FB9\u754C\u8DEF\u7531\u5668: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:312
# args: msg.getLocalGatewayIp()
localGateway\ is\ not\ IPv4\:\ %s = \u672C\u5730\u7F51\u5173\u5730\u5740\u4E0D\u662FIPV4: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:315
# args: msg.getPeerGatewayIp()
peerGateway\ is\ not\ IPv4\:\ %s = \u5BF9\u7AEF\u7F51\u5173\u5730\u5740\u4E0D\u662FIPV4: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:318
# args: msg.getPeeringSubnetMask()
peerGateway\ is\ not\ subnet\ mask\:\ %s = \u5BF9\u7AEF\u7F51\u5173\u5730\u5740\u4E0D\u662F\u5728\u5B50\u7F51\u63A9\u7801{0}\u4E2D

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:322
# args: msg.getVlanId()
vlanId\ is\ not\ number\:\ %s = vlanId\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57:{0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:332
# args: msg.getEcsUuid(),msg.getEipUuid(),hevo.getAllocateResourceUuid()
couldn't\ attach\ eip\ to\ ecs\:\ [%s]\ ,\ eip\ \:[%s]\ already\ attached\ ecs\:[%s]\  = \u4E0D\u80FD\u7ED1\u5B9A\u5F39\u6027IP\u5230ECS\u4E91\u4E3B\u673A[{0}]\uFF0C\u5F39\u6027IP[{1}]\u5DF2\u7ECF\u7ED1\u5B9A\u5230ECS\u4E91\u4E3B\u673A[{2}]

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:337
# args: msg.getEcsUuid()
ecs\ [%s]\ already\ has\ public\ ip\ now = ECS\u4E91\u4E3B\u673A[{0}]\u5DF2\u7ECF\u62E5\u6709IP

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:343
# args: msg.getEipUuid(),msg.getEcsUuid()
couldn't\ attach\ eip\ [%s]\ to\ ecs\:\ [%s]\ ,\ ecs\ is\ already\ attached = \u4E0D\u80FD\u7ED1\u5B9A\u5F39\u6027IP[{0}]\u5230ECS\u4E91\u4E3B\u673A[{1}]\uFF0CECS\u4E91\u4E3B\u673A\u5DF2\u7ECF\u7ED1\u5B9A\u4E86\u5F39\u6027IP

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:350
# args: msg.getEipUuid(),msg.getEcsUuid()
eip[%s]\ and\ ecs[%s]\ should\ be\ in\ the\ same\ dataCenter\  = \u5F39\u6027IP[{0}]\u548CECS\u4E91\u4E3B\u673A[{1}]\u5E94\u8BE5\u5728\u540C\u4E00\u4E2A\u533A\u57DF

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:359
# args: msg.getEipUuid()
couldn't\ detach\ eip\ \:[%s],\ it\ is\ not\ attached\ on\ any\ instance\  = \u4E0D\u80FD\u89E3\u7ED1\u5F39\u6027IP[{0}]\uFF0C\u56E0\u4E3A\u5B83\u6CA1\u6709\u7ED1\u5B9A\u4EFB\u4F55\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:45
# args: msg.getId()
%s\ is\ not\ a\ valid\ ipv4\ address = {0}\u662F\u4E00\u4E2A\u65E0\u6548\u7684IPV4\u5730\u5740

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:51
# args: 
localCidr\ must\ be\ Cidr! = \u672C\u5730CIDR\u5FC5\u987B\u662FCIDR

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:55
# args: 
remoteCidr\ must\ be\ Cidr! = \u8FDC\u7A0BCIDR\u5FC5\u987B\u662FCIDR

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:62
# args: 
localCidr\ and\ remoteCidr\ must\ be\ Cidr! = \u672C\u5730CIDR\u548C\u8FDC\u7A0BCIDR\u5FC5\u987B\u662FCIDR

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnGatewayCascadeExtension.java:80
# args: gateways.get(0).getUuid()
vpngateway\ [%s]\ existed,\ cannot\ delete\ remote = VPN\u7F51\u5173[{0}]\u5DF2\u7ECF\u5B58\u5728\uFF0C\u4E0D\u80FD\u5220\u9664\u8FDC\u7A0B\u7684

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:343
# args: oldSession.getUserUuid()
The\ user[%s]\ is\ not\ a\ platform\ user = \u7528\u6237[{0}]\u4E0D\u662F\u5E73\u53F0\u7528\u6237

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:994
# args: results.size()
There\ are\ %d\ problems\ with\ the\ file.\  = \u6587\u4EF6\u4E2D\u5305\u542B{0}\u4E2A\u9519\u8BEF

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1011
# args: e.getMessage()
fail\ to\ load\ VirtualID\ info\ from\ file.\ because\n%s = \u89E3\u6790\u6587\u4EF6\u5185\u5BB9\u51FA\u9519\uFF0C{0}

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1022
# args: 
name\ cannot\ be\ empty.\  = \u540D\u79F0\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1030
# args: cmsg.getUsername()
userName[%s]\ is\ repeated.\  = \u7528\u6237\u540D[{0}]\u91CD\u590D

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1028
# args: cmsg.username.length()
name\ exceeds\ max\ length\ of\ string.\ expected\ was\ <\=\ 255,\ actual\ was\ %s.\  = \u540D\u79F0\u5B57\u7B26\u6570\u91CF\u4E0D\u80FD\u8D85\u8FC7255

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1026
# args: 
username\ cannot\ be\ empty.\  = \u7528\u6237\u540D\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1036
# args: cmsg.password.length()
Incorrect\ password\ length.\ expected\ was\ >\=\ 6\ and\ <\=\ 255,\ actual\ was\ %s.\  = \u5BC6\u7801\u957F\u5EA6\u9519\u8BEF\uFF0C\u5E94\u8BE5\u5927\u4E8E\u7B49\u4E8E6\u4E2A\u5B57\u7B26\uFF0C\u5C0F\u4E8E\u7B49\u4E8E255\u5B57\u7B26

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1034
# args: 
password\ cannot\ be\ empty.\  = \u5BC6\u7801\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1044
# args: 
email\ format\ does\ not\ match.\  = \u90AE\u7BB1\u683C\u5F0F\u9519\u8BEF

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1100
# args: noMatchNames
organization[%s]\ is\ not\ exist.\  = \u90E8\u95E8[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1108
# args: repeatNames
organization[%s]\ in\ line\ is\ repeated.\  = \u90E8\u95E8[{0}]\u51FA\u73B0\u91CD\u590D

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1116
# args: repeatNames
organization[%s]\ is\ repeated.\  = \u90E8\u95E8[{0}]\u51FA\u73B0\u91CD\u590D

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1146
# args: noMatchName
project[%s]\ is\ not\ exist.\  = \u9879\u76EE[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1340
# args: 
fail\ to\ build\ VirtualID\ info\ from\ file.\  = \u4E0D\u80FD\u89E3\u6790\u6587\u4EF6\u5185\u5BB9

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1469
# args: resourceUuid,projectUuid
virtualID[uuid\:%s]\ not\ in\ project[uuid\:%s] = VirtualID[uuid\uFF1A{0}]\u4E0D\u5728\u9879\u76EE[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/iam2/IAM2OrganizationBase.java:144
# args: self.getUuid()
Can\ not\ do\ operations,\ because\ current\ organization[uuid\:%s]\ is\ staled,\ please\ enable\ it = \u65E0\u6CD5\u8FDB\u884C\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u5F53\u524D\u7EC4\u7EC7[uuid\uFF1A{0}]\u5DF2\u8FC7\u65F6\uFF0C\u8BF7\u542F\u7528\u8BE5\u7EC4\u7EC7

# at: src/main/java/org/zstack/iam2/IAM2OrganizationBase.java:688
# args: puuid,self.getUuid()
organization[uuid\:%s]\ is\ parent\ of\ the\ organization[uuid\:%s],\ cannot\ set\ it\ as\ a\ child\ organization = \u90E8\u95E8[uuid:{0}]\u662F\u90E8\u95E8[uuid:{1}]\u7684\u4E0A\u7EA7\u90E8\u95E8\uFF0C\u65E0\u6CD5\u88AB\u8BBE\u7F6E\u4E3A\u5B50\u90E8\u95E8

# at: src/main/java/org/zstack/iam2/IAM2ProjectBase.java:130
# args: self.getUuid(),self.getName(),self.getState(),msg.getClass()
the\ project[uuid\:\ %s,\ name\:%s]\ is\ in\ state\ of\ %s\ which\ disallows\ the\ operation[%s] = \u9879\u76EE[[uuid: {0}, \u540D\u79F0:{1}]]\u662F{2}\u72B6\u6001\uFF0C\u4E0D\u5141\u8BB8\u6267\u884C[{3}]\u64CD\u4F5C

# at: src/main/java/org/zstack/iam2/IAM2ProjectBase.java:910
# args: 
can\ not\ parse\ the\ cron\ expression = \u65E0\u6CD5\u5206\u6790Cron\u8868\u8FBE\u5F0F

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:43
# args: loginContext.getUsername()
project[name\:%s]\ not\ existing = \u9879\u76EE[name:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:51
# args: puuid,loginContext.getUsername()
no\ account\ found\ for\ project[uuid\:%s,\ name\:%s] = \u672A\u627E\u5230\u9879\u76EE[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u7684\u5E10\u6237

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:57
# args: loginContext.getOperatorSession().getUserUuid()
wrong\ virtual\ ID[uuid\:%s],\ not\ existing\ or\ wrong\ password = \u9519\u8BEF\u7684virtual ID[uuid:{0}], \u5BC6\u7801\u4E0D\u5B58\u5728\u6216\u8005\u5BC6\u7801\u9519\u8BEF

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:62
# args: vid.getName()
virtual\ ID[name\:%s]\ is\ disabled = virtual ID[\u540D\u79F0:{0}]\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:72
# args: vid.getName(),loginContext.getUsername()
virtual\ ID[name\:%s]\ not\ belonging\ to\ the\ project[name\:%s] = virtual ID[\u540D\u79F0:{0}]\u4E0D\u5C5E\u4E8E\u9879\u76EE[name:{1}]

# at: src/main/java/org/zstack/iam2/IAM2QuotaUpdateChecker.java:75
# args: quota.getName(),quota.getIdentityUuid(),updatedValue,organizationUuid
the\ quota[name\:%s]\ of\ Account[uuid\:%s]\ can\ not\ be\ %d,\ otherwise\ it\ will\ exceeds\ the\ quota\ of\ organization[uuid\:%s] = \u5E10\u6237[uuid\uFF1A{1}]\u7684\u914D\u989D[\u540D\u79F0\uFF1A{0}]\u4E0D\u80FD\u4E3A{2}\uFF0C\u5426\u5219\u5C06\u8D85\u8FC7\u7EC4\u7EC7[uuid\uFF1A{3}]\u7684\u914D\u989D

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:256
# args: self.getUuid()
Can\ not\ do\ operations,\ because\ Current\ virtualID[uuid\:%s]\ is\ staled,\ please\ enable\ it = \u65E0\u6CD5\u6267\u884C\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u5F53\u524DVirtualID[uuid\uFF1A{0}]\u5DF2\u8FC7\u65F6\uFF0C\u8BF7\u542F\u7528\u5B83

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:649
# args: 
only\ admin\ and\ the\ virtual\ ID\ itself\ can\ do\ the\ update = \u53EA\u6709admin\u548Cvirtual ID\u672C\u8EAB\u53EF\u4EE5\u6267\u884C\u66F4\u65B0\u64CD\u4F5C

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:653
# args: msg.getVirtualIDUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ virtual\ ID[uuid\:%s] = \u65E7\u5BC6\u7801\u4E0D\u7B49\u4E8E\u539F\u59CB\u5BC6\u7801\uFF0C\u65E0\u6CD5\u66F4\u65B0\u865A\u62DFID[uuid\uFF1A{0}]\u7684\u5BC6\u7801

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:50
# args: attr.getValue()
attribute\ name\ cannot\ be\ null,\ value[%s] = \u5C5E\u6027\u4E0D\u80FD\u4E3Anull\uFF0C\u8F93\u5165\u503C[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:54
# args: attr.getName()
attribute\ name[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = \u5C5E\u6027\u540D\u79F0[{0}]\u4E0D\u80FD\u8D85\u8FC72048\u4E2A\u5B57\u7B26

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:57
# args: attr.getName(),attr.getValue()
attribute[name\:%s]\ value[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = \u5C5E\u6027[name:{0}] value[{1}]\u4E0D\u80FD\u8D85\u8FC72048\u4E2A\u5B57\u7B26

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:173
# args: msg.getOrganizationUuid(),msg.getName(),projectUsed,msg.getValue()
The\ Organization[uuid\:\ %s]\ used\ [name\:\ %s,\ usedValue\:\ %s]\ exceeds\ Request\:%s. = \u7EC4\u7EC7[uuid\uFF1A{0}]\u4F7F\u7528\u7684[\u540D\u79F0\uFF1A{1}\uFF0CUsedValue\uFF1A{2}]\u8D85\u51FA\u8BF7\u6C42\uFF1A{3}\u3002

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:186
# args: msg.getLoginExpired()
%s\ is\ not\ a\ valid\ value.\ Valid\ values\ are\ \ allow/rejection\ \ xxx\ to\ xxx = {0}\u4E0D\u662F\u6709\u6548\u503C\u3002\u6709\u6548\u503C\u4E3A\u5141\u8BB8/\u62D2\u7EDDXXX\u81F3XXX

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:192
# args: msg.getUuid()
The\ default\ organization[%s]\ cannot\ be\ deleted = \u65E0\u6CD5\u5220\u9664\u9ED8\u8BA4\u7EC4\u7EC7[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:201
# args: msg.getName()
duplicate\ template\ name[%s] = \u91CD\u590D\u7684\u6A21\u677F\u540D\u79F0[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:652
# args: IAM2RolePolicyStatementHelper.PROJECT_ADMIN_ROLE_NAME
illegal\ operation,\ cannot\ add\ Role[%s] = \u975E\u6CD5\u64CD\u4F5C\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u89D2\u8272[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:265
# args: 
admin\ is\ a\ reserved\ name,\ please\ use\ another\ name = admin\u662F\u4FDD\u7559\u540D\u79F0\uFF0C\u8BF7\u4F7F\u7528\u5176\u4ED6\u540D\u79F0

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:273
# args: msg.getName()
invalid\ name[%s],\ there\ has\ been\ a\ project\ or\ account\ with\ the\ same\ name = \u65E0\u6548\u7684\u540D\u79F0[{0}],\u5DF2\u7ECF\u5B58\u5728\u540C\u540D\u7684\u9879\u76EE\u6216\u8D26\u6237

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:281
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ group = \u5C5E\u6027[uuid\uFF1A{0}]\u4E0D\u9002\u7528\u4E8E\u4EFB\u4F55\u7EC4

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:289
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ organization = \u5C5E\u6027[uuid\uFF1A{0}]\u4E0D\u9002\u7528\u4E8E\u4EFB\u4F55\u7EC4\u7EC7

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:297
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ project = \u5C5E\u6027[uuid\uFF1A{0}]\u4E0D\u9002\u7528\u4E8E\u4EFB\u4F55\u9879\u76EE

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:305
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ virtual\ ID = \u5C5E\u6027[uuid\uFF1A{0}]\u4E0D\u9002\u7528\u4E8E\u4EFB\u4F55\u865A\u62DFID

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:325
# args: 
retire\ policy\ must\ be\ deleted\ before\ pull\ the\ project\ out\ of\ Retired\ state = \u5728\u5C06\u9879\u76EE\u4ECE\u5DF2\u505C\u7528\u72B6\u6001\u62C9\u51FA\u4E4B\u524D\uFF0C\u5FC5\u987B\u5220\u9664\u505C\u7528\u7B56\u7565

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:337
# args: state
login\ is\ prohibited\ because\ the\ project\ is\ in\ state\ of\ %s = \u7981\u6B62\u767B\u5F55\uFF0C\u56E0\u4E3A\u9879\u76EE\u5904\u4E8E{0}\u72B6\u6001

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:347
# args: name
no\ quota[name\:%s]\ found = \u672A\u627E\u5230\u914D\u989D[\u540D\u79F0\uFF1A{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:371
# args: msg.getUuid()
organization[uuid\:%s]\ is\ a\ Company\ that\ cannot\ have\ parent\ organization = \u7EC4\u7EC7[uuid\uFF1A{0}]\u662F\u4E0D\u80FD\u6709\u4E0A\u7EA7\u7EC4\u7EC7\u7684\u516C\u53F8

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:381
# args: msg.getUuid(),msg.getParentUuid()
parent\ organization[uuid\:%s]\ cannot\ be\ a\ child\ organization[uuid\:%s]\ of\ a\ childOrganization = \u7236\u7EC4\u7EC7[uuid\uFF1A{0}]\u4E0D\u80FD\u662F\u5B50\u7EC4\u7EC7[uuid\uFF1A{1}]\u7684\u5B50\u7EC4\u7EC7

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:400
# args: msg.getName()
duplicate\ virtualID\ name[%s] = \u91CD\u590D\u7684\u7528\u6237\u540D[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:418
# args: msg.getName()
duplicate\ project\ name[%s] = \u91CD\u590D\u7684\u9879\u76EE\u540D[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:426
# args: msg.getName()
invalid\ project\ name[%s],\ an\ account\ or\ project\ with\ the\ same\ name\ exists = \u65E0\u6548\u7684\u9879\u76EE\u540D[{0}]\uFF0C\u5DF2\u6709\u8D26\u6237\u6216\u9879\u76EE\u4F7F\u7528\u4E86\u76F8\u540C\u7684\u540D\u79F0

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:432
# args: msg.getOrganizationUuid()
IAM2OrganizationVO[uuid\:%s]\ is\ not\ exists = Iam2OrganizationVO[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:515
# args: refVO.getProjectUuid(),refVO.getOrganizationUuid()
The\ project[uuid\=%s]\ has\ been\ attached\ to\ the\ organization[uuid\=%s] = \u9879\u76EE[uuid={0}]\u5DF2\u9644\u52A0\u5230\u7EC4\u7EC7[uuid={1}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:557
# args: msg.getProjectUuid()
The\ project[uuid\=%s]\ is\ not\ attached = \u672A\u9644\u52A0\u9879\u76EE[uuid={0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:568
# args: uuids
organizations%s\ are\ company\ that\ cannot\ be\ children\ of\ other\ organization = \u7EC4\u7EC7{0}\u7C7B\u578B\u662F\u5B50\u516C\u53F8\uFF0C\u4E0D\u80FD\u8BBE\u7F6E\u4E3A\u5176\u5B83\u7EC4\u7EC7\u7684\u90E8\u95E8

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:582
# args: msg.getVirtualIDUuid(),msg.getProjectUuid()
virtual\ id[uuid\:\ %s]\ is\ not\ in\ project[uuid\:\ %s] = \u865A\u62DFID[uuid\uFF1A{0}]\u4E0D\u5728\u9879\u76EE[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:679
# args: staleVirtualIDs
can\ not\ operate\ stale\ virtual\ ids\:\ %s = \u65E0\u6CD5\u64CD\u4F5C\u65E0\u6548\u7684\u7528\u6237: {0}

# at: src/main/java/org/zstack/iam2/attribute/SystemAttributes.java:69
# args: 
attribute[name\:%s]\ is\ a\ system\ attribute\ that\ cannot\ be\ updated = \u5C5E\u6027[\u540D\u79F0\uFF1A{0}]\u662F\u4E00\u4E2A\u7CFB\u7EDF\u5C5E\u6027\uFF0C\u65E0\u6CD5\u88AB\u66F4\u65B0

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:38
# args: inv.getValue()
virtual\ ID[uuid\:%s]\ not\ existing = \u7528\u6237[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:45
# args: inv.getValue(),((IAM2OrganizationAttributeInventory) inv).getOrganizationUuid()
virtual\ ID[uuid\:%s]\ not\ in\ organization[uuid\:%s] = \u865A\u62DFID[uuid\uFF1A{0}]\u4E0D\u5728\u7EC4\u7EC7\u4E2D[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:50
# args: oinv.getOrganizationUuid()
organization[uuid\:%s]\ already\ has\ a\ supervisor = \u7EC4\u7EC7[uuid:{0}]\u5DF2\u7ECF\u8BBE\u7F6E\u4E86\u8D1F\u8D23\u4EBA

# at: src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java:58
# args: pinv.getUuid(),pinv.getName()
the\ project[uuid\:%s,\ name\:%s]\ already\ has\ a\ login\ expired\ strategy = \u9879\u76EE[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5DF2\u6709\u767B\u5F55\u8FC7\u671F\u7B56\u7565

# at: src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java:109
# args: projectUuid,ProjectState.Enabled.toString()
IAM2ProjectVO[uuid\:%s]\ is\ not\ %s,\ state\ change\ is\ not\ allowed = Iam2ProjectVO[uuid\uFF1A{0}]\u4E0D\u662F{1}\uFF0C\u4E0D\u5141\u8BB8\u66F4\u6539\u72B6\u6001

# at: src/main/java/org/zstack/iam2/attribute/project/Retire.java:65
# args: pinv.getUuid(),pinv.getName()
the\ project[uuid\:%s,\ name\:%s]\ already\ has\ a\ retire\ policy = \u9879\u76EE[uuid:{0}, name:{1}]\u5DF2\u7ECF\u8BBE\u7F6E\u4E86\u56DE\u6536\u7B56\u7565

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:53
# args: 
invalid\ value,\ no\ 'at',\ 'after'\ or\ 'exceed'\ found = \u65E0\u6548\u7684\u503C\uFF0C\u627E\u4E0D\u5230\u5173\u952E\u5B57no 'at', 'after' or 'exceed'

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:58
# args: value
invalid\ value,\ %s = \u65E0\u6548\u7684\u503C, {0}

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:64
# args: ss[0],Arrays.asList(Means.values()).toString()
invalid\ means[%s],\ allowed\ means\ are\ %s = \u65E0\u6548\u7684\u56DE\u6536\u65B9\u6CD5[{0}]\uFF0C\u5141\u8BB8\u7684\u65B9\u6CD5\u662F{1}

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:100
# args: policyValue
invalid\ spending\ value[%s],\ it\ should\ be\ in\ format\ of\ for\ example\ 10.001 = \u65E0\u6548\u7684\u8D39\u7528[{0}], \u8D39\u7528\u683C\u5F0F\u5E94\u8BE5\u7B26\u5408\u4F8B\u5982\uFF1A10.001

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:94
# args: policyValue,Double.MAX_VALUE
invalid\ spending\ value[%s],\ spending\ value\ should\ between\ 0\ and\ %f = \u65E0\u6548\u7684\u8D39\u7528[{0}], \u8D39\u7528\u8303\u56F4\u5E94\u8BE5\u57280\u5230{1}\u4E4B\u95F4

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:87
# args: policyValue
invalid\ time[%s],\ it\ should\ be\ in\ format\ of\ for\ example\ 10m,\ 1h,\ 2d = \u65E0\u6548\u7684\u65F6\u95F4[{0}]\uFF0C\u65F6\u95F4\u683C\u5F0F\u9700\u8981\u7B26\u5408\u4F8B\u5982\uFF1A10m, 1h, 2d

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:78
# args: policyValue
invalid\ date[%s],\ it\ should\ be\ in\ format\ of\ yyyy-MM-dd\ HH\:mm\:ss = \u65E0\u6548\u7684\u65E5\u671F\uFF0C\u65E5\u671F\u683C\u5F0F\u9700\u8981\u7B26\u5408\uFF1Ayyyy-MM-dd HH:mm:ss

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:107
# args: policyValue,dateFormat.format(new Timestamp(System.currentTimeMillis()))
invalid\ date\ or\ time[%s],\ it\ cannot\ be\ before\ current\ time[%s] = \u65E0\u6548\u7684\u65E5\u671F\u6216\u65F6\u95F4\uFF0C\u56DE\u6536\u65F6\u95F4\u4E0D\u80FD\u5728\u5F53\u524D\u65F6\u95F4\u4E4B\u524D[{1}]

# at: src/main/java/org/zstack/iam2/attribute/virtualid/AbstractAdminAttribute.java:17
# args: vid,attributeName
virtual\ ID[uuid\:%s]\ already\ has\ admin\ related\ attributes,\ can\ not\ add\ %s = \u7528\u6237[uuid:{0}]\u5DF2\u7ECF\u6709\u7BA1\u7406\u5458\u5C5E\u6027\u4E86\uFF0C\u65E0\u6CD5\u7EE7\u7EED\u6DFB\u52A0\u5C5E\u6027{1}

# at: src/main/java/org/zstack/iam2/attribute/virtualid/IAM2OrganizationOperator.java:29
# args: inv.getValue(),IAM2_ORGANIZATION_OPERATION.getName()
organiztion\ ID[uuid\:%s]\ already\ has\ opoeration\ attributes,\ can\ not\ add\ %s = \u7EC4\u7EC7ID[uuid\uFF1A{0}]\u5DF2\u5177\u6709Poeration\u5C5E\u6027\uFF0C\u65E0\u6CD5\u6DFB\u52A0{1}

# at: src/main/java/org/zstack/iam2/attribute/virtualid/IAM2ProjectOperator.java:35
# args: idinv.getVirtualIDUuid()
virtual\ id[uuid\:%s]\ already\ has\ a\ project\ operator\ attribute = \u865A\u62DFID[uuid\uFF1A{0}]\u5DF2\u5177\u6709\u9879\u76EE\u8FD0\u7B97\u7B26\u5C5E\u6027

# at: src/main/java/org/zstack/iam2/attribute/virtualid/PlatformAdminZoneRelation.java:36
# args: inv.getValue()
cannot\ find\ zone[uuid\:%s] = \u627E\u4E0D\u5230\u533A\u57DF[uuid:{0}]

# at: src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:71
# args: inv.getValue()
project[uuid\:%s]\ already\ has\ a\ project\ admin = \u9879\u76EE[uuid:{0}]\u5DF2\u7ECF\u8BBE\u7F6E\u8FC7\u9879\u76EE\u7BA1\u7406\u5458\u4E86

# at: src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:83
# args: inv.getValue()
project[uuid\:%s]\ not\ existing = \u9879\u76EE[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/iam2/rbac/IAM2AuthorizationBackend.java:133
# args: deniedApis
the\ operations[%s]\ is\ denied = \u64CD\u4F5C[{0}]\u88AB\u62D2\u7EDD

# at: src/main/java/org/zstack/iam2/rbac/IAM2OperationTargetAPIRequestChecker.java:114
# args: 
since\ the\ project\ starts\ the\ force\ securityGroup,\ systemtag\ is\ required\ for\ VM\ operation = \u7531\u4E8E\u9879\u76EE\u542F\u52A8\u4E86Force SecurityGroup\uFF0C\u56E0\u6B64VM\u64CD\u4F5C\u9700\u8981SystemTag

# at: src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java:28
# args: session.getAccountUuid()
project\ of\ account[uuid\:%s]\ not\ exists = \u8D26\u6237\u4E3A[uuid:{0}]\u7684\u9879\u76EE\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java:37
# args: projectUuid
project[uuid\:%s]\ is\ retired,\ reject\ all\ operations = \u9879\u76EE[uuid:{0}]\u5DF2\u7ECF\u8FC7\u671F\uFF0C\u65E0\u6CD5\u64CD\u4F5C

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:107
# args: 
system\ tag\ requested.\ need\ specify\ default\ security\ group\ for\ vm\ nic\ by\ system\ tag\ L3_NETWORK_SECURITY_GROUP_uuidS_REF\ with\ format\ l3\:\:{%s}\:\:SecurityGroupUuids\:\:{%s},\ because\ force\ security\ group\ is\ enabled = \u5DF2\u8BF7\u6C42\u7CFB\u7EDF\u6807\u8BB0\u3002\u9700\u8981\u6309\u7CFB\u7EDF\u6807\u8BB0L\u4E3AVM NIC\u6307\u5B9A\u9ED8\u8BA4\u5B89\u5168\u7EC43_\u7F51\u7EDC_\u5B89\u5168_\u7EC4_uuid_\u5F15\u7528\uFF0C\u683C\u5F0F\u4E3AL3:{0}\uFF1ASecurityGroupUUIds\uFF1A{1}\uFF0C\u56E0\u4E3A\u542F\u7528\u4E86\u5F3A\u5236\u5B89\u5168\u7EC4

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:114
# args: l3Uuid,msg.getL3NetworkUuid()
the\ l3Uuid[%s]\ in\ the\ label\ is\ inconsistent\ with\ the\ l3Uuid[%s]\ in\ the\ parameter = \u6807\u7B7E\u4E2D\u7684L3uuid[{0}]\u4E0E\u53C2\u6570\u4E2D\u7684L3uuid[{1}]\u4E0D\u4E00\u81F4

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:124
# args: projectUuid
since\ force\ security\ group\ is\ enabled,\ securityGroupUuid\ in\ the\ tag\ must\ be\ in\ the\ project[%s] = \u7531\u4E8E\u542F\u7528\u4E86\u5F3A\u5236\u5B89\u5168\u7EC4\uFF0C\u56E0\u6B64\u6807\u8BB0\u4E2D\u7684SecurityGroupuuid\u5FC5\u987B\u5728\u9879\u76EE[{0}]\u4E2D

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:145
# args: msg.getL3NetworkUuid(),msg.getSecurityGroupUuid()
nics\ on\ the\ l3Network[uuid\:%s]\ are\ attached\ to\ the\ securityGroup.\ before\ you\ can\ detach\ the\ l3Network\ from\ the\ securityGroup,\ you\ need\ to\ detach\ the\ nics\ from\ the\ securityGroup. = \u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u4E0A\u7684NIC\u5DF2\u8FDE\u63A5\u5230SecurityGroup\u3002\u5728\u5C06L3Network\u4E0ESecurityGroup\u5206\u79BB\u4E4B\u524D\uFF0C\u9700\u8981\u5C06NIC\u4E0ESecurityGroup\u5206\u79BB\u3002

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:161
# args: msg.getUuid()
the\ default\ security\ group\ %s\ cannot\ be\ deleted\ by\ enabling\ the\ enforced\ security\ group\ function = \u65E0\u6CD5\u901A\u8FC7\u542F\u7528\u5F3A\u5236\u5B89\u5168\u7EC4\u529F\u80FD\u6765\u5220\u9664\u9ED8\u8BA4\u5B89\u5168\u7EC4{0}

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:165
# args: msg.getUuid()
this\ security\ group\ %s\ is\ bound\ to\ vm,\ please\ try\ again\ after\ unbinding = \u6B64\u5B89\u5168\u7EC4{0}\u5DF2\u7ED1\u5B9A\u5230VM\uFF0C\u8BF7\u5728\u89E3\u9664\u7ED1\u5B9A\u540E\u91CD\u8BD5

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:175
# args: sessionInventory.getAccountUuid(),securityGroupUuid
account[%s]\ cannot\ operation\ the\ default\ securityGroup[%s] = \u5E10\u6237[{0}]\u65E0\u6CD5\u64CD\u4F5C\u9ED8\u8BA4SecurityGroup[{1}]

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:187
# args: msg.getSession().getAccountUuid()
account[%s]\ not\ allowed\ to\ operate\ on\ default\ securityGroup = \u4E0D\u5141\u8BB8\u5E10\u6237[{0}]\u5BF9\u9ED8\u8BA4\u7684SecurityGroup\u8FDB\u884C\u64CD\u4F5C

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:241
# args: refVOS.stream().map(VmNicSecurityGroupRefVO::getVmNicUuid).collect(Collectors.joining(",")),msg.getSecurityGroupUuid()
vm's\ nic[uuid\:%s]\ only\ has\ one\ security\ group,\ can\ not\ delete\ the\ nic\ from\ security\ group[uuid\:%s] = VM\u7684NIC[uuid\uFF1A{0}]\u53EA\u6709\u4E00\u4E2A\u5B89\u5168\u7EC4\uFF0C\u65E0\u6CD5\u4ECE\u5B89\u5168\u7EC4[uuid\uFF1A{1}]\u4E2D\u5220\u9664NIC

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java:60
# args: projectUuid
can't\ find\ the\ quota\ for\ the\ security\ group\ for\ the\ corresponding\ project\ %s = \u627E\u4E0D\u5230\u5BF9\u5E94\u9879\u76EE{0}\u7684\u5B89\u5168\u7EC4\u7684\u914D\u989D

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java:64
# args: 
security\ group\ quota\ cannot\ less\ than\ 1 = \u5B89\u5168\u7EC4\u914D\u989D\u4E0D\u80FD\u5C0F\u4E8E1

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:35
# args: 
The\ iam2\ script\ function\ is\ not\ enabled. = \u672A\u542F\u7528IAM2\u811A\u672C\u51FD\u6570\u3002

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:39
# args: 
Script\ doesn't\ have\ any\ content. = \u811A\u672C\u6CA1\u6709\u4EFB\u4F55\u5185\u5BB9\u3002

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:45
# args: 
The\ amount\ of\ params\ exceeds\ the\ limit. = \u53C2\u6570\u6570\u91CF\u8D85\u8FC7\u9650\u5236\u3002

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:61
# args: 
Specified\ script\ executor\ are\ not\ supported. = \u4E0D\u652F\u6301\u6307\u5B9A\u7684\u811A\u672C\u6267\u884C\u7A0B\u5E8F\u3002

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:139
# args: 
Decode\ script\ content\ failed. = \u89E3\u7801\u811A\u672C\u5185\u5BB9\u5931\u8D25\u3002

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:147
# args: 
Script\ content\ is\ blank. = \u811A\u672C\u5185\u5BB9\u4E3A\u7A7A\u3002

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:179
# args: 
Run\ iam2\ script\ failed. = \u8FD0\u884CIAM2\u811A\u672C\u5931\u8D25\u3002

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:244
# args: 
Cannot\ read\ the\ result\ of\ the\ script\ running. = \u65E0\u6CD5\u8BFB\u53D6\u811A\u672C\u8FD0\u884C\u7684\u7ED3\u679C\u3002

# at: src/main/java/org/zstack/identity/AccountBase.java:327
# args: group.getUuid(),msg.getAccountUuid()
the\ user\ group[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = \u8FD9\u4E2A\u7528\u6237\u7EC4[uuid:{0}]\u4E0D\u5C5E\u4E8E\u5F53\u524D\u8D26\u6237[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:528
# args: self.getUuid(),ruuid
the\ account[uuid\:\ %s]\ doesn't\ have\ a\ resource[uuid\:\ %s] = \u8D26\u6237[uuid: {0}]\u6CA1\u6709\u8D44\u6E90[uuid: {1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:590
# args: user.getUuid(),msg.getAccountUuid()
the\ user[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = \u5F53\u524D\u7528\u6237[uuid:{0}]\u4E0D\u5C5E\u4E8E\u5F53\u524D\u8D26\u6237[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:595
# args: user.getUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ user[uuid\:%s] = \u65E7\u5BC6\u7801\u4E0D\u7B49\u4E8E\u539F\u59CB\u5BC6\u7801\uFF0C\u65E0\u6CD5\u66F4\u65B0\u7528\u6237[uuid\uFF1A{0}]\u7684\u5BC6\u7801

# at: src/main/java/org/zstack/identity/AccountInterceptor.java:55
# args: 
wrong\ password = \u5BC6\u7801\u9519\u8BEF

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1660
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ effect\ field.\ Invalid\ statement[%s] = \u58F0\u660E\u5FC5\u987B\u542B\u6709'effect'\u5B57\u6BB5\u3002 \u65E0\u6548\u7684\u58F0\u660E

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1663
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ action\ field.\ Invalid\ statement[%s] = \u58F0\u660E\u5FC5\u987B\u542B\u6709'action'\u5B57\u6BB5\u3002 \u65E0\u6548\u7684\u58F0\u660E

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1666
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ a\ non-empty\ action\ field.\ Invalid\ statement[%s] = \u58F0\u660E\u5FC5\u987B\u542B\u6709\u4E0D\u4E3A\u7A7A\u7684'action'\u5B57\u6BB5\u3002 \u65E0\u6548\u7684\u58F0\u660E

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:175
# args: resourceUuid
cannot\ find\ the\ resource[uuid\:%s];\ wrong\ resourceUuid\ or\ the\ resource\ is\ admin\ resource = \u65E0\u6CD5\u627E\u5230\u8D44\u6E90[uuid:{0}]: \u9519\u8BEF\u7684\u8D44\u6E90uuid\u6216\u8005\u8D44\u6E90\u662F\u7BA1\u7406\u5458\u8D44\u6E90

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:405
# args: msg.getUserUuid()
the\ user\ specified\ by\ the\ userUuid[%s]\ does\ not\ belong\ to\ the\ current\ account,\ and\ the\ current\ account\ is\ not\ an\ admin\ account,\ so\ it\ has\ no\ permission\ to\ check\ the\ user'spermissions = \u5F53\u524D\u901A\u8FC7userUuid\u83B7\u5F97\u7684user\u4E0D\u5C5E\u4E8E\u5F53\u524D\u8D26\u6237\uFF0C\u800C\u4E14\u5F53\u524D\u8D26\u6237\u4E0D\u662F\u7BA1\u7406\u5458\u8D26\u6237

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1055
# args: accountUuid
cannot\ find\ the\ account[uuid\:%s] = \u627E\u4E0D\u5230\u8D26\u6237[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1495
# args: 
accountName\ and\ accountUuid\ cannot\ both\ be\ null,\ you\ must\ specify\ at\ least\ one = accountName\u548CaccountUuid\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A\uFF0C\u60A8\u5FC5\u987B\u5B9A\u4E49\u81F3\u5C11\u4E00\u4E2A

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1506
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ group.\ A\ group\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = \u4E0D\u80FD\u521B\u5EFA\u7528\u6237\u7EC4\uFF0C\u7528\u6237\u7EC4\u201C{0}\u201D\u5DF2\u7ECF\u5728\u8D26\u6237\u201C{0}\u201D\u4E0B\u4E86

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1516
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ user.\ A\ user\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = \u4E0D\u80FD\u521B\u5EFA\u7528\u6237\uFF0C\u7528\u6237\u201C{0}\u201D\u5DF2\u7ECF\u5728\u8D26\u6237\u201C{0}\u201D\u4E0B\u4E86

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1525
# args: msg.getName()
unable\ to\ create\ an\ account.\ An\ account\ already\ called\ %s = \u4E0D\u80FD\u521B\u5EFA\u8D26\u6237\uFF0C\u201C{0}\u201D\u5DF2\u7ECF\u88AB\u4F7F\u7528

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1532
# args: 
account\ cannot\ delete\ itself = \u8D26\u6237\u4E0D\u80FD\u5220\u9664\u81EA\u5DF1

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1538
# args: 
cannot\ delete\ builtin\ admin\ account. = \u65E0\u6CD5\u5220\u9664\u5185\u7F6E\u7BA1\u7406\u5458\u5E10\u6237\u3002

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1544
# args: 
Only\ admin\ can\ delete\ account. = \u53EA\u6709admin\u80FD\u5220\u9664\u8D26\u6237

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1552
# args: 
the\ current\ session\ is\ an\ account\ session.\ You\ need\ to\ specify\ the\ field\ 'uuid'\ of\ the\ user\ you\ want\ to\ update = \u5F53\u524D\u4F1A\u8BDD\u662F\u4E00\u4E2A\u8D26\u6237\u4F1A\u8BDD\uFF0C\u4F60\u9700\u8981\u5B9A\u4E49\u4E00\u4E2A'uuid'\u5B57\u6BB5\u6765\u6307\u5B9A\u4F60\u8981\u66F4\u65B0\u7684\u7528\u6237

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1567
# args: msg.getUuid()
your\ are\ login\ as\ a\ user,\ you\ cannot\ another\ user[uuid\:%s] = \u4F60\u5DF2\u7ECF\u767B\u5F55\u4E3A\u4E00\u4E2A\u7528\u6237\uFF0C\u4E0D\u80FD\u6210\u4E3A\u53E6\u4E00\u4E2A\u7528\u6237[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1575
# args: 
all\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = all\u53C2\u6570\u88AB\u8BBE\u4E3Afalse\u65F6\uFF0C\u8D26\u6237uuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1583
# args: 
toPublic\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = toPublic\u53C2\u6570\u88AB\u8BBE\u4E3Afalse\u65F6\uFF0C\u8D26\u6237uuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1632
# args: policy.getName(),policy.getUuid(),msg.getSession().getAccountUuid()
policy[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = \u7B56\u7565[\u540D\u79F0: {0}, uuid: {1}]\u4E0D\u5C5E\u4E8E\u8D26\u6237[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1646
# args: user.getName(),user.getUuid(),msg.getSession().getAccountUuid()
user[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = \u7528\u6237[\u540D\u79F0: {0}, uuid: {1}]\u4E0D\u5C5E\u4E8E\u8D26\u6237[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1650
# args: group.getName(),group.getUuid(),msg.getSession().getAccountUuid()
group[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = \u7528\u6237\u7EC4[\u540D\u79F0: {0}, uuid: {1}]\u4E0D\u5C5E\u4E8E\u8D26\u6237[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1691
# args: msg.getName()
unable\ to\ update\ name.\ An\ account\ already\ called\ %s = \u65E0\u6CD5\u66F4\u65B0\u540D\u79F0\u3002\u5DF2\u6709\u4E00\u4E2A\u540D\u4E3A{0}\u7684\u5E10\u6237

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1702
# args: msg.getUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ account[uuid\:\ %s] = \u65E7\u5BC6\u7801\u4E0D\u7B49\u4E8E\u539F\u59CB\u5BC6\u7801\uFF0C\u65E0\u6CD5\u66F4\u65B0\u5E10\u6237[uuid\uFF1A{0}]\u7684\u5BC6\u7801

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1707
# args: 
the\ name\ of\ admin\ account\ cannot\ be\ updated = \u4E0D\u80FD\u66F4\u6539\u7BA1\u7406\u5458\u8D26\u6237\u540D\u79F0

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1713
# args: 
only\ admin\ account\ can\ update\ it's\ password = \u53EA\u6709\u7BA1\u7406\u5458\u5E10\u6237\u624D\u80FD\u66F4\u65B0\u5176\u5BC6\u7801

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1720
# args: account.getUuid(),account.getName(),msg.getUuid()
account[uuid\:\ %s,\ name\:\ %s]\ is\ a\ normal\ account,\ it\ cannot\ reset\ the\ password\ of\ another\ account[uuid\:\ %s] = [uuid: {0}, \u540D\u79F0: {1}]\u662F\u4E00\u4E2A\u666E\u901A\u8D26\u6237\uFF0C\u4E0D\u80FD\u88AB\u5176\u4ED6\u666E\u901A\u8D26\u6237\u91CD\u8BBE\u5BC6\u7801

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1731
# args: msg.getName(),msg.getIdentityUuid()
cannot\ find\ Quota[name\:\ %s]\ for\ the\ account[uuid\:\ %s] = \u65E0\u6CD5\u4E3A\u5F53\u524D\u8D26\u6237[uuid: {1}]\u627E\u5230Quota

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1738
# args: quota.getIdentityUuid(),quota.getIdentityType()
can\ not\ find\ quota\ update\ checker\ for\ quota[uuid\:%s,\ type\:%s] = \u627E\u4E0D\u5230\u914D\u989D[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]\u7684\u914D\u989D\u66F4\u65B0\u68C0\u67E5\u5668

# at: src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java:32
# args: quota.getName(),quota.getIdentityUuid(),updatedValue
the\ quota[name\:%s]\ of\ account[uuid\:%s]\ can\ not\ be\ %d = \u5E10\u6237[uuid\uFF1A{1}]\u7684\u914D\u989D[\u540D\u79F0\uFF1A{0}]\u4E0D\u80FD\u4E3A{2}

# at: src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java:54
# args: accountUuid,quotaName,used,updatedValue
the\ account[uuid\:%s]\ used\ [name\:%s,\ usedValue\:%s]\ exceeds\ request\ quota\:\ %d = \u5E10\u6237[uuid\uFF1A{0}]\u4F7F\u7528\u7684[\u540D\u79F0\uFF1A{1}\uFF0CUsedValue\uFF1A{2}]\u8D85\u8FC7\u4E86\u8BF7\u6C42\u914D\u989D\uFF1A{3}

# at: src/main/java/org/zstack/identity/login/LoginManagerImpl.java:46
# args: loginType
unsupported\ login\ type\ %s = \u4E0D\u652F\u6301\u7684\u767B\u5F55\u7C7B\u578B{0}

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:180
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),uuid,resourceType.getSimpleName()
permission\ denied,\ the\ account[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ resource[uuid\:%s,\ type\:%s] = \u64CD\u4F5C\u9519\u8BEF\uFF0C\u8D26\u6237[uuid:{0}]\u4E0D\u662F\u8D44\u6E90[uuid:{1}, type:{2}]\u7684\u6240\u6709\u8005

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:228
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),uuid,type
permission\ denied,\ the\ account[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ tagged\ resource[uuid\:%s,\ type\:%s] = \u6743\u9650\u88AB\u62D2\u7EDD\uFF0C\u5E10\u6237[uuid\uFF1A{0}]\u4E0D\u662F\u5DF2\u6807\u8BB0\u8D44\u6E90[uuid\uFF1A{1}\uFF0C\u7C7B\u578B\uFF1A{2}]\u7684\u6240\u6709\u8005

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:251
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),resourceWithNoAccess,resourceType.getSimpleName()
the\ account[uuid\:%s]\ has\ no\ access\ to\ the\ resources[uuid\:%s,\ type\:%s] = \u8D26\u6237[uuid:{0}]\u65E0\u6CD5\u4F7F\u7528\u8D44\u6E90[uuid:{1}, type:{2}]

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:80
# args: rbacEntity.getApiMessage().getClass().getName()
operation[API\:%s]\ is\ denied\ by\ default,\ please\ contact\ admin\ to\ correct\ it = \u9ED8\u8BA4\u60C5\u51B5\u4E0B\u62D2\u7EDD\u64CD\u4F5C[API\uFF1A{0}]\uFF0C\u8BF7\u4E0E\u7BA1\u7406\u5458\u8054\u7CFB\u4EE5\u66F4\u6B63

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:187
# args: p.getName(),p.getUuid()
the\ operation\ is\ denied\ by\ the\ policy[name\:%s\ uuid\:%s] = \u64CD\u4F5C\u88AB\u7B56\u7565[\u540D\u79F0\uFF1A{0}uuid\uFF1A{1}]\u62D2\u7EDD

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:200
# args: p.getName(),p.getUuid(),fname
the\ operation\ is\ denied\ by\ the\ policy[name\:%s,\ uuid\:%s],\ field[%s]\ is\ not\ permitted\ to\ set = \u7B56\u7565[\u540D\u79F0\uFF1A{0}\uFF0Cuuid\uFF1A{1}]\u62D2\u7EDD\u8BE5\u64CD\u4F5C\uFF0C\u4E0D\u5141\u8BB8\u8BBE\u7F6E\u5B57\u6BB5[{2}]

# at: src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java:92
# args: 
cannot\ update\ a\ system\ or\ predefined\ role = \u65E0\u6CD5\u66F4\u65B0\u7CFB\u7EDF\u89D2\u8272\u6216\u9884\u5B9A\u4E49\u89D2\u8272

# at: src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java:108
# args: 
cannot\ delete\ a\ system\ or\ predefined\ role = \u65E0\u6CD5\u5220\u9664\u7CFB\u7EDF\u89D2\u8272\u6216\u9884\u5B9A\u4E49\u89D2\u8272

# at: src/main/java/org/zstack/image/AddImageLongJob.java:187
# args: 
Failed\ because\ management\ node\ restarted. = \u5931\u8D25\uFF0C\u56E0\u4E3A\u7BA1\u7406\u8282\u70B9\u5DF2\u91CD\u65B0\u542F\u52A8\u3002

# at: src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java:35
# args: backupStorageUuid,bsStatus
the\ backup\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = \u955C\u50CF\u670D\u52A1\u5668[uuid:{0}]\u4E0D\u662FConnected\u72B6\u6001\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:101
# args: 
The\ aarch64\ architecture\ does\ not\ support\ legacy. = AARCH64\u4F53\u7CFB\u7ED3\u6784\u4E0D\u652F\u6301\u65E7\u7248\u3002

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:108
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = \u4E91\u76D8[uuid:{0}]\u672AReady\uFF0C\u5B83\u73B0\u5728\u4E3A{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:112
# args: vol.getUuid(),vol.getState()
volume[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = \u4E91\u76D8[uuid:{0}]\u672AEnabled\uFF0C\u5B83\u73B0\u5728\u4E3A{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:119
# args: vsvo.getUuid(),vsvo.getStatus()
volume\ snapshot[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = \u5377\u5FEB\u7167[uuid\uFF1A{0}]\u672A\u5C31\u7EEA\uFF0C\u5B83\u662F{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:123
# args: vsvo.getUuid(),vsvo.getState()
volume\ snapshot[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = \u5377\u5FEB\u7167[uuid\uFF1A{0}]\u672A\u542F\u7528\uFF0C\u5B83\u662F{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:142
# args: 
ISO\ cannot\ be\ used\ as\ system\ image = ISO\u4E0D\u80FD\u88AB\u4F5C\u4E3A\u4E00\u4E2A\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:148
# args: msg.getFormat()
unknown\ format[%s] = \u672A\u77E5\u683C\u5F0F[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:152
# args: msg.getType()
unsupported\ image\ type[%s] = \u4E0D\u652F\u6301\u7684\u955C\u50CF\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:169
# args: msg.getBackupStorageUuids(),BackupStorageStatus.Connected,BackupStorageState.Enabled
no\ backup\ storage\ specified\ in\ uuids%s\ is\ available\ for\ adding\ this\ image;\ they\ are\ not\ in\ status\ %s\ or\ not\ in\ state\ %s,\ or\ the\ uuid\ is\ invalid\ backup\ storage\ uuid = \u955C\u50CF\u670D\u52A1\u5668uuids{0}\u4E0D\u6EE1\u8DB3\u6DFB\u52A0\u955C\u50CF\u7684\u6761\u4EF6\uFF1B\u5B83\u4EEC\u7684\u72B6\u6001\u4E0D\u540C\u65F6\u6EE1\u8DB3{1}\u548C{2},\u4EA6\u6216\u8005\u662F\u65E0\u6548\u7684uuid

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:180
# args: 
url\ must\ starts\ with\ 'file\:///',\ 'http\://',\ 'https\://'\uFF0C\ 'ftp\://',\ 'sftp\://'\ or\ '/' = url\u5FC5\u987B\u4EE5\u4E0B\u5217\u683C\u5F0F\u5F00\u5934'file:///', 'http://', 'https://'\uFF0C 'ftp://', 'sftp://' or '/'

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:191
# args: path
absolute\ path\ must\ be\ used = \u5FC5\u987B\u4F7F\u7528\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:214
# args: path,blackList.value()
image\ path\ [%s]\ is\ in\ black\ list\ %s = \u955C\u50CF\u8DEF\u5F84[{0}]\u5728\u9ED1\u540D\u5355{1}\u4E2D

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:223
# args: 
all\ images\ on\ this\ server\ cannot\ be\ used = \u65E0\u6CD5\u4F7F\u7528\u6B64\u670D\u52A1\u5668\u4E0A\u7684\u6240\u6709\u955C\u50CF

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:228
# args: whiteList.value()
image\ path\ is\ not\ in\ white\ list\:\ %s = \u955C\u50CF\u8DEF\u5F84\u4E0D\u5728\u767D\u540D\u5355\u4E2D\uFF1A{0}

# at: src/main/java/org/zstack/image/ImageBase.java:214
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ any\ backup\ storage = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u4E0D\u5728\u4EFB\u4E00\u955C\u50CF\u670D\u52A1\u5668\u4E0A

# at: src/main/java/org/zstack/image/ImageBase.java:224
# args: self.getUuid(),self.getName()
No\ connected\ backup\ storage\ found\ for\ image[uuid\:%s,\ name\:%s] = \u5728\u6240\u6709 Connected \u72B6\u6001\u7684\u955C\u50CF\u670D\u52A1\u5668\u4E0A\u90FD\u627E\u4E0D\u5230\u955C\u50CF[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/image/ImageBase.java:416
# args: msg.getImageUuid(),JSONObjectUtil.toJsonString(errors)
detach\ iso[uuid\=%s]\ from\ vm\ failed,\ errors\ are\ %s = \u4ECEVM\u5206\u79BBISO[uuid={0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u4E3A{1}

# at: src/main/java/org/zstack/image/ImageBase.java:782
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ the\ backup\ storage[uuid\:%s] = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u4E0D\u5728\u955C\u50CF\u670D\u52A1\u5668[uuid:{2}]\u4E0A

# at: src/main/java/org/zstack/image/ImageBase.java:724
# args: self.getUuid(),self.getName(),ref.getStatus(),bsUuid
the\ image[uuid\:%s,\ name\:%s]'s\ status[%s]\ is\ not\ Deleted\ on\ the\ backup\ storage[uuid\:%s] = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u7684\u72B6\u6001[{2}]\u5728\u955C\u50CF\u670D\u52A1\u5668[uuid:{3}]\u4E0A\u4E0D\u662FDeleled

# at: src/main/java/org/zstack/image/ImageBase.java:766
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ any\ backup\ storage = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u672A\u5728\u4EFB\u4E00\u955C\u50CF\u670D\u52A1\u5668\u4E0A\u88AB\u5220\u9664

# at: src/main/java/org/zstack/image/ImageBase.java:787
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ the\ backup\ storage[uuid\:%s] = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u672A\u5728\u955C\u50CF\u670D\u52A1\u5668[uuid:{2}]\u4E0A\u88AB\u5220\u9664

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:812
# args: bootModeCount
only\ one\ bootMode\ system\ tag\ is\ allowed,\ but\ %d\ got = \u53EA\u5141\u8BB8\u4E00\u4E2ABootmode\u7CFB\u7EDF\u6807\u8BB0\uFF0C\u4F46{0}\u83B7\u5F97\u4E86

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:830
# args: bootMode,systemTag
[%s]\ specified\ in\ system\ tag\ [%s]\ is\ not\ a\ valid\ boot\ mode = \u7CFB\u7EDF\u6807\u8BB0[{1}]\u4E2D\u6307\u5B9A\u7684[{0}]\u4E0D\u662F\u6709\u6548\u7684\u542F\u52A8\u6A21\u5F0F

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1455
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids%s,\ list\ errors\ are\:\ %s = \u4E0D\u80FD\u6839\u636E[uuids:{0}]\u5206\u914D\u955C\u50CF\u670D\u52A1\u5668\uFF0C\u9519\u8BEF\u6E05\u5355\u4E3A: {1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1581
# args: rootVolumeUuid
failed\ to\ create\ image\ from\ root\ volume[uuid\:%s]\ on\ all\ backup\ storage,\ see\ cause\ for\ one\ of\ errors = \u5728\u6240\u6709\u955C\u50CF\u670D\u52A1\u5668\u4E0A\u4ECE\u4E91\u76D8[uuid:{0}]\u521B\u5EFA\u955C\u50CF\u5931\u8D25\uFF0C\u67E5\u770B\u9519\u8BEF\u539F\u56E0

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1809
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
failed\ to\ allocate\ all\ backup\ storage[uuid\:%s],\ a\ list\ of\ error\:\ %s = \u955C\u50CF\u670D\u52A1\u5668[uuid:{0}]\u5206\u914D\u5931\u8D25\uFF0C\u9519\u8BEF\u6E05\u5355:{1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1779
# args: 
cannot\ find\ proper\ backup\ storage = \u627E\u4E0D\u5230\u9002\u5F53\u7684\u5907\u4EFD\u5B58\u50A8

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1922
# args: volumeUuid,msgData.getBackupStorageUuids()
failed\ to\ create\ data\ volume\ template\ from\ volume[uuid\:%s]\ on\ all\ backup\ storage%s.\ See\ cause\ for\ one\ of\ errors = \u5728\u6240\u6709\u955C\u50CF\u670D\u52A1\u5668[uuid:{1}]\u4E0A\u521B\u5EFA\u4E91\u76D8[uuid:{0}]\u7684\u4E91\u76D8\u6A21\u7248\u5931\u8D25\uFF0C\u67E5\u770B\u9519\u8BEF\u539F\u56E0

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1999
# args: imageUuid
image[uuid\:%s]\ is\ not\ on\ creating,\ please\ wait\ for\ it\ to\ cancel\ itself. = \u955C\u50CF[uuid\uFF1A{0}]\u672A\u5904\u4E8E\u521B\u5EFA\u72B6\u6001\uFF0C\u8BF7\u7B49\u5F85\u5176\u81EA\u884C\u53D6\u6D88\u3002

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:2005
# args: volumeUuid
volume[uuid\:%s]\ has\ been\ deleted.\ no\ need\ to\ cancel = \u5377[uuid\uFF1A{0}]\u5DF2\u5220\u9664\u3002\u4E0D\u9700\u8981\u53D6\u6D88\u3002

# at: src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java:48
# args: 
Failed\ to\ set\ security\ level,\ because\ security\ level\ is\ disabled. = \u8BBE\u7F6E\u5BC6\u7EA7\u5931\u8D25\uFF0C\u56E0\u4E3A\u5BC6\u7EA7\u529F\u80FD\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java:58
# args: msg.getSecurityLevel(),Arrays.stream(SecurityLevel.values()).map(SecurityLevel::getCode).collect(Collectors.toList())
Unknown\ security\ level\ code[%s],\ supported\ values\ are\ %s = \u672A\u77E5\u7684\u5BC6\u7EA7[{0}]\uFF0C\u652F\u6301\u7684\u503C\u6709[{1}]

# at: src/main/java/org/zstack/image/UploadImageTracker.java:197
# args: 
upload\ session\ expired = \u4E0A\u4F20session\u5931\u6548\u4E86

# at: src/main/java/org/zstack/imagereplicator/ImageReplicatorImpl.java:366
# args: targetBsUuid
target\ backup\ storage[uuid\:%s]\ became\ unavailable = \u76EE\u6807\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u53D8\u5F97\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:30
# args: String.join(",", msg.getBackupStorageUuids()),msg.getReplicationGroupUuid()
One\ or\ more\ backup\ storage[uuids\:%s]\ has\ been\ added\ to\ replication\ group[uuid\:%s] = \u5DF2\u5C06\u4E00\u4E2A\u6216\u591A\u4E2A\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u6DFB\u52A0\u5230\u590D\u5236\u7EC4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:41
# args: bsUuid
Backup\ storage[uuids\:%s]\ is\ not\ of\ type\ ImageStore = \u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u4E0D\u5C5E\u4E8EImageStore\u7C7B\u578B

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:51
# args: bsUuid
Backup\ storage[uuids\:%s]\ is\ not\ attached\ to\ any\ Zone = \u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55\u533A\u57DF

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:65
# args: l3NetworkUuid
Network\ [uuid\:\ %s]\ does't\ not\ have\ IPsec\ service = \u7F51\u7EDC[uuid: {0}]\u6CA1\u6709IPsec\u670D\u52A1

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:74
# args: rcidr
the\ remote\ CIDR[%s]\ is\ same\ to\ existed\ cidrs = \u8FDC\u7A0BCIDR[{0}]\u4E0E\u73B0\u6709\u7684CIDR\u76F8\u540C

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:86
# args: rcidr,tempCidr
the\ remote\ CIDR[%s]\ and\ remote\ CIDR[%s]\ are\ overlaped = \u8FDC\u7A0B\u7684CIDR[{0}]\u548C\u8FDC\u7AEFCIDR[{1}]\u5B58\u5728\u8986\u76D6

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:109
# args: lcidr,tempCidr
the\ CIDR[%s]\ of\ local\ router\ and\ remote\ CIDR[%s]\ are\ overlaped = \u672C\u5730\u8DEF\u7531\u7684CIDR[{0}]\u548C\u8FDC\u7AEFCIDR\u5B58\u5728\u8986\u76D6

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:122
# args: 
all\ networks\ in\ same\ IPsecConnection\ should\ be\ same\ type = \u5728\u76F8\u540C\u7684IPsec\u8FDE\u63A5\u4E2D\u7684\u6240\u6709\u8FDE\u63A5\u5E94\u8BE5\u662F\u76F8\u540C\u7C7B\u578B

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:128
# args: L3NetworkConstant.L3_BASIC_NETWORK_TYPE
IPsecConnection\ can\ ONLY\ have\ 1\ network\ for\ %s = IPsec\u8FDE\u63A5\u53EA\u80FD\u6709\u4E00\u4E2A\u7F51\u7EDC\u670D\u52A1

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:140
# args: l3Uuid
L3Network\ [uuid\:\ %s]\ has\ not\ been\ attached\ to\ vpc\ router = \u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u8FD8\u6CA1\u6709\u7ED1\u5B9AVPC\u8DEF\u7531

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:162
# args: vrUuids.toArray()[0]
there\ is\ no\ master\ vpc\ for\ ha\ group\ %s = \u9AD8\u53EF\u7528\u6027\u7EC4{0}\u6CA1\u6709\u4E3BVPC

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:159
# args: 
all\ networks\ in\ same\ IPsecConnection\ must\ be\ attached\ to\ same\ VPC\ router = \u5728\u76F8\u540C\u7684IPsec\u8FDE\u63A5\u4E2D\u7684\u6240\u6709\u7F51\u7EDC\u5FC5\u987B\u7ED1\u5B9A\u5728\u76F8\u540C\u7684VPC\u8DEF\u7531

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:172
# args: masterUuid
there\ is\ a\ vpc[%s]\ using\ old\ ipsec\ plugin,\ upgrade\ it\ to\ create\ ipsec = \u5B58\u5728\u4F7F\u7528\u65E7IPSec\u63D2\u4EF6\u7684VPC[{0}]\uFF0C\u8BF7\u5347\u7EA7\u8BE5\u63D2\u4EF6\u4EE5\u521B\u5EFAIPSec

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:185
# args: tuples.get(0).get(0, String.class),tuples.get(0).get(1, String.class)
there\ already\ have\ ipsec\ connection[uuid\:%s,\ name\:%s]\ with\ the\ same\ vrouter\ and\ peerAddress = \u8FD9\u91CC\u5DF2\u7ECF\u6709\u76F8\u540C\u4E91\u8DEF\u7531\u548C\u5BF9\u7AEF\u5730\u5740\u7684IPsec\u8FDE\u63A5[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:209
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ has\ been\ used\ for\ %s = \u865A\u62DFIP[uuid:{0}]\u5DF2\u7ECF\u7528\u4F5C\u7F51\u7EDC\u670D\u52A1 {1}

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:214
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ cannot\ be\ the\ same\ to\ the\ VIP\ address = \u5BF9\u7AEF\u5730\u5740[{0}]\u4E0D\u80FD\u548C\u865A\u62DFIP\u5730\u5740\u76F8\u540C

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:218
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ is\ not\ an\ IPv4\ address = \u5BF9\u7AEF\u5730\u5740[{0}]\u4E0D\u662F\u4E00\u4E2AIPv4\u5730\u5740

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:230
# args: 
the\ authKey\ cannot\ contain\ white\ space\ and\ special\ characters\ of\ '\"`\\ = \u9A8C\u8BC1\u7801\u4E0D\u80FD\u5305\u542B\u7A7A\u683C\u548C\u4EE5\u4E0B\u5B57\u7B26:'\"`\\

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:249
# args: vipVO.getIp()
Ipsec\ VIP\ [%s]\ cannot\ be\ the\ first\ or\ the\ last\ IP\ of\ the\ CIDR\ with\ the\ public\ address\ pool\ type = IPSec VIP[{0}]\u4E0D\u80FD\u662F\u5177\u6709\u516C\u7528\u5730\u5740\u6C60\u7C7B\u578B\u7684CIDR\u7684\u7B2C\u4E00\u4E2A\u6216\u6700\u540E\u4E00\u4E2AIP

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:281
# args: 
must\ include\ l3\ networks\ in\ APIAttachL3NetworksToIPsecConnectionMsg = \u53C2\u6570\u4E2D\u7F3A\u5C11\u4E09\u5C42\u7F51\u7EDC\u7684uuid

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:288
# args: l3NetworkUuid
L3\ network\ [%s]\ is\ not\ vpc\ network,\ can\ not\ be\ attached\ or\ detached\ to\ ipsec = \u4E09\u5C42\u7F51\u7EDC[{0}]\u4E0D\u662FVPC\u7F51\u7EDC\uFF0C\u4E0D\u80FD\u7ED1\u5B9A\u6216\u89E3\u7ED1IPsec

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:269
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ can\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s]twice = \u4E09\u5C42\u7F51\u7EDC[{0}]\u4E0D\u80FD\u7ED1\u5B9AIPsec[uuid :{1}]\u4E24\u6B21

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:292
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ is\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s] = \u4E09\u5C42\u7F51\u7EDC[{0}]\u4E0D\u80FD\u7ED1\u5B9AIPsec[uuid :{1}]

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:302
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ already\ in\ the\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = CIDR[{0}]\u5DF2\u7ECF\u5728IPsec[uuid :{1}]\u7684CIDR\u4E2D

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:316
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ not\ in\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = CIDR[{0}]\u6CA1\u6709\u5728IPsec[uuid :{1}]\u7684CIDR\u4E2D

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:324
# args: msg.getUuid()
can\ not\ change\ state\ because\ ipsec\ [uuid\:%s]\ status\ is\ not\ ready = \u4E0D\u80FD\u4FEE\u6539IPsec\u7684\u72B6\u6001\uFF0C\u56E0\u4E3AIPsec\u7684\u72B6\u6001\u6CA1\u6709\u51C6\u5907

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:330
# args: msg.getUuid()
could\ not\ reconnect\ this\ ipsec\ [uuid\:%s],\ please\ upgrade\ ipsec\ version = \u65E0\u6CD5\u91CD\u65B0\u8FDE\u63A5\u6B64IPSec[uuid\uFF1A{0}]\uFF0C\u8BF7\u5347\u7EA7IPSec\u7248\u672C

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:133
# args: msg.getIPsecConnectionUuid()
cannot\ find\ the\ IPsecconnection[uuid\:%s],\ it\ may\ have\ been\ deleted = \u672A\u627E\u5230IPsec\u8FDE\u63A5[uuid:{0}],\u5B83\u53EF\u80FD\u4F1A\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:466
# args: Long.toString(range2.getStart()),Long.toString(range2.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),msg.getVipUuid()
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ UDP = \u5F53\u524D\u7684\u7AEF\u53E3\u8303\u56F4\u4EE5UDP\u4F7F\u7528\u7684\u7AEF\u53E3\u8303\u56F4\u51B2\u7A81\u4E86

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:504
# args: cidr,l3Inv.getUuid(),uuid,rCidr
cidr[%s]\ of\ attached\ L3Network\ [uuid\:%s]\ is\ overlapped\ with\ ipsec\ [uuid\:%s]\ remote\ cidr[%s] = \u5DF2\u7ED1\u5B9A\u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u7684CIDR\u4E0EIPSec[uuid:{2}]\u8FDC\u7A0BCIDR\u5B58\u5728\u91CD\u53E0

# at: src/main/java/org/zstack/ipsec/vyos/VyosCreateIPsecFlow.java:69
# args: errorCode.getDescription()
create\ ipsec\ to\ ha\ route\ failed,\ because\ %s = \u521B\u5EFAIPSec\u5230HA\u8DEF\u7531\u5931\u8D25\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosDeleteIPsecFlow.java:55
# args: errorCode.getDescription()
delete\ ipsec\ from\ ha\ group\ failed\ because\ %s = \u4ECEHA\u7EC4\u4E2D\u5220\u9664IPSec\u5931\u8D25\uFF0C\u539F\u56E0\u662F{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:178
# args: rcidr,cidr
the\ remoteCidr[%s]\ is\ overlaped\ with\ VirtualRouter\ interface\ cidr[%s] = RemoteCidR[{0}]\u4E0EVirtualRouter\u63A5\u53E3CIDR[{1}]\u91CD\u53E0

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:293
# args: 
vyos\ doesn't\ support\ aes-192\ as\ IkeEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos\u4E0D\u652F\u6301aes-192\u4F5C\u4E3A\u5BC6\u94A5\u4EA4\u6362\u52A0\u5BC6\u7B97\u6CD5\uFF0C\u53EF\u7528\u9009\u62E9\u4E3Aaes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:299
# args: 
vyos\ doesn't\ support\ aes-192\ as\ PolicyEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos\u4E0D\u652F\u6301aes-192\u4F5C\u4E3A\u52A0\u5BC6\u7B97\u6CD5\u534F\u8BAE\uFF0C\u53EF\u7528\u9009\u62E9\u4E3Aaes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:305
# args: msg.getIkeDhGroup()
vyos\ doesn't\ support\ %d\ as\ Ike\ DhGroup\  = vyos\u4E0D\u652F\u6301[{0}]\u4F5C\u4E3AIke DhGroup

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:788
# args: errorCode.getDescription()
sync\ to\ ha\ group\ failed,\ because\:%s = \u4E0E\u9AD8\u53EF\u7528\u6027\u7EC4\u540C\u6B65\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:675
# args: errorCode.getDescription()
apply\ to\ ha\ group\ failed,\ because\ %s = \u5E94\u7528\u5230HA\u7EC4\u5931\u8D25\uFF0C\u539F\u56E0\u662F{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:768
# args: vrUuid
update\ ipsec\ version\ failed,\ because\:vpc[%s]\ not\ exist = \u66F4\u65B0IPSec\u7248\u672C\u5931\u8D25\uFF0C\u56E0\u4E3A\uFF1AVPC[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/kvm/KVMApiInterceptor.java:46
# args: msg.getManagementIp()
there\ has\ been\ a\ kvm\ host\ having\ management\ ip[%s] = \u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u62E5\u6709\u7BA1\u7406\u8282\u70B9IP[{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/kvm/KVMConsoleHypervisorBackend.java:70
# args: rsp.getPort(),vm.getUuid()
unexpected\ VNC\ port\ number[%d]\ for\ VM\ [uuid\:%s] = VM[uuid\uFF1A{1}]\u7684\u610F\u5916VNC\u7AEF\u53E3\u53F7[{0}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:465
# args: self.getUuid()
host[uuid\:%s]\ has\ been\ deleted = \u7269\u7406\u673A[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/kvm/KVMHost.java:2499
# args: msg.getVmUuid(),vmState
vm[uuid\:%s]\ is\ not\ Running\ or\ Stopped,\ current\ state[%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u672A\u5904\u5728Running\u6216Stopped\u72B6\u6001, \u73B0\u5728\u72B6\u6001\u4E3A[{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:745
# args: ret.getNewVolumeInstallPath()
after\ block\ commit,\ new\ volume\ path\ still\ use\ %s = \u5757\u63D0\u4EA4\u540E\uFF0C\u65B0\u5377\u8DEF\u5F84\u4ECD\u4F7F\u7528{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:877
# args: host.getUuid(),webSsh.status
create\ connection\ to\ host[%s]\ failed,\ because\ %s = \u521B\u5EFA\u5230\u7269\u7406\u673A[{0}]\u7684\u8FDE\u63A5\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1326
# args: reply.getError()
check\ host\ capacity\ failed,\ because\:%s = \u68C0\u67E5\u7269\u7406\u673A\u5BB9\u91CF\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1337
# args: msg.getHostUuid(),rsp.getTotalMemory(),reservedSize
The\ host[uuid\:%s]'s\ available\ memory\ capacity[%s]\ is\ lower\ than\ the\ reserved\ capacity[%s] = \u7269\u7406\u673A[uuid:{0}]\u7684\u53EF\u7528\u5185\u5B58[{1}]\u5C11\u4E8E\u4FDD\u7559\u5185\u5B58[{2}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:1392
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ register\ colo\ heartbeat\ for\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u4E3AKVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u7684VM[uuid\uFF1A{0}]\u6CE8\u518CCOLO\u68C0\u6D4B\u4FE1\u53F7\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1448
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ start\ colo\ sync\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u542F\u52A8Colo Sync VM[uuid\uFF1A{0}]\uFF0C\u539F\u56E0\u662F{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1503
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ config\ secondary\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u914D\u7F6E\u8F85\u52A9\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\uFF0C\u539F\u56E0\u662F{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1535
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ config\ primary\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u914D\u7F6E\u4E3BVM[uuid\uFF1A{0}]\uFF0C\u539F\u56E0\u662F{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1576
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ get\ first\ boot\ dev\ of\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u83B7\u53D6KVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u7684VM[uuid\uFF1A{0}]\u7684\u7B2C\u4E00\u4E2A\u5F15\u5BFC\u8BBE\u5907\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1625
# args: msg.getVmInstanceUuid(),rsp.getError()
failed\ to\ get\ vm[uuid\:%s]\ device\ address,\ because\:%s = \u65E0\u6CD5\u83B7\u53D6VM[uuid\uFF1A{0}]\u8BBE\u5907\u5730\u5740\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1680
# args: msg.getHostUuid(),rsp.getError()
failed\ to\ get\ host[uuid\:%s]\ virtualizer\ info,\ because\:%s = \u65E0\u6CD5\u83B7\u53D6\u7269\u7406\u673A[uuid\uFF1A{0}]\u865A\u62DF\u5316\u7A0B\u5E8F\u4FE1\u606F\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1762
# args: ret.getError()
failed\ to\ increase\ vm\ cpu,\ error\ details\:\ %s = \u65E0\u6CD5\u589E\u52A0VM CPU\uFF0C\u9519\u8BEF\u8BE6\u7EC6\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1860
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),result.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = \u65E0\u6CD5\u8FDE\u63A5\u7269\u7406\u673A[ip:{0}, \u7528\u6237\u540D:{1}, ssh\u7AEF\u53E3:{2} ]\u505ADNS\u68C0\u67E5\uFF0C\u8BF7\u68C0\u67E5\u7528\u6237\u540D\u5BC6\u7801\u662F\u5426\u6B63\u786E\uFF1B{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1942
# args: self.getUuid(),self.getStatus()
the\ host[uuid\:%s,\ status\:%s]\ is\ not\ Connected = \u7269\u7406\u673A[uuid:{0}, \u72B6\u6001:{1}]\u4E0D\u662FConnected\u72B6\u6001

# at: src/main/java/org/zstack/kvm/KVMHost.java:2280
# args: volume.getUuid(),state
cannot\ do\ volume\ snapshot\ merge\ when\ vm[uuid\:%s]\ is\ in\ state\ of\ %s.\ The\ operation\ is\ only\ allowed\ when\ vm\ is\ Running\ or\ Stopped = \u5F53\u4E91\u4E3B\u673A[uuid:{0}]\u5904\u4E8E{1}\u72B6\u6001\u7684\u65F6\u5019\u4E0D\u80FD\u505A\u4E91\u76D8\u5FEB\u7167\u5408\u5E76\u3002\u6B64\u64CD\u4F5C\u53EA\u80FD\u5728\u4E91\u4E3B\u673A\u5904\u5728Running\u548CStopped\u72B6\u6001\u65F6\u8FDB\u884C

# at: src/main/java/org/zstack/kvm/KVMHost.java:2287
# args: KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION,libvirtVersion
live\ volume\ snapshot\ merge\ needs\ libvirt\ version\ greater\ than\ %s,\ current\ libvirt\ version\ is\ %s.\ Please\ stop\ vm\ and\ redo\ the\ operation\ or\ detach\ the\ volume\ if\ it's\ data\ volume = \u5B9E\u65F6\u4E91\u76D8\u5FEB\u7167\u5408\u5E76\u9700\u8981libvirt\u7248\u672C\u9AD8\u4E8E{0}\uFF0C\u73B0\u5728libvirt\u7248\u672C\u4E3A{1}\u3002\u8BF7\u505C\u6B62\u4E91\u4E3B\u673A\u540E\u91CD\u8BD5\u6216\u5378\u8F7D\u4E91\u76D8\uFF08\u4EC5\u5F53\u4E3A\u4E91\u76D8\u65F6\uFF09

# at: src/main/java/org/zstack/kvm/KVMHost.java:2911
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ update\ nic[vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = \u65E0\u6CD5\u66F4\u65B0KVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u7684NIC[VM\uFF1A{0}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2963
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = \u5728\u7269\u7406\u673A[uuid:{2},IP:{3}]\u4E0A\u52A0\u8F7D\u7F51\u5361[uuid:{0},\u4E91\u4E3B\u673A:{1}]\u5931\u8D25\uFF0C\u56E0\u4E3A:{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2959
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError(),msg.getNicInventory().getInternalName()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s,\ please\ try\ again\ or\ delete\ device[%s]\ by\ yourself = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{2}\uFF0CIP\uFF1A{3}]\u4E0A\u8FDE\u63A5NIC[uuid\uFF1A{0}\uFF0CVM\uFF1A{1}]\uFF0C\u56E0\u4E3A{4}\uFF0C\u8BF7\u91CD\u8BD5\u6216\u81EA\u884C\u5220\u9664\u8BBE\u5907[{5}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3018
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ detach\ data\ volume[uuid\:%s,\ installPath\:%s]\ from\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid:{4}, ip:{5}]\u4E0A\u4E3A\u4E91\u4E3B\u673A[uuid:{2}, name:{3}]\u5378\u8F7D\u4E91\u76D8[uuid:{0}, installPath:{1}]\uFF0C\u56E0\u4E3A: {6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3105
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ attach\ data\ volume[uuid\:%s,\ installPath\:%s]\ to\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid:{4}, ip:{5}]\u4E0A\u4E3A\u4E91\u4E3B\u673A[uuid:{2}, name:{3}]\u6302\u8F7D\u4E91\u76D8[uuid:{0}, installPath:{1}]\uFF0C\u56E0\u4E3A: {6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3149
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ destroy\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u5220\u9664\u4E91\u4E3B\u673A[uuid:{0} name:{1}]\uFF0C\u539F\u56E0: {4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3281
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ stop\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u505C\u6B62\u4E91\u4E3B\u673A[uuid:{0} \u540D\u79F0:{1}]\u5931\u8D25\uFF0C\u56E0\u4E3A:{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3386
# args: msg.getHostUuid(),ret.getError()
Host[%s]\ update\ spice\ channel\ config\ faild,\ because\ %s = \u7269\u7406\u673A[{0}]\u66F4\u65B0SPICE\u901A\u9053\u914D\u7F6E\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3505
# args: total
when\ the\ vm\ platform\ is\ Other,\ the\ number\ of\ dataVolumes\ and\ cdroms\ cannot\ exceed\ 3,\ currently\ %s = \u5F53VM\u5E73\u53F0\u4E3AOTHER\u65F6\uFF0CDataVolumes\u548CCDROM\u7684\u6570\u91CF\u4E0D\u80FD\u8D85\u8FC73\u4E2A\uFF0C\u76EE\u524D\u4E3A{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3997
# args: msg.getPhysicalInterface(),context.getInventory().getUuid(),context.getInventory().getManagementIp()
failed\ to\ check\ physical\ network\ interfaces[names\ \:\ %s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s] = \u65E0\u6CD5\u68C0\u67E5KVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u7684\u7269\u7406\u7F51\u7EDC\u63A5\u53E3[\u540D\u79F0\uFF1A{0}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4128
# args: self.getUuid(),ret.getHostUuid(),dbf.getDbVersion(),ret.getVersion()
detected\ abnormal\ status[host\ uuid\ change,\ expected\:\ %s\ but\:\ %s\ or\ agent\ version\ change,\ expected\:\ %s\ but\:\ %s]\ of\ kvmagent,it's\ mainly\ caused\ by\ kvmagent\ restarts\ behind\ zstack\ management\ server.\ Report\ this\ to\ ping\ task,\ it\ will\ issue\ a\ reconnect\ soon = \u68C0\u6D4B\u5230KVMAgent\u7684\u5F02\u5E38\u72B6\u6001[\u7269\u7406\u673Auuid\u66F4\u6539\uFF0C\u9884\u671F\uFF1A{0}\u4F46\u662F\uFF1A{1}\u6216\u4EE3\u7406\u7248\u672C\u66F4\u6539\uFF0C\u9884\u671F\uFF1A{2}\u4F46\u662F\uFF1A{3}]\uFF0C\u8FD9\u4E3B\u8981\u662F\u7531KVMAgent\u5728ZStack\u7BA1\u7406\u670D\u52A1\u5668\u540E\u9762\u91CD\u65B0\u542F\u52A8\u5F15\u8D77\u7684\u3002\u5C06\u6B64\u62A5\u544A\u7ED9ping\u4EFB\u52A1\uFF0C\u5B83\u5C06\u5F88\u5FEB\u53D1\u51FA\u91CD\u65B0\u8FDE\u63A5

# at: src/main/java/org/zstack/kvm/KVMHost.java:4283
# args: self.getUuid(),self.getManagementIp(),connectPath,rsp.getError()
unable\ to\ connect\ to\ kvm\ host[uuid\:%s,\ ip\:%s,\ url\:%s],\ because\ %s = \u8FDE\u63A5\u7269\u7406\u673A[uuid:{0}, ip:{1}\uFF0Curl:{2}]\u5931\u8D25\uFF0C\u56E0\u4E3A:{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4342
# args: errorCodeList != null && StringUtils.isNotEmpty(errorCodeList.getReadableDetails()) ? errorCodeList.getReadableDetails() : "please check network"
host\ can\ not\ access\ any\ primary\ storage,\ %s = \u7269\u7406\u673A\u65E0\u6CD5\u8BBF\u95EE\u4EFB\u4F55\u4E3B\u5B58\u50A8\uFF0C{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4482
# args: getSelf().getManagementIp(),getSelf().getPort(),TimeUnit.MILLISECONDS.toSeconds(sshTimeout)
the\ host[%s]\ ssh\ port[%s]\ not\ open\ after\ %s\ seconds,\ connect\ timeout = \u7269\u7406\u673A[{0}]SSH\u7AEF\u53E3[{1}]\u5728{2}\u79D2\u540E\u672A\u6253\u5F00\uFF0C\u8FDE\u63A5\u8D85\u65F6

# at: src/main/java/org/zstack/kvm/KVMHost.java:4542
# args: checkList
failed\ to\ ping\ all\ DNS/IP\ in\ %s;\ please\ check\ /etc/resolv.conf\ to\ make\ sure\ your\ host\ is\ able\ to\ reach\ public\ internet = \u5728{0}\u4E2D\u7684\u6240\u6709DNS/IP\u90FDping\u5931\u8D25\u4E86\uFF0C\u8BF7\u68C0\u67E5 /etc/resolv.conf \u6765\u786E\u4FDD\u4F60\u7684\u7269\u7406\u673A\u80FD\u8FDE\u63A5\u5230\u516C\u7F51

# at: src/main/java/org/zstack/kvm/KVMHost.java:4540
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:\ %d,\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = \u65E0\u6CD5\u8FDE\u63A5\u7269\u7406\u673A[ip:{0}, \u7528\u6237\u540D:{1}, ssh\u7AEF\u53E3:{2} ]\u505ADNS\u68C0\u67E5\uFF0C\u8BF7\u68C0\u67E5\u7528\u6237\u540D\u5BC6\u7801\u662F\u5426\u6B63\u786E\uFF1B{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4585
# args: self.getManagementIp(),restf.getHostName(),ret.getStderr(),ret.getExitErrorMessage()
the\ KVM\ host[ip\:%s]\ cannot\ access\ the\ management\ node's\ callback\ url.\ It\ seems\ that\ the\ KVM\ host\ cannot\ reach\ the\ management\ IP[%s].\ %s\ %s = \u7269\u7406\u673A[ip:{0}] \u4E0D\u80FD\u8FDE\u63A5\u5230\u7BA1\u7406\u8282\u70B9 \u3002 \u770B\u8D77\u6765\u662F\u8FD9\u4E2A\u7269\u7406\u673A\u65E0\u6CD5\u5230\u8FBE\u7BA1\u7406\u8282\u70B9\u7684IP [{1}]. {2} {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4582
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d]\ to\ check\ the\ management\ node\ connectivity,please\ check\ if\ username/password\ is\ wrong;\ %s = \u4E0D\u80FD\u8FDE\u63A5\u5230\u7269\u7406\u673A[ip:{0}, username:{1}, sshPort:{2}] \u53BB\u68C0\u67E5\u4E0E\u7BA1\u7406\u8282\u70B9\u662F\u5426\u8FDE\u901A  ,\u8BF7\u68C0\u67E5\u60A8\u7684\u7528\u6237\u540D\u6216\u8005\u5BC6\u7801\u662F\u5426\u6709\u8BEF; {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4611
# args: hostRet.getExitErrorMessage()
unable\ to\ Check\ whether\ the\ host\ is\ taken\ over,\ \ because\ %s = \u65E0\u6CD5\u68C0\u67E5\u7269\u7406\u673A\u662F\u5426\u5DF2\u88AB\u63A5\u7BA1\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4625
# args: timeRet.getExitErrorMessage()
Unable\ to\ get\ the\ timestamp\ of\ the\ flag,\ \ because\ %s = \u65E0\u6CD5\u83B7\u53D6\u6807\u5FD7\u7684\u65F6\u95F4\u6233\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4634
# args: self.getManagementIp(),hostOutput,diff,HostGlobalConfig.PING_HOST_INTERVAL.value(int.class)
the\ host[ip\:%s]\ has\ been\ taken\ over,\ because\ the\ takeover\ flag[HostUuid\:%s]\ already\ exists\ and\ utime[%d]\ has\ not\ exceeded\ host\ ping\ interval[%d] = \u7269\u7406\u673A[IP\uFF1A{0}]\u5DF2\u88AB\u63A5\u7BA1\uFF0C\u56E0\u4E3A\u63A5\u7BA1\u6807\u5FD7[HOSTuuid\uFF1A{1}]\u5DF2\u5B58\u5728\uFF0C\u5E76\u4E14UTIME[{2}]\u672A\u8D85\u8FC7\u7269\u7406\u673Aping\u95F4\u9694[{3}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4643
# args: self.getManagementIp(),lastHostInv.getUuid()
the\ host[ip\:%s]\ has\ been\ taken\ over,\ because\ flag[HostUuid\:%s]\ exists\ in\ the\ database = \u7269\u7406\u673A[IP\uFF1A{0}]\u5DF2\u88AB\u63A5\u7BA1\uFF0C\u56E0\u4E3A\u6570\u636E\u5E93\u4E2D\u5B58\u5728\u6807\u5FD7[HOSTuuid\uFF1A{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4666
# args: ret.getExitErrorMessage()
unable\ to\ get\ host\ cpu\ architecture,\ please\ check\ if\ username/password\ is\ wrong;\ %s = \u65E0\u6CD5\u83B7\u53D6\u7269\u7406\u673ACPU\u67B6\u6784\uFF0C\u8BF7\u68C0\u67E5\u7528\u6237\u540D/\u5BC6\u7801\u662F\u5426\u9519\u8BEF\uFF1B{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4693
# args: hostArchitecture,cluster.getArchitecture()
host\ cpu\ architecture[%s]\ is\ not\ matched\ the\ cluster[%s] = \u7269\u7406\u673ACPU\u4F53\u7CFB\u7ED3\u6784[{0}]\u4E0E\u96C6\u7FA4[{1}]\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/kvm/KVMHost.java:4997
# args: 
cannot\ find\ either\ 'vmx'\ or\ 'svm'\ in\ /proc/cpuinfo,\ please\ make\ sure\ you\ have\ enabled\ virtualization\ in\ your\ BIOS\ setting = \u4E0D\u80FD\u53D1\u73B0\u4EE5\u4E0B\u4EFB\u610F\u4E00\u4E2A  'vmx' or 'svm' \u5728\u8DEF\u5F84 /proc/cpuinfo \u91CC, \u8BF7\u68C0\u67E5\u4F60\u662F\u5426\u5728\u4F60\u7684BIOS\u8BBE\u7F6E\u91CC\u5F00\u542F\u4E86virtualization\u9009\u9879

# at: src/main/java/org/zstack/kvm/KVMHost.java:5064
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ qemu/libvirt\ version\ does\ not\ match = \u7269\u7406\u673A[uuid:{0}]\u4E0D\u80FD\u6DFB\u52A0\u5230\u96C6\u7FA4[uuid:{1}]\u4E2D\uFF0C\u56E0\u4E3Aqemu/libvirt\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/kvm/KVMHost.java:5084
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ cpu\ model\ name\ does\ not\ match = \u7269\u7406\u673A[uuid:{0}]\u65E0\u6CD5\u88AB\u6DFB\u52A0\u5230\u96C6\u7FA4[uuid:{1}]\u56E0\u4E3Acpu\u578B\u53F7\u4E0D\u4E00\u81F4

# at: src/main/java/org/zstack/kvm/KVMHost.java:5217
# args: msg.getHostUuid(),ctimeout
host[%s]\ not\ shutdown\ in\ %d\ seconds = \u7269\u7406\u673A[{0}]\u672A\u5728{1}\u79D2\u5185\u5173\u95ED

# at: src/main/java/org/zstack/kvm/KVMHost.java:5374
# args: 
host\ is\ not\ in\ the\ connected\ status,\ cannot\ update\ os = \u7269\u7406\u673A\u5F53\u524D\u5E76\u4E0D\u662F\u5DF2\u8FDE\u63A5\u72B6\u6001\uFF0C\u4E0D\u80FD\u5347\u7EA7\u64CD\u4F5C\u7CFB\u7EDF

# at: src/main/java/org/zstack/kvm/KVMHost.java:5372
# args: 
host\ is\ in\ the\ premaintenance\ state,\ cannot\ update\ os = \u7269\u7406\u673A\u6B63\u5904\u4E8E\u9884\u7EF4\u62A4\u72B6\u6001\uFF0C\u4E0D\u80FD\u5347\u7EA7\u64CD\u4F5C\u7CFB\u7EDF

# at: src/main/java/org/zstack/kvm/KVMHost.java:5666
# args: rsp.getError()
failed\ to\ attach\ volume\ to\ host,\ because\:%s = \u65E0\u6CD5\u5C06\u5377\u9644\u52A0\u5230\u7269\u7406\u673A\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:5727
# args: rsp.getError()
failed\ to\ detach\ volume\ from\ host,\ because\:%s = \u65E0\u6CD5\u4ECE\u7269\u7406\u673A\u5206\u79BB\u5377\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/kvm/KVMHostAllocatorFilterExtensionPoint.java:201
# args: 
cannot\ adapt\ version\ for\ the\ bellow\ rpm\:\ libvirt\ /\ qemu\ /\ cpumodel = \u6E90\u548C\u76EE\u7684\u4E4B\u95F4\u7684\u4EE5\u4E0B\u7EC4\u4EF6\u7248\u672C\u4E0D\u517C\u5BB9\uFF1Alibvirt\u3001qemu\u3001cpumodel

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:164
# args: e.getMessage()
fail\ to\ load\ host\ info\ from\ file.\ because\n%s = \u65E0\u6CD5\u4ECE\u6587\u4EF6\u52A0\u8F7D\u7269\u7406\u673A\u4FE1\u606F\u3002\u56E0\u4E3A\n{0}

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:290
# args: os,vo.getName(),vo.getManagementIp()
the\ operation\ system[%s]\ of\ host[name\:%s,\ ip\:%s]\ is\ invalid = \u7269\u7406\u673A[\u540D\u79F0\uFF1A{1}\uFF0CIP\uFF1A{2}]\u7684\u64CD\u4F5C\u7CFB\u7EDF[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:316
# args: vo.getClusterUuid(),otherOs,vo.getName(),vo.getManagementIp(),os
cluster[uuid\:%s]\ already\ has\ host\ with\ os\ version[%s],\ but\ new\ added\ host[name\:%s\ ip\:%s]\ has\ different\ host\ os\ version[%s] = \u96C6\u7FA4[uuid\uFF1A{0}]\u5DF2\u5177\u6709\u64CD\u4F5C\u7CFB\u7EDF\u7248\u672C\u4E3A[{1}]\u7684\u7269\u7406\u673A\uFF0C\u4F46\u65B0\u6DFB\u52A0\u7684\u7269\u7406\u673A[\u540D\u79F0\uFF1A{2}IP\uFF1A{3}]\u5177\u6709\u4E0D\u540C\u7684\u7269\u7406\u673A\u64CD\u4F5C\u7CFB\u7EDF\u7248\u672C[{4}]

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:461
# args: cmd.vmUuid
vm[uuid\:%s]\ crashes\ due\ to\ kernel\ error = VM[uuid\uFF1A{0}]\u56E0\u5185\u6838\u9519\u8BEF\u800C\u5D29\u6E83

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:500
# args: str.toString()
there\ are\ still\ hosts\ not\ have\ the\ same\ cpu\ model,\ details\:\ %s = \u4ECD\u5B58\u5728host\u6709\u4E0D\u540C\u7684cpu\u6A21\u578B\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:514
# args: KVMSystemTags.VM_PREDEFINED_PCI_BRIDGE_NUM_TOKEN
pci\ bridge\ need\ a\ value\ greater\ than\ 0\ and\ lower\ than\ 32 = PCI\u6865\u9700\u8981\u5927\u4E8E0\u4E14\u5C0F\u4E8E32\u7684\u503C

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:557
# args: vm.getState(),VmInstanceState.Stopped
vm\ current\ state[%s],\ modify\ virtioSCSI\ requires\ the\ vm\ state[%s] = VM\u5F53\u524D\u72B6\u6001[{0}]\uFF0C\u4FEE\u6539VirtiosCsi\u9700\u8981VM\u72B6\u6001[{1}]

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:759
# args: hostUuid
host[uuid\:%s]\ does\ not\ have\ cpu\ model\ information,\ you\ can\ reconnect\ the\ host\ to\ fix\ it = \u7269\u7406\u673A[uuid:{0}]\u65E0cpu\u6A21\u578B\u4FE1\u606F\uFF0C\u4F60\u53EF\u4EE5\u5C1D\u8BD5\u91CD\u8FDE\u6765\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898

# at: src/main/java/org/zstack/kvm/KVMHostUtils.java:35
# args: format
invalid\ format\ string\ %s = \u683C\u5F0F\u5B57\u7B26\u4E32{0}\u65E0\u6548

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:70
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u5728\u7269\u7406\u673A[uuid:{3}]\u4E0A\u4E3A\u4E8C\u5C42\u7F51\u7EDC[uuid:{1}, type:{2}]\u521B\u5EFA\u7F51\u6865[{0}]\u5931\u8D25\uFF0C\u539F\u56E0: {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:129
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2NoVlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = \u5728\u4E8C\u5C42\u7F51\u7EDC[uuid:{1}\u4E2D\u68C0\u67E5\u7F51\u6865[{0}]\u5931\u8D25\uFF0C\u540D\u5B57\u4E3A[{2}]\u5728\u7269\u7406\u673At[uuid: {3}]\u4E0A, {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:211
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{3}]\u4E0A\u5220\u9664\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{1}\uFF0C\u7C7B\u578B\uFF1A{2}]\u7684\u7F51\u6865[{0}]\uFF0C\u56E0\u4E3A{4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:82
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u521B\u5EFA\u4E8C\u5C42\u7F51\u7EDC[uuid:{1}\u4E2D\u7684\u7F51\u6865[{0}]\u5931\u8D25 , \u7C7B\u578B\u4E3A: {2}, vlan:{3}] \u5728\u7269\u7406\u673A[uuid:{4}]\u4E0A, \u539F\u56E0:  {5}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:142
# args: cmd.getBridgeName(),l2vlan.getUuid(),l2vlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2VlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = \u68C0\u67E5\u5728\u7269\u7406\u673A[uuid:{3}]\u4E0A\u4E8C\u5C42\u7F51\u7EDC[uuid:{1}, name:{2}]\u4E2D\u7684\u7F51\u6865[{0}]\u5931\u8D25, {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:239
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{4}]\u4E0A\u5220\u9664\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{1}\uFF0C\u7C7B\u578B\uFF1A{2}\uFF0CVLAN\uFF1A{3}]\u7684\u7F51\u6865[{0}]\uFF0C\u56E0\u4E3A{5}

# at: src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:109
# args: hto.getHostUuid(),rsp.getError()
failed\ to\ apply\ rules\ of\ security\ group\ rules\ to\ kvm\ host[uuid\:%s],\ because\ %s = \u4E0D\u80FD\u5E94\u7528\u5B89\u5168\u7EC4\u89C4\u5219\u5728\u7269\u7406\u673At[uuid:{0}]\u4E0A, \u56E0\u4E3A {1}

# at: src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:152
# args: hostUuid,rsp.getError()
failed\ to\ check\ default\ rules\ of\ security\ group\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u5728host[uuid:{0}]\u4E0A\u68C0\u67E5\u9ED8\u8BA4\u5B89\u5168\u7EC4\u89C4\u5219\u5931\u8D25

# at: src/main/java/org/zstack/kvm/KvmVmHardwareVerifyExtensionPoint.java:31
# args: 
Failed\ to\ start\ vm,\ because\ can\ not\ disable\ vm.cpu.hypervisor.feature\ with\ vm.cpuMode\ none = \u65E0\u6CD5\u542F\u52A8VM\uFF0C\u56E0\u4E3A\u65E0\u6CD5\u4F7F\u7528VM.CPUMode None\u7981\u7528VM.CPU.Hypervisor.Feature

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:95
# args: msg.getMessageName()
cannot\ get\ vmUuid\ from\ msg\ %s = \u65E0\u6CD5\u4ECE\u6D88\u606F{0}\u83B7\u53D6VMuuid

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:258
# args: host.getUuid(),host.getManagementIp(),ret.getError()
unable\ to\ do\ vm\ sync\ on\ host[uuid\:%s,\ ip\:%s]\ because\ %s = \u4E0D\u80FD\u5728\u7269\u7406\u673A[uuid:{0}, ip:{1}]\u4E0A\u6267\u884C\u4E91\u4E3B\u673A\u72B6\u6001\u540C\u6B65\u64CD\u4F5C\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:287
# args: vmUuid
The\ vm[%s]\ state\ is\ in\ shutdown\ for\ a\ long\ time,\ check\ whether\ the\ vm\ is\ normal = \u4E91\u4E3B\u673A[{0}]\u957F\u65F6\u95F4\u5904\u4E8E\u5173\u95ED\u72B6\u6001\uFF0C\u8BF7\u68C0\u67E5\u4E91\u4E3B\u673A\u662F\u5426\u6B63\u5E38

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:67
# args: 
unsupported\ LDAP/AD\ server\ scope = \u4E0D\u652F\u6301\u7684LDAP/AD\u670D\u52A1\u5668\u4F5C\u7528\u57DF

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:128
# args: type,LdapConstant.OpenLdap.TYPE,LdapConstant.WindowsAD.TYPE
Wrong\ LdapServerType[%s],\ valid\ values\:\ [%,%s] = \u9519\u8BEF\u7684LDAP\u670D\u52A1\u7C7B\u578B[{0}]\uFF0C\u6709\u6548\u7684\u503C: [%,{1}]

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:153
# args: 
Cannot\ connect\ to\ LDAP/AD\ server,\ Invalid\ Credentials,\ please\ checkout\ User\ DN\ and\ password = \u65E0\u6CD5\u8FDE\u63A5\u5230LDAP/AD\u670D\u52A1\u5668\uFF0C\u51ED\u636E\u65E0\u6548\uFF0C\u8BF7\u7B7E\u51FA\u7528\u6237DN\u548C\u5BC6\u7801

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:156
# args: 
Cannot\ connect\ to\ LDAP/AD\ server,\ communication\ false,\ please\ checkout\ IP,\ port\ and\ Base\ DN = \u65E0\u6CD5\u8FDE\u63A5\u5230LDAP/AD\u670D\u52A1\u5668\uFF0C\u901A\u4FE1\u9519\u8BEF\uFF0C\u8BF7\u68C0\u67E5IP\u3001\u7AEF\u53E3\u548C\u57FA\u672CDN

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:159
# args: e.toString()
Cannot\ connect\ to\ LDAP/AD\ server,\ %s = \u4E0D\u80FD\u8FDE\u63A5LDAP\u670D\u52A1\uFF0C{0}

# at: src/main/java/org/zstack/ldap/LdapManagerImpl.java:560
# args: vo.getAccountUuid()
Account[uuid\:%s]\ Not\ Found!!! = \u672A\u627E\u5230\u5E10\u6237[uuid\uFF1A{0}]\uFF01

# at: src/main/java/org/zstack/ldap/LdapUtil.java:581
# args: filter,errorMessage
query\ ldap\ entry[filter\:\ %s]\ fail,\ because\ %s = \u67E5\u8BE2LDAP\u6761\u76EE[\u7B5B\u9009\u5668\uFF1A{0}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/ldap/externalSearch/AggregateSearch.java:52
# args: e.toString()
query\ ldap\ entry\ fail,\ %s = \u67E5\u8BE2LDAP\u6761\u76EE\u5931\u8D25\uFF0C{0}

# at: src/main/java/org/zstack/license/LicenseChecker.java:167
# args: 
Parse\ license\ error,\n1.\ check\ your\ private\ key\ and\ application\ code\ is\ correct\n2.\ check\ your\ license\ is\ not\ corrupted\n3.\ use\ zstack-ctl\ clear_license\ to\ clear\ your\ licenses\ and\ try\ to\ reinstall\n = \u89E3\u6790\u8BB8\u53EF\u8BC1\u9519\u8BEF\uFF0C\N1\u3002\u68C0\u67E5\u60A8\u7684\u79C1\u94A5\u548C\u5E94\u7528\u7A0B\u5E8F\u4EE3\u7801\u662F\u5426\u6B63\u786E\N2\u3002\u68C0\u67E5\u60A8\u7684\u8BB8\u53EF\u8BC1\u662F\u5426\u5DF2\u635F\u574F\N3\u3002\u4F7F\u7528zstack-CTL\u6E05\u9664_\u8BB8\u53EF\u8BC1\u6E05\u9664\u60A8\u7684\u8BB8\u53EF\u8BC1\u5E76\u5C1D\u8BD5\u91CD\u65B0\u5B89\u88C5\n

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:229
# args: 
the\ licenseRequestCode\ is\ illegal = \u8BB8\u53EF\u8BC1\u8BF7\u6C42\u4EE3\u7801\u4E0D\u5408\u6CD5

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:242
# args: e.getMessage()
Decode\ fail\ because\ %s = \u89E3\u7801\u5931\u8D25\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:239
# args: bytes.length
Unexpected\ decoded\ license\ file\ length\:\ %d = \u610F\u5916\u7684\u89E3\u7801\u8BB8\u53EF\u8BC1\u6587\u4EF6\u957F\u5EA6\uFF1A{0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:791
# args: 
Licensed\ VM\ number\ overrun = VM\u6570\u91CF\u8D85\u8FC7\u4E91\u4E3B\u673A\u6388\u6743\u4E0A\u9650

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:857
# args: 
unexpected\ host\ vendor\ for\ MINI = Mini\u7684\u610F\u5916\u7269\u7406\u673A\u4F9B\u5E94\u5546

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1216
# args: info.getUuid()
not\ supported\:\ delete\ license[%s]\ from\ USB-key = \u4E0D\u652F\u6301\uFF1A\u4ECEUSB-KEY\u5220\u9664\u8BB8\u53EF\u8BC1[{0}]

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1271
# args: System.getProperty("os.arch")
UKey\ not\ supported\ (arch\:\ %s) = \u4E0D\u652F\u6301UKey\uFF08Arch\uFF1A{0}\uFF09

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1351
# args: ex.getLocalizedMessage()
update\ local\ ukey\ license\:\ %s = \u66F4\u65B0\u672C\u5730UKEY\u8BB8\u53EF\u8BC1\uFF1A{0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1347
# args: 
No\ local\ ukey\ license\ updated = \u6CA1\u6709\u672C\u5730UKEY\u8BB8\u53EF\u8BC1\u66F4\u65B0

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1377
# args: 
No\ node\ available\ to\ update\ UKey = \u6CA1\u6709\u8282\u70B9\u53EF\u7528\u4E8E\u66F4\u65B0UKEY

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1519
# args: Platform.getManagementServerIp()
Multiple\ MN\ exists\ but\ only\ supplied\ licenses\ for\ %s = \u7BA1\u7406\u8282\u70B9\u6709\u591A\u4E2A\uFF0C\u4F46\u662F\u4EC5\u63D0\u4F9B\u4E86\u8282\u70B9{0}\u7684\u8BB8\u53EF\u8BC1

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1493
# args: mnUuid,reply.getError().getDetails()
MN[uuid\:%s]\:\ %s = Mn[uuid\uFF1A{0}]\uFF1A{1}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1521
# args: msg.getManagementUuids()
MN\ HA\ environment,\ but\ only\ updated\ license\ for\ %s = \u7BA1\u7406\u8282\u70B9\u6709\u591A\u4E2A\uFF0C\u4F46\u662F\u4EC5\u66F4\u65B0\u4E86\u8282\u70B9{0}\u7684\u8BB8\u53EF\u8BC1

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1724
# args: newLicenseInfo.getUuid(),newLicenseInfo.getLicenseType().toString(),path
can\ not\ find\ license[uuid\:%s,\ type\:%s]\ file\ on\ path\ %s = \u5728\u8DEF\u5F84{2}\u4E0A\u627E\u4E0D\u5230\u8BB8\u53EF\u8BC1[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]\u6587\u4EF6

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:2263
# args: 
License\ expired = \u8BB8\u53EF\u8BC1\u5DF2\u8FC7\u671F

# at: src/main/java/org/zstack/license/cube/CubeLicenseFactory.java:50
# args: sdsInfoPath
%s\ is\ not\ existed = {0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/license/cube/XmsCli.java:61
# args: 
context\ cannot\ be\ null\ in\ license = \u8BB8\u53EF\u8BC1\u4E2D\u7684\u4E0A\u4E0B\u6587\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/log/LogConfigurationManagerImpl.java:247
# args: struct.getType()
No\ factory\ found\ for\ type\:%s = \u672A\u627E\u5230\u7C7B\u578B\u4E3A{0}\u7684\u5DE5\u5382

# at: src/main/java/org/zstack/log/LogConfigurationManagerImpl.java:462
# args: msg.getType()
Unknown\ log\ configuration\ type\ %s = \u672A\u77E5\u7684\u65E5\u5FD7\u914D\u7F6E\u7C7B\u578B{0}

# at: src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java:60
# args: lstruct.getAppenderType()
No\ factory\ found\ for\ log4j2\ appender\ type\:%s. = \u627E\u4E0D\u5230Log4j2\u9644\u52A0\u5668\u7C7B\u578B\u7684\u5DE5\u5382\uFF1A{0}\u3002

# at: src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java:134
# args: lstruct.getAppenderType()
Unknown\ log4j2\ appender\ type\ %s = \u672A\u77E5\u7684Log4j2 Appender\u7C7B\u578B{0}

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:33
# args: 
facility\ can\ not\ be\ null = \u8BBE\u5907\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:37
# args: configuration.facility
invalid\ facility\ %s = \u5DE5\u5177{0}\u65E0\u6548

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:41
# args: 
hostname\ can\ not\ be\ null = \u7269\u7406\u673A\u540D\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:45
# args: 
port\ can\ not\ be\ null = \u7AEF\u53E3\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:49
# args: 
protocol\ can\ not\ be\ null = \u534F\u8BAE\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:55
# args: configuration.protocol
unsupported\ protocol\ %s = \u4E0D\u652F\u6301\u7684\u534F\u8BAE{0}

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:69
# args: configuration.hostname,configuration.port
syslog\ server[address\:\ %s\:%s]\ is\ not\ available = Syslog\u670D\u52A1\u5668[\u5730\u5740\uFF1A{0}\uFF1A{1}]\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:61
# args: configuration.hostname
syslog\ server[address\:\ %s]\ is\ not\ available = Syslog\u670D\u52A1\u5668[\u5730\u5740\uFF1A{0}]\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:74
# args: 
There\ is\ no\ LDAP/AD\ server\ in\ the\ system,\ Please\ add\ a\ LDAP/AD\ server\ first. = \u5728\u7CFB\u7EDF\u4E2D\u6CA1\u6709LDAP\u670D\u52A1\uFF0C\u8BF7\u5148\u6DFB\u52A0\u4E00\u4E2ALDAP\u670D\u52A1

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:68
# args: msg.getLdapUid(),msg.getVirtualIDUuid()
Can\ not\ bind\ this\ ldap\ uid\ %s\ to\ virtual\ id\ [uuid\:%s] = \u65E0\u6CD5\u5C06\u6B64LDAP UID{0}\u7ED1\u5B9A\u5230\u865A\u62DFID[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:82
# args: 
This\ uid\ is\ already\ used = \u6B64UID\u5DF2\u88AB\u4F7F\u7528

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:228
# args: 
ZStack\ is\ loading\ ldap\ organizations\ from\ DB\ now,\ can\ not\ execute\ sync\ operation = ZStack\u6B63\u5728\u4ECE\u6570\u636E\u5E93\u52A0\u8F7DLDAP\u7EC4\u7EC7\uFF0C\u65E0\u6CD5\u6267\u884C\u540C\u6B65\u64CD\u4F5C

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:390
# args: e.getMessage()
Failed\ to\ sync\ ldap\ entry[],\ because\ %s = \u65E0\u6CD5\u540C\u6B65LDAP\u6761\u76EE[]\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1021
# args: reply.getError().getReadableDetails()
Failed\ to\ sync\ organizations,\ because\ %s = \u65E0\u6CD5\u540C\u6B65\u7EC4\u7EC7\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:969
# args: 
Failed\ to\ transform\ ldap\ entry\ to\ organization\ ndoe = \u65E0\u6CD5\u5C06LDAP\u6761\u76EE\u8F6C\u6362\u4E3A\u7EC4\u7EC7ndoe

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:958
# args: 
failed\ to\ sync\ ldap\ organization = \u65E0\u6CD5\u540C\u6B65LDAP\u7EC4\u7EC7

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1441
# args: scope.toString()
Can\ not\ sync\ LDAP/AD\ server\ whose\ scope\ is\ not\ %s = \u65E0\u6CD5\u540C\u6B65\u8303\u56F4\u4E0D\u662F{0}\u7684LDAP/AD\u670D\u52A1\u5668

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1575
# args: uid
Failed\ to\ validate\ uid[%s],\ maybe\ it\ has\ been\ deleted = \u65E0\u6CD5\u9A8C\u8BC1UID[{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1616
# args: uid,reply.getError().getReadableDetails()
Failed\ to\ create\ iam2\ virtual\ id\ for\ uid[%s],\ because\ %s = \u65E0\u6CD5\u4E3AUID[{0}]\u521B\u5EFAIAM2\u865A\u62DFID\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1751
# args: ldapUid
Failed\ to\ validate\ dn\ [%s],\ maybe\ it\ has\ been\ deleted = \u65E0\u6CD5\u9A8C\u8BC1DN[{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2195
# args: 
invalid\ json\ format = \u65E0\u6548\u7684JSON\u683C\u5F0F

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2206
# args: 
name\ is\ mandatory\ field\ % = \u540D\u79F0\u662F\u5FC5\u586B\u5B57\u6BB5%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2210
# args: 
attribute\ is\ mandatory\ field\ % = \u5C5E\u6027\u662F\u5F3A\u5236\u5B57\u6BB5%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2214
# args: 
type\ is\ mandatory\ field\ % = \u7C7B\u578B\u4E3A\u5FC5\u586B\u5B57\u6BB5%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2218
# args: 
optional\ is\ mandatory\ field\ % = \u53EF\u9009\u4E3A\u5FC5\u586B\u5B57\u6BB5%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2222
# args: fieldNames
name\ should\ use\ values\ in\ %s = \u540D\u79F0\u5E94\u4F7F\u7528{0}\u4E2D\u7684\u503C

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2254
# args: rule.getAttribute()
Invalid\ attribute.\ Attribute[%s]\ is\ required,\ but\ found\ there\ are\ some\ record\ not\ matched = \u65E0\u6548\u5C5E\u6027\u3002\u5C5E\u6027[{0}]\u662F\u5FC5\u9700\u7684\uFF0C\u4F46\u53D1\u73B0\u6709\u4E00\u4E9B\u8BB0\u5F55\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2199
# args: 
strategy\ is\ mandatory\ field\ % = \u7B56\u7565\u4E3A\u5FC5\u586B\u5B57\u6BB5%

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:54
# args: 
missing\ loginPluginName = \u7F3A\u5C11LoginPluginName

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:59
# args: loginContext.getLoginPluginName()
no\ login\ plugin\ named\ %s = \u6CA1\u6709\u540D\u4E3A{0}\u7684\u767B\u5F55\u63D2\u4EF6

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:64
# args: loginContext.getLoginPluginName()
missing\ LoginUserInfo\ when\ use\ plugin\ login = \u4F7F\u7528\u63D2\u4EF6\u767B\u5F55\u65F6\u7F3A\u5C11LoginUserInfo

# at: src/main/java/org/zstack/loginControl/LoginControlApiInterceptor.java:40
# args: e.getMessage()
Invalid\ rule\ expression,\ add\ access\ control\ rule\ fail\ because\:\ %s = \u89C4\u5219\u8868\u8FBE\u5F0F\u65E0\u6548\uFF0C\u6DFB\u52A0\u8BBF\u95EE\u63A7\u5236\u89C4\u5219\u5931\u8D25\uFF0C\u539F\u56E0\u662F\uFF1A{0}

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:107
# args: key
unrecognized\ key\:\ %s = \u65E0\u6CD5\u8BC6\u522B\u7684\u952E\uFF1A{0}

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:113
# args: opt.get()
missing\ key\:value\ of\ %s = \u7F3A\u5C11\u952E\uFF1A{0}\u7684\u503C

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:291
# args: msg.getResourceName(),msg.getLoginType()
No\ available\ user\ with\ name\:\ %s,\ type\:\ %s = \u6CA1\u6709\u540D\u79F0\u4E3A{0}\u3001\u7C7B\u578B\u4E3A{1}\u7684\u53EF\u7528\u7528\u6237

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:90
# args: msg.getJobName()
%s\ is\ not\ an\ API = {0}\u4E0D\u662F\u4E00\u4E2AAPI

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:152
# args: 
cannot\ cancel\ longjob\ that\ is\ succeeded = \u4E0D\u80FD\u53D6\u6D88\u5DF2\u7ECF\u6210\u529F\u7684longjob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:155
# args: 
cannot\ cancel\ longjob\ that\ is\ failed = \u4E0D\u80FD\u53D6\u6D88\u5DF2\u7ECF\u5931\u8D25\u7684longjob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:166
# args: 
delete\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = \u53EA\u80FD\u5220\u9664\u5DF2\u7ECF\u6210\u529F\u3001\u53D6\u6D88\u3001\u5931\u8D25\u7684longjob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:177
# args: 
rerun\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = \u4EC5\u5728\u6210\u529F\u3001\u53D6\u6D88\u6216\u5931\u8D25\u65F6\u91CD\u65B0\u8FD0\u884CLongJob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:206
# args: 
can\ only\ resume\ longjob\ that\ is\ Suspended = \u53EA\u80FD\u6062\u590D\u6302\u8D77\u7684LongJob

# at: src/main/java/org/zstack/longjob/LongJobFactoryImpl.java:39
# args: jobName
%s\ has\ no\ corresponding\ longjob = {0}\u6CA1\u6709\u4E0E\u4E4B\u5BF9\u5E94\u7684longjob

# at: src/main/java/org/zstack/mediator/ApiValidator.java:123
# args: l3NetworkUuid,vmNicVO.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ cidr\ of\ l3[%s]\ to\ attach\ overlapped\ with\ l3[%s]\ already\ attached\ to\ vm = \u4E0D\u80FD\u7ED1\u5B9A\u8FD9\u4E2A\u4E09\u5C42\u7F51\u7EDC\u3002\u8FD9\u4E2A\u4E91\u4E3B\u673A\u4E0A\u5DF2\u7ECF\u7ED1\u5B9A\u7684\u4E09\u5C42\u7F51\u7EDC[{1}]\u548C\u8FD9\u4E2A\u4E09\u5C42\u7F51\u7EDC[{0}]\u7684CIDR\u5B58\u5728\u91CD\u53E0

# at: src/main/java/org/zstack/mediator/ApiValidator.java:155
# args: vm.getName(),vm.getUuid(),StringUtils.join(pfStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ port\ forwarding\ rules%s\ attached = \u4E91\u4E3B\u673A[name:{0}, uuid:{1}] \u5DF2\u7ECF\u8BBE\u7F6E\u4E86\u4E00\u4E9B\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219{2}

# at: src/main/java/org/zstack/mediator/ApiValidator.java:176
# args: vm.getName(),vm.getUuid(),StringUtils.join(eipStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ EIPs%s\ attached = \u4E91\u4E3B\u673A[name:{0}, uuid:{1}] \u5DF2\u7ECF\u914D\u7F6E\u4E86\u5F39\u6027IP{2}

# at: src/main/java/org/zstack/mediator/ApiValidator.java:191
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ already\ has\ bound\ to\ other\ service[%s] = \u8BE5\u865A\u62DFIP[uuid:{0}]\u5DF2\u7ECF\u7ED1\u5B9A\u4E86\u5176\u4ED6\u670D\u52A1

# at: src/main/java/org/zstack/mediator/ApiValidator.java:231
# args: Long.toString(range.getStart()),Long.toString(range.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),vipUuid,protocol
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ %s\  = \u5F53\u524D\u4F7F\u7528\u7684\u7AEF\u53E3\u8303\u56F4[{0}, {1}]\u548C\u865A\u62DFIP[uuid: {4}, \u534F\u8BAE: {5}]\u5DF2\u7ECF\u4F7F\u7528\u7684\u7AEF\u53E3\u8303\u56F4[{2}, {3}]\u51B2\u7A81

# at: src/main/java/org/zstack/mediator/ApiValidator.java:228
# args: Long.toString(range.getStart()),Long.toString(range.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),vipUuid,protocol
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ system\ service\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ %s\  = \u5F53\u524D\u4F7F\u7528\u7684\u7AEF\u53E3\u8303\u56F4[{0}, {1}]\u548C\u865A\u62DFIP[uuid: {4}, \u534F\u8BAE: {5}]\u5DF2\u7ECF\u4F7F\u7528\u7684\u7CFB\u7EDF\u670D\u52A1\u7AEF\u53E3\u8303\u56F4[{2}, {3}]\u51B2\u7A81

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:851
# args: l3Uuid,systemTag
L3\ network[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = \u627E\u4E0D\u5230\u4E09\u5C42\u7F51\u7EDC[uuid:0]\u3002\u8BF7\u786E\u8BA4\u9759\u6001IP\u7684\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:327
# args: supportSharedVolumePrimaryStorage,psType
for\ shareable\ volume,\ the\ only\ supported\ primary\ storage\ type\ is\ %s,\ current\ is\ %s = \u5171\u4EAB\u4E91\u76D8\u4EC5\u652F\u6301\u5728\u4E3B\u5B58\u50A8\u7C7B\u578B\u4E3A{0}\u7684\u4E3B\u5B58\u50A8\u4E0A\u4F7F\u7528\uFF0C\u5F53\u524D\u7684\u7C7B\u578B\u4E3A{1}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:795
# args: bandwidth,Long.MAX_VALUE
invalid\ volume\ bandwidth[%s]\ is\ larger\ than\ %d = \u4E91\u76D8\u5E26\u5BBD[{0}]\u5927\u4E8E{1}\u662F\u65E0\u6548\u7684

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:745
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ or\ equal\ to\ 8192 = \u9519\u8BEF\u7684\u7F51\u7EDC\u5E26\u5BBD[{0}],\u8FD9\u4E2A\u6570\u5B57\u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E8K

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:793
# args: bandwidth
invalid\ volume\ bandwidth[%s]\ is\ not\ a\ number = \u9519\u8BEF\u7684\u4E91\u76D8\u5E26\u5BBD \uFF0C[{0}] \u8FD9\u4E2A\u4E0D\u662F\u6570\u5B57

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:790
# args: bandwidth
invalid\ volume\ bandwidth[%s],\ it\ must\ be\ greater\ than\ 1024\ (include\ 1024) = \u65E0\u6548\u7684\u4E91\u76D8\u5E26\u5BBD\uFF0C\u5B83\u5FC5\u987B\u5927\u4E8E\u7B49\u4E8E1M

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:832
# args: iops
invalid\ volume\ IOPS[%s]\ is\ not\ a\ number = \u9519\u8BEF\u7684\u4E91\u76D8\u6BCF\u79D2\u8BFB\u5199\u901F\u5EA6[{0}]\uFF0C\u5B83\u5E94\u8BE5\u662F\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:834
# args: iops,Long.MAX_VALUE
invalid\ volume\ IOPS[%s]\ is\ larger\ than\ %d = \u4E91\u76D8IOPS[{0}]\u5927\u4E8E{1}\u662F\u65E0\u6548\u7684

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:829
# args: iops
invalid\ volume\ IOPS[%s],\ it\ must\ be\ greater\ than\ 1\ (include\ 1) = \u5377IOPS[{0}]\u65E0\u6548\uFF0C\u5B83\u5FC5\u987B\u5927\u4E8E1\uFF08\u5305\u62EC1\uFF09

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:865
# args: 
\ usb\ device\ can\ only\ be\ called\ by\ admin\ account = USB\u8BBE\u5907\u53EA\u80FD\u7531\u7BA1\u7406\u5458\u5E10\u6237\u8C03\u7528

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:901
# args: level
Unknown\ code[%s]\ of\ Security\ Level = \u5B89\u5168\u7EA7\u522B\u7684\u672A\u77E5\u4EE3\u7801[{0}]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:918
# args: cidr
[%s]\ is\ not\ a\ standard\ cidr = [{0}]\u4E0D\u662F\u6807\u51C6CIDR

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:939
# args: hostUuid,os.distribution,os.version
the\ host[uuid\:%s]'s\ operating\ system\ %s\ %s\ is\ too\ old,\ the\ QEMU\ doesn't\ support\ QoS\ of\ network\ or\ disk\ IO.\ Please\ choose\ another\ instance\ offering\ with\ no\ QoS\ configuration = \u7269\u7406\u673A[uuid:{0}] \u7684\u64CD\u4F5C\u7CFB\u7EDF{1} {2} \u8FC7\u8001,  QEMU \u4E0D\u652F\u6301\u4E91\u76D8\u7684QOS IO\u8BBE\u7F6E \u3002 \u8BF7\u9009\u62E9\u522B\u7684\u6CA1\u6709Qos\u7684\u8BA1\u7B97\u89C4\u683C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1186
# args: newValue
invalid\ value[%s],\ it's\ not\ a\ double = \u9519\u8BEF\u7684\u503C[{0}]\uFF0C\u8FD9\u4E2A\u4E0D\u662F\u53CC\u7CBE\u5EA6\u503C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1154
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ greater\ than\ 0 = \u9519\u8BEF\u7684\u503C[{0}]\uFF0C\u5FC5\u987B\u662F\u4E00\u4E2A\u5927\u4E8E0\u7684\u53CC\u7CBE\u5EA6\u503C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1183
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ between\ (0,\ 1] = \u9519\u8BEF\u7684\u503C[{0}]\uFF0C\u8FD9\u4E2A\u5FC5\u987B\u57280~1\u4E4B\u95F4\u7684\u53CC\u7CBE\u5EA6\u503C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1197
# args: newValue
invalid\ value[%s],\ ZStack\ doesn't\ have\ such\ host\ allocator\ type = \u9519\u8BEF\u503C[{0}]\uFF0CZstack\u6CA1\u6709\u8FD9\u6837\u7684\u5206\u914D\u5668\u7C7B\u578B

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1219
# args: MevocoGlobalConfig.AIO_NATIVE.getCanonicalName(),MevocoGlobalConfig.AIO_NATIVE.value(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.getCanonicalName(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.value()
%s\ value\ is[%s],\ which\ is\ conflict\ with\ %s\ value\ [%s] = {0}\u503C\u4E3A[{1}]\uFF0C\u4E0E{2}\u503C[{3}]\u51B2\u7A81

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1489
# args: 
obj\ is\ not\ instanceof\ NicQos! = OBJ\u4E0D\u662FNICQoS\u7684\u5B9E\u4F8B\uFF01

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2054
# args: String.join(",", ips)
unexpected\ host\ management\ IPs\:\ [%s] = \u610F\u5916\u7684\u7269\u7406\u673A\u7BA1\u7406IP\uFF1A[{0}]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2190
# args: 
can\ not\ set\ local\ and\ configure\ at\ same\ time = \u4E0D\u80FD\u540C\u65F6\u8BBE\u7F6E\u672C\u5730\u548C\u914D\u7F6E

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2242
# args: 
can\ not\ find\ node\ A\ config\ info = \u627E\u4E0D\u5230\u8282\u70B9A\u914D\u7F6E\u4FE1\u606F

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2252
# args: 
can\ not\ find\ node\ A\ address\ info\ from\ bootstrap\ agent = \u65E0\u6CD5\u4ECE\u542F\u52A8\u4EE3\u7406\u4E2D\u627E\u5230\u8282\u70B9A\u5730\u5740\u4FE1\u606F

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2314
# args: s.getJobUuid()
can\ not\ get\ bootstrap\ job\ %s\ result\ after\ 900s = \u65E0\u6CD5\u5728900\u79D2\u540E\u83B7\u53D6\u5F15\u5BFC\u7A0B\u5E8F\u4F5C\u4E1A{0}\u7ED3\u679C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2322
# args: ret.getRetCode(),ret.getStdout(),ret.getStderr()
curl\ bootstrap\ agent\ finished,\ return\ code\:\ %s,\ stdout\:\ %s,\ stderr\:\ %s = cURL\u5F15\u5BFC\u4EE3\u7406\u5DF2\u5B8C\u6210\uFF0C\u8FD4\u56DE\u4EE3\u7801\uFF1A{0}\uFF0C\u6807\u51C6\u8F93\u51FA\uFF1A{1}\uFF0C\u6807\u51C6\u9519\u8BEF\uFF1A{2}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2686
# args: errorOfNodeA.getCauses().get(0)
node\ A\ update\ factory\ mode\ failed,\ details\:\ %s = \u8282\u70B9A\u66F4\u65B0\u5DE5\u5382\u6A21\u5F0F\u5931\u8D25\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2684
# args: errorCodeList.getCauses().get(0)
all\ management\ node\ update\ factory\ mode\ failed,\ details\:\ %s = \u6240\u6709\u7BA1\u7406\u8282\u70B9\u66F4\u65B0\u5DE5\u5382\u6A21\u5F0F\u5931\u8D25\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2790
# args: ManagementNodeState.RUNNING
management\ node\ status\ is\ not\ %s = \u7BA1\u7406\u8282\u70B9\u72B6\u6001\u4E0D\u662F{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2720
# args: r.getStdout()
some\ node\ on\ factory\ mode\ exists,\ detail\ of\ arping\:\ %s = \u5DE5\u5382\u6A21\u5F0F\u4E0A\u7684\u67D0\u4E9B\u8282\u70B9\u5B58\u5728\uFF0CARPING\u7684\u8BE6\u7EC6\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2741
# args: 
set\ address\ on\ node\ A\ failed = \u5728\u8282\u70B9A\u4E0A\u8BBE\u7F6E\u5730\u5740\u5931\u8D25

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2738
# args: 
this\ node\ is\ not\ node\ A = \u6B64\u8282\u70B9\u4E0D\u662F\u8282\u70B9A

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2875
# args: bandwidth
networkInboundBandwidth\ format\ error\ %s = \u4E0B\u884C\u7F51\u7EDC\u5E26\u5BBD\u683C\u5F0F\u9519\u8BEF{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2887
# args: bandwidth
networkOutboundBandwidth\ format\ error\ %s = \u4E0A\u884C\u7F51\u7EDC\u5E26\u5BBD\u8D85\u683C\u5F0F\u9519\u8BEF{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2884
# args: 
networkOutboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = \u8D85\u8FC7\u4E0A\u884C\u7F51\u7EDC\u5E26\u5BBD\u8D85\u8FC7\u6700\u5927\u503C32G bps

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3060
# args: volume.getUuid(),vm.getUuid()
Shareable\ Volume[uuid\:%s]\ has\ already\ been\ attached\ to\ VM[uuid\:%s] = \u5171\u4EAB\u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u5230\u4E91\u4E3B\u673A[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3078
# args: 
shareable\ disk\ only\ support\ virtio-scsi\ type\ for\ now = \u76EE\u524D\u5171\u4EAB\u76D8\u53EA\u652F\u6301virtio-scsi

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3213
# args: sharedVolUuids
shareable\ volume(s)[uuid\:\ %s]\ attached,\ not\ support\ to\ group\ snapshot. = \u53EF\u5171\u4EAB\u4E91\u76D8[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\uFF0C\u4F46\u4E0D\u652F\u6301\u7EC4\u5FEB\u7167\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1811
# args: msg.getMode()
invalid\ volume\ qos\ mode\:\ %s = \u65E0\u6548\u7684\u5377QoS\u6A21\u5F0F\uFF1A{0}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:284
# args: msg.getIoThreadId(),msg.getPin(),vm.getUuid(),rsp.getError()
Failed\ set\ iothread[%d]\ pin[%s]\ on\ vm[%s]\:\ %s. = \u65E0\u6CD5\u5728VM[{2}]\u4E0A\u8BBE\u7F6EIOThread[{0}]Pin[{1}]\uFF1A{3}\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:339
# args: msg.getUuid()
can\ not\ found\ in\ used\ snapshot\ tree\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = \u5728\u5377[uuid\uFF1A{0}]\u7684\u5DF2\u4F7F\u7528\u5FEB\u7167\u6811\u4E2D\u627E\u4E0D\u5230\u3002\u53EF\u80FD\u4E0D\u9700\u8981\u9A8C\u8BC1\u5FEB\u7167\u94FE\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:352
# args: currentTreeUuid,msg.getUuid()
can\ not\ found\ latest\ snapshot\ from\ tree[uuid\:\ %s]\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = \u4ECE\u6811[uuid\uFF1A{0}]\uFF08\u5C5E\u4E8E\u5377[uuid\uFF1A{1}]\uFF09\u4E2D\u627E\u4E0D\u5230\u6700\u65B0\u5FEB\u7167\u3002\u53EF\u80FD\u4E0D\u9700\u8981\u9A8C\u8BC1\u5FEB\u7167\u94FE\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:368
# args: currentTreeUuid,msg.getUuid()
can\ not\ found\ snapshots\ from\ tree[uuid\:\ %s]\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = \u4ECE\u6811[uuid\uFF1A{0}]\uFF08\u5C5E\u4E8E\u5377[uuid\uFF1A{1}]\uFF09\u4E2D\u627E\u4E0D\u5230\u5FEB\u7167\u3002\u53EF\u80FD\u4E0D\u9700\u8981\u9A8C\u8BC1\u5FEB\u7167\u94FE\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:678
# args: vmInstanceVO.getUuid()
How\ can\ a\ Running\ VM[uuid\:%s]\ has\ no\ hostUuid? = \u6B63\u5728\u8FD0\u884C\u7684VM[uuid\uFF1A{0}]\u600E\u4E48\u4F1A\u6CA1\u6709HOSTuuid\uFF1F

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:676
# args: vmInstanceVO.getUuid()
Unexpectedly,\ VM[uuid\:%s]\ is\ not\ running\ any\ more,\ please\ try\ again\ later = \u610F\u5916\u7684\u662F\uFF0CVM[uuid\uFF1A{0}]\u4E0D\u518D\u8FD0\u884C\uFF0C\u8BF7\u7A0D\u540E\u518D\u8BD5

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:842
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),errorInfoMap.keySet(),errorInfoMap.values()
after\ subtracting\ reserved\ capacity[%s],\ primary\ storage[%s]\ don't\ have\ required\ size[%s\ bytes],\ may\ be\ the\ threshold\ of\ primary\ storage\ physical\ capacity\ setting\ is\ lower = \u51CF\u53BB\u4FDD\u7559\u5BB9\u91CF[{0}]\u540E\uFF0C\u4E3B\u5B58\u50A8[{1}]\u6CA1\u6709\u6240\u9700\u7684\u5927\u5C0F[{2}\u5B57\u8282]\uFF0C\u53EF\u80FD\u662F\u4E3B\u5B58\u50A8\u7269\u7406\u5BB9\u91CF\u8BBE\u7F6E\u7684\u9608\u503C\u8F83\u4F4E

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1231
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ not\ attached = \u5F53\u4E91\u76D8[uuid:{1}]\u672A\u52A0\u8F7D\u65F6\uFF0C\u65E0\u6CD5\u7ED9\u4E91\u76D8[{0}]\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1237
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ appears\ twice = \u5F53\u4E91\u76D8[uuid:{1}]\u51FA\u73B0\u591A\u6B21\u65F6\uFF0C\u65E0\u6CD5\u7ED9\u4E91\u76D8[{0}]\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1244
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid(),volumeVOS.get(0).getVmInstanceUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ attached\ multiple\ vms[%s,\ %s] = \u5F53\u4E91\u76D8[uuid:{1}]\u52A0\u8F7D\u5230\u591A\u4E2A\u4E91\u4E3B\u673A\u4E0A\u65F6\uFF0C\u65E0\u6CD5\u7ED9\u4E91\u76D8[{0}]\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1251
# args: 
no\ volumes\ found = \u627E\u4E0D\u5230\u4E91\u76D8

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1516
# args: SizeUnit.BYTE.toGigaByte((double) resize)
this\ snapshot\ recording\ the\ volume\ state\ before\ resize\ to\ %fG\ is\ created\ automatically = \u8BE5\u5FEB\u7167\u8BB0\u5F55\u4E91\u76D8\u6269\u5BB9\u5230{0}G\u4E4B\u524D\u7684\u72B6\u6001\uFF0C\u7531\u7CFB\u7EDF\u81EA\u52A8\u521B\u5EFA

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1823
# args: msg.getUuid()
DeleteVolumeQos\ [%s]\ ignore\ because\ of\ account\ privilege. = DeleteVolumeQoS[{0}]\u7531\u4E8E\u5E10\u6237\u6743\u9650\u800C\u5FFD\u7565\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1891
# args: ivo.getHostUuid(),ivo.getState(),VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString()
Cannot\ delete\ vm's\ volume\ qos\ on\ host\ %s,\ because\ the\ current\ vm\ is\ in\ state\ of\ %s,\ but\ support\ expect\ states\ are\ [%s,\ %s] = \u65E0\u6CD5\u5728\u7269\u7406\u673A{0}\u4E0A\u5220\u9664VM\u7684\u5377QoS\uFF0C\u56E0\u4E3A\u5F53\u524DVM\u7684\u72B6\u6001\u4E3A{1}\uFF0C\u4F46\u652F\u6301\u7684\u9884\u671F\u72B6\u6001\u4E3A[{2}\uFF0C{3}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2039
# args: VolumeQos.getVolumeQosByMode(self.getVolumeQos(), mode)
non\ admin\ account\ cannot\ set\ bandwidth\ more\ than\ %s = \u975E\u7BA1\u7406\u5458\u5E10\u6237\u65E0\u6CD5\u8BBE\u7F6E\u5927\u4E8E{0}\u7684\u5E26\u5BBD

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2051
# args: 
unknown\ message\ version. = \u672A\u77E5\u6D88\u606F\u7248\u672C\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2068
# args: 
unknown\ qos\ limit\ type. = \u672A\u77E5\u7684QoS\u9650\u5236\u7C7B\u578B\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2082
# args: limitType
Non-admin\ account\ is\ only\ allowed\ to\ set\ the\ total\ %s\ limit. = \u4EC5\u5141\u8BB8\u975E\u7BA1\u7406\u5458\u5E10\u6237\u8BBE\u7F6E\u603B{0}\u9650\u5236\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2091
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ total\ %s\ limits\ as\ unlimited. = \u975E\u7BA1\u7406\u5458\u5E10\u6237\u65E0\u6CD5\u5C06\u603B{0}\u9650\u5236\u8BBE\u7F6E\u4E3A\u65E0\u9650\u5236\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2095
# args: limitType.getType(),totalLimit
Non-admin\ account\ cannot\ set\ the\ total\ %s\ limit\ greater\ than\:\ %s = \u975E\u7BA1\u7406\u5458\u5E10\u6237\u65E0\u6CD5\u5C06\u603B{0}\u9650\u5236\u8BBE\u7F6E\u4E3A\u5927\u4E8E\uFF1A{1}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2102
# args: limitType.getType()
Non-admin\ account\ is\ only\ allowed\ to\ set\ the\ read/write\ %s\ limits. = \u4EC5\u5141\u8BB8\u975E\u7BA1\u7406\u5458\u5E10\u6237\u8BBE\u7F6E\u8BFB/\u5199{0}\u9650\u5236\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2108
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ read\ %s\ limits\ as\ unlimited. = \u975E\u7BA1\u7406\u5458\u5E10\u6237\u65E0\u6CD5\u5C06\u8BFB\u53D6{0}\u9650\u5236\u8BBE\u7F6E\u4E3A\u65E0\u9650\u5236\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2119
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ write\ %s\ limits\ as\ unlimited. = \u975E\u7BA1\u7406\u5458\u5E10\u6237\u65E0\u6CD5\u5C06\u5199\u5165{0}\u9650\u5236\u8BBE\u7F6E\u4E3A\u65E0\u9650\u5236\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2128
# args: limitType.getType(),readLimit,writeLimit
Non-admin\ account\ cannot\ set\ the\ read/write\ %s\ limits\ greater\ than\:\ %s/%s = \u975E\u7BA1\u7406\u5458\u5E10\u6237\u65E0\u6CD5\u5C06\u8BFB/\u5199{0}\u9650\u5236\u8BBE\u7F6E\u4E3A\u5927\u4E8E\uFF1A{1}/{2}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2215
# args: self.getUuid()
volume\ [%s]\ isn't\ attached\ to\ any\ vm,\ cannot\ get\ qos\ by\ forceSync = \u5377[{0}]\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55VM\uFF0C\u65E0\u6CD5\u901A\u8FC7ForceSync\u83B7\u5F97QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2221
# args: self.getUuid()
volume\ [%s]\ isn't\ attached\ to\ any\ vm\ (or\ vm\ is\ not\ existed\ now),\ cannot\ sync\ volume\ qos = \u5377[{0}]\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55VM\uFF08\u6216VM\u73B0\u5728\u4E0D\u5B58\u5728\uFF09\uFF0C\u65E0\u6CD5\u540C\u6B65\u5377QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2226
# args: vm.getUuid()
vm\ [%s]'\ state\ must\ be\ Running\ or\ Paused\ to\ sync\ volume\ qos = VM[{0}]\u72B6\u6001\u5FC5\u987B\u4E3A\u201C\u6B63\u5728\u8FD0\u884C\u201D\u6216\u201C\u5DF2\u6682\u505C\u201D\u624D\u80FD\u540C\u6B65\u5377QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2231
# args: 
vm\ [%s]'s\ HostUuid\ is\ null,\ cannot\ sync\ volume\ qos = VM[{0}]\u7684HostUuid\u4E3A\u7A7A\uFF0C\u65E0\u6CD5\u540C\u6B65\u5377QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2377
# args: msg.getVolume().getUuid(),msg.getVmInstanceUuid()
failed\ to\ detach\ shareable\ volume[uuid\:%s]\ from\ VmInstance[uuid\:%s] = \u4E0D\u80FD\u5378\u8F7D\u4E91\u4E3B\u673A[uuid:{1}]\u4E0A\u7684\u5171\u4EAB\u76D8[uuid:{0}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2389
# args: StringUtils.join(errors, "\n\n")
failed\ to\ detach\ shareable\ volume\ from\ VmInstance\:[\n%s] = \u4E0D\u80FD\u5378\u8F7D\u4E91\u4E3B\u673A\u4E0A\u7684\u5171\u4EAB\u76D8\uFF0C\u539F\u56E0\u662F{0}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java:89
# args: resourceUuid
unsupported\ operation\ for\ setting\ root\ volume[%s]\ multiQueues. = \u4E0D\u652F\u6301\u8BBE\u7F6E\u6839\u5377[{0}]\u591A\u961F\u5217\u7684\u64CD\u4F5C\u3002

# at: src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java:93
# args: resourceUuid
unsupported\ operation\ for\ setting\ virtio-scsi\ volume[%s]\ multiQueues. = \u4E0D\u652F\u6301\u8BBE\u7F6Evirtio-SCSI\u5377[{0}]\u591A\u961F\u5217\u7684\u64CD\u4F5C\u3002

# at: src/main/java/org/zstack/mevoco/PauseWorldApiInterceptor.java:46
# args: MevocoSystemTags.CONFIRM_CALL_API.getTagFormat()
ZStack\ has\ been\ paused,\ reject\ all\ API\ which\ are\ not\ read\ only.\ If\ you\ really\ want\ to\ call\ it\ and\ known\ the\ consequence,\ add\ '%s'\ into\ systemTags. = ZStack\u5DF2\u6682\u505C\uFF0C\u62D2\u7EDD\u6240\u6709\u975E\u53EA\u8BFBAPI\u3002\u5982\u679C\u60A8\u786E\u5B9E\u60F3\u8C03\u7528\u5B83\u5E76\u4E14\u77E5\u9053\u7ED3\u679C\uFF0C\u8BF7\u5C06\u201C{0}\u201D\u6DFB\u52A0\u5230SystemTags\u4E2D\u3002

# at: src/main/java/org/zstack/mevoco/PremiumGlobalConfig.java:27
# args: getName()
the\ current\ version\ of\ license\ does\ not\ support\ modifying\ this\ global\ config\ [name\:%s] = \u5F53\u524Dlicense\u7248\u672C\u4E0D\u652F\u6301\u4FEE\u6539\u6B64\u5168\u5C40\u8BBE\u7F6E[name:{0}]

# at: src/main/java/org/zstack/mevoco/PremiumResourceConfig.java:22
# args: globalConfig.getName()
the\ current\ version\ of\ license\ does\ not\ support\ modifying\ this\ resource\ config\ [name\:%s] = \u5F53\u524D\u7248\u672C\u7684\u8BB8\u53EF\u8BC1\u4E0D\u652F\u6301\u4FEE\u6539\u6B64\u8D44\u6E90\u914D\u7F6E[\u540D\u79F0\uFF1A{0}]

# at: src/main/java/org/zstack/mevoco/VolumeQos.java:331
# args: 
cannot\ find\ mode\ from\ null\ VolumeQos = \u65E0\u6CD5\u4ECENULL\u5377\u4E2D\u627E\u5230\u6A21\u5F0FQoS

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:190
# args: msg.getMonitorTriggerUuid()
cannot\ find\ monitor\ trigger[uuid\:%s],\ it\ may\ have\ been\ deleted = \u4E0D\u80FD\u627E\u5230\u89E6\u53D1\u76D1\u63A7\u5668[uuid:{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:199
# args: msg.getMonitorTriggerActionUuid()
cannot\ find\ monitor\ trigger\ action[uuid\:%s],\ it\ may\ have\ been\ deleted = \u4E3A\u627E\u5230\u8FD9\u4E2A\u76D1\u63A7\u89E6\u53D1\u884C\u4E3A[uuid:{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:243
# args: msg.getResourceType()
the\ resource[type\:%s]\ doesn't\ have\ any\ monitoring\ items = \u8BE5\u8D44\u6E90[type:{0}]\u6CA1\u6709\u4EFB\u4F55\u76D1\u63A7\u6761\u76EE

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:335
# args: msg.getTargetResourceUuid(),msg.getSession().getAccountUuid()
the\ resource[uuid\:%s]\ doesn't\ belong\ to\ the\ account[uuid\:%s] = \u8BE5\u8D44\u6E90[uuid:{0}]\u4E0D\u5C5E\u4E8E\u8D26\u6237[uuid:{1}]

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:386
# args: resourceUuid
cannot\ find\ type\ for\ the\ resource[uuid\:%s] = \u672A\u627E\u5230\u8D44\u6E90[uuid:{0}]\u8FD9\u79CD\u7C7B\u578B

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:391
# args: resourceType,triggerExpression.getItem()
no\ monitoring\ item\ found\ for\ the\ resourceType[%s]\ and\ item[%s] = \u672A\u627E\u5230\u8D44\u6E90\u7C7B\u578B[{0}]\u548C\u6761\u76EE[{1}]\u8FD9\u79CD\u76D1\u63A7\u6761\u76EE

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:50
# args: args
A\ resource[name\:{resourceName},\ uuid\:{resourceUuid},\ type\:{resourceType}]'s\ monitoring\ trigger[uuid\:{triggerUuid}]\ changes\ status\ to\ {triggerStatus} = \u8D44\u6E90[name:'{resourceName}', uuid:'{resourceUuid}', type:'{resourceType}']\u7684\u76D1\u542C\u89E6\u53D1\u5668[uuid:'{triggerUuid}']\u4FEE\u6539\u72B6\u6001\u4E3A'{triggerStatus}'

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:55
# args: 
\n\=\=\=\ BELOW\ ARE\ DETAILS\ OF\ THE\ PREVIOUS\ ALERT\ \=\=\= = \n=== \u4EE5\u4E0B\u662F\u4E0A\u4E00\u6B21\u8B66\u544A\u5185\u5BB9 ===

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:58
# args: 
\nalert\ details\: = \n\u8B66\u544A\u5185\u5BB9: 

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:59
# args: args
\ncondition\:\ {itemName}\ {operator}\ {threshold} = \n\u73AF\u5883: '{itemName}' '{operator}' '{threshold}'

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:60
# args: args
\ncurrent\ value\:\ {value} = \n\u5F53\u524D\u503C: '{value}'

# at: src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java:31
# args: 
Host\ CPU\ utilization = CPU\u4F7F\u7528\u7387

# at: src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java:29
# args: 
VM\ CPU\ utilization = \u4E91\u4E3B\u673ACPU\u4F7F\u7528\u7387

# at: src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java:98
# args: ruleFile
fail\ to\ create\ new\ File[%s] = \u65E0\u6CD5\u521B\u5EFA\u65B0\u6587\u4EF6[{0}]

# at: src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java:143
# args: rb.name,r
conflict\ alert\ rule[%s],\ there\ has\ been\ a\ rule[%s]\ with\ the\ same\ name = \u51B2\u7A81\u63D0\u793A\u89C4\u5219[{0}]\uFF0C\u8FD9\u91CC\u5DF2\u7ECF\u5B58\u5728\u548C\u5B83\u4E00\u6837\u540D\u79F0\u7684\u89C4\u5219

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusAlert.java:79
# args: resourceName,resourceUuid,toI18nString(resourceType),itemName,toI18nString(expression.getOperator()),expression.getConstant(),value,tvo.getDuration()
ALERT\:\n\ resource[name\:\ %s,\ uuid\:\ %s,\ type\:\ %s]\nevent\:\ %s\ %s\ %s\ncurrent\ value\:\ %s\nduration\:\ %s\ seconds\n = \u8B66\u544A:\n \u8D44\u6E90[\u540D\u79F0: {0}, uuid: {1}, \u7C7B\u578B: {2}]\n \u4E8B\u4EF6: {3} {4} {5}\n \u5468\u671F: {7}\n

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:40
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it\ must\ be\ in\ format\ of,\ for\ example,\ 10s,\ 1h = \u76F8\u5173\u65F6\u95F4[{0}]\u4E0D\u5408\u6CD5,\u683C\u5F0F\u5FC5\u987B\u4F8B\u598210s\uFF0C1h

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:44
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it's\ too\ big = \u76F8\u5173\u65F6\u95F4[{0}]\u4E0D\u5408\u6CD5\uFF0C\u503C's \u8FC7\u5927

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilAlertWriter.java:95
# args: 
CPU\ number = CPU\u6570\u91CF

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilItem.java:70
# args: cpu,trigger.getTargetResourceUuid(),cpuNum
invalid\ cpu[%s],\ the\ host[uuid\:%s]\ doesn't\ have\ a\ CPU\ numbered\ by\ %s = \u65E0\u6548CPU\u6570\u76EE[{0}]\uFF0C\u7269\u7406\u673A[uuid:{1}]\u5B58\u5728\u7684CPU\u6570\u76EE\u662F{2}

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:92
# args: 
Host\ Disk\ Capacity = \u7269\u7406\u673A\u78C1\u76D8\u5BB9\u91CF

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:98
# args: 
Host\ Disk\ Capacity\ type = \u7269\u7406\u673A\u78C1\u76D8\u5BB9\u91CF\u7C7B\u578B

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:100
# args: 
Host\ devices = \u7269\u7406\u673A\u670D\u52A1

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostNetworkIOAlertWriter.java:77
# args: 
Host = \u7269\u7406\u673A

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusMonitorProviderFactory.java:124
# args: ret.get("errorType"),ret.get("error")
query\ failure,\ errorType\:%s,\ error\:\ %s = \u67E5\u8BE2\u5931\u8D25\uFF0C\u9519\u8BEF\u7C7B\u578B: {0}, \u9519\u8BEF: {1}

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:81
# args: 
CPU\ Utilization = CPU\u4F7F\u7528\u7387

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:84
# args: 
CPU\ utilization\ type = CPU\u4F7F\u7528\u7C7B\u578B

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:86
# args: 
Disk\ IO = \u78C1\u76D8IO

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:92
# args: 
Disk\ IO\ direction = \u78C1\u76D8IO\u65B9\u5411

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:93
# args: 
Disk\ IO\ type = \u78C1\u76D8IO\u7C7B\u578B

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOItem.java:19
# args: type,ALLOWED_TYPES
invalid\ type[%s],\ only\ %s\ are\ allowed = \u65E0\u6548\u7C7B\u578B[{0}]\uFF0C\u53EA\u6709{1}\u88AB\u5141\u8BB8

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilAlertWriter.java:77
# args: 
Memory\ Utilization = \u5185\u5B58\u4F7F\u7528\u7387

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:57
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ float\ or\ double\ number = \u65E0\u6548\u7684\u53C2\u6570\u503C[{0}]\uFF0C\u5B83\u5FC5\u987B\u662F\u4E00\u4E2Afloat\u6216\u8005double\u7C7B\u578B\u7684\u6570\u503C

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:53
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ float\ or\ double\ number\ greater\ than\ zero\ and\ lesser\ than\ one = \u65E0\u6548\u53C2\u6570\u503C[{0}]\uFF0C\u5B83\u5FC5\u987B\u662F\u4E00\u4E2Afloat\u6216\u8005double\u7C7B\u578B\u7684\u5927\u4E8E0\u5C0F\u4E8E1\u7684\u6570\u503C

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:47
# args: expression.getArguments().keySet()
invalid\ arguments\ %s,\ no\ argument\ is\ allowed = \u65E0\u6548\u53C2\u6570\u5217\u8868{0}\uFF0C\u6CA1\u6709\u88AB\u53C2\u6570\u88AB\u5141\u8BB8

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:84
# args: 
Network\ IO = \u7F51\u7EDCIO

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:89
# args: 
Network\ IO\ direction = \u7F51\u7EDCIO\u65B9\u5411

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:77
# args: 
Virtual\ Machine = \u4E91\u4E3B\u673A\u5668

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:22
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ number(int,\ long,\ float,\ double) = \u65E0\u6548\u53C2\u6570\u503C[{0}]\uFF0C\u4ED6\u5E94\u8BE5\u662F\u4E00\u4E2A\u6570\u5B57(int, long, float, double)

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:18
# args: dir,ALLOWED_DIRECTION
invalid\ direction[%s],\ only\ %s\ are\ allowed = \u65E0\u6548direction[{0}]\uFF0C\u53EA\u6709{1}\u88AB\u5141\u8BB8

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:106
# args: expr,e.getMessage()
invalid\ expression\:\ %s,\ %s = \u65E0\u6548\u7684\u8BED\u53E5: {0}, {1}

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ expression\ found = \u65E0\u6548\u7684\u8BED\u53E5: {0}\uFF0C\u672A\u627E\u5230\u8BE5\u8BED\u53E5

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:127
# args: key
missing\ parameter\ '%s'\ in\ the\ expression = \u5728\u8BED\u53E5\u4E2D\u7F3A\u5931\u53C2\u6570{0}

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:131
# args: key,clz,value.getClass()
wrong\ type\ of\ parameter\ '%s'\ in\ the\ expression,\ it\ must\ be\ type\ of\ %s,\ but\ got\ %s = \u5728\u8BED\u53E5\u4E2D{0}\u53C2\u6570\u7C7B\u578B\u9519\u8BEF\uFF0C\u5B83\u5FC5\u987B\u662F{1}\u8FD9\u79CD\u7C7B\u578B\uFF0C\u4F46\u662F\u83B7\u5F97\u7684\u662F{2}

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:58
# args: partNum
The\ number[value\:%s]\ is\ not\ a\ valid\ part\ number. = \u7F16\u53F7[\u503C\uFF1A{0}]\u4E0D\u662F\u6709\u6548\u7684\u7269\u6599\u7F16\u53F7\u3002

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:69
# args: mttyDeviceUuid,accu
The\ quantity\ exceeded.\ The\ device[uuid\:\ %s]\ required\ se\ devices\ number\ exceeds\ a\ quantiry[value\:\ %s]. = \u6570\u91CF\u8D85\u51FA\u3002\u8BBE\u5907[uuid\uFF1A{0}]\u6240\u9700\u7684SE\u8BBE\u5907\u6570\u91CF\u8D85\u8FC7\u6570\u91CF[\u503C\uFF1A{1}]\u3002

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:93
# args: rsp.getError()
failed\ to\ generate\ se\ devices,\ because\:%s = \u65E0\u6CD5\u751F\u6210SE\u8BBE\u5907\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:152
# args: rsp.getError()
failed\ to\ ungenerate\ se\ devices,\ because\:%s = \u65E0\u6CD5\u53D6\u6D88\u751F\u6210SE\u8BBE\u5907\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:41
# args: msg.getMttyDeviceUuid()
mtty\ device[uuid\:%s]\ is\ not\ virtualized\ into\ mdevs = MTTY\u8BBE\u5907[uuid\uFF1A{0}]\u672A\u865A\u62DF\u5316\u4E3AMDEV

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:58
# args: msg.getMttyDeviceUuid()
mdev\ devices\ generated\ from\ mtty\ device[uuid\:%s]\ still\ attached\ to\ vm = \u4ECEMTTY\u8BBE\u5907[uuid\uFF1A{0}]\u751F\u6210\u7684MDEV\u8BBE\u5907\u4ECD\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:87
# args: mtty.getHostUuid(),mtty.getUuid()
the\ host[uuid\:%s]\ that\ mtty\ device[uuid\:%s]\ in\ is\ not\ Connected = \u672A\u8FDE\u63A5MTTY\u8BBE\u5907[uuid\uFF1A{1}]\u6240\u5728\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:78
# args: msg.getMttyDeviceUuid()
mtty\ device[uuid\:%s]\ cannot\ be\ virtualized\ into\ mdevs = MTTY\u8BBE\u5907[uuid\uFF1A{0}]\u65E0\u6CD5\u865A\u62DF\u5316\u4E3AMDEV

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:59
# args: rpAddress
Rendezvous\ Point\ [%s]\ is\ not\ a\ unicast\ address = \u7EC4\u64AD\u805A\u5408\u70B9\u5730\u5740[{0}]\u4E0D\u662F\u5355\u64AD\u5730\u5740

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:63
# args: multicastGroup
group\ address\ [%s]\ is\ not\ a\ multicast\ address = \u5730\u5740 [{0}] \u4E0D\u662F\u7EC4\u64AD\u5730\u5740

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:75
# args: msg.getRpAddress(),msg.getGroupAddress(),msg.getUuid()
rp\ address\ pair\ [%s\:\ %s]\ already\ existed\ for\ multicast\ router\ [uuid\:%s] = \u7EC4\u64AD\u805A\u5408\u70B9\u5730\u5740\u5BF9[{0}: {1}]\u5DF2\u7ECF\u5B58\u5728\u4E8E\u7EC4\u64AD\u8DEF\u7531\u5668[uuid:{2}]\u7684\u914D\u7F6E\u4E2D

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:89
# args: msg.getRpAddress(),msg.getGroupAddress(),msg.getUuid()
rp\ address\ tuple\ [%s\ \:\ %s]\ is\ not\ existed\ for\ multicast\ router\ [uuid\:%s] = \u7EC4\u64AD\u805A\u5408\u70B9\u5730\u5740\u5BF9[{0}: {1}]\u4E0D\u5B58\u4E8E\u7EC4\u64AD\u8DEF\u7531\u5668[uuid:{2}]\u7684\u914D\u7F6E\u4E2D

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:98
# args: msg.getUuid()
multicastRouter[uuid\:%s]\ has\ not\ been\ attached\ to\ vpc\ router = \u7EC4\u64AD\u8DEF\u7531\u5668[uuid:{0}]\u6CA1\u6709\u5173\u8054\u5230VPC\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:124
# args: msg.getVpcRouterVmUuid()
multicast\ already\ enabled\ on\ vpc\ router\ uuid[\:%s] = VPC\u8DEF\u7531\u5668[uuid:{0}]\u7684\u7EC4\u64AD\u8DEF\u529F\u80FD\u5DF2\u7ECF\u6253\u5F00

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:317
# args: msg.getUuid()
vpc\ router\ for\ multicast\ router\ [uuid\:%s]\ has\ been\ deleted = \u7EC4\u64AD\u8DEF\u7531\u5668[uuid:{0}]\u5173\u8054\u7684VPC\u8DEF\u7531\u5668\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:760
# args: msg.getUuid()
multicast\ router\ [uuid\:%s]\ is\ not\ attached\ to\ Vpc\ Router = \u7EC4\u64AD\u8DEF\u7531\u5668[uuid:{0}]\u6CA1\u6709\u5173\u8054\u5230VPC\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/multicast/router/backend/MulticastRouterVyosBackendImpl.java:95
# args: vrUuid
multicast\ router\ [uuid\:%s]\ has\ been\ delete\ during\ enable\ multilcast\ on\ backend = \u7EC4\u64AD\u8DEF\u7531\u5668[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:91
# args: msg.getNasFileSystemUuid()
nas\ file\ system\ [%s]\ is\ not\ existed\ yet = NAS\u6587\u4EF6\u7CFB\u7EDF[{0}]\u5C1A\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:139
# args: type
cannot\ find\ nas\ factory\ for\ type\:\ %s = \u627E\u4E0D\u5230\u7C7B\u578B\u4E3A{0}\u7684NAS\u5DE5\u5382

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:164
# args: f.getClass().getSimpleName(),old.getClass().getSimpleName(),f.getNasFileSystemType()
duplicate\ NasFileSystemFactory[%s,\ %s]\ for\ type[%s] = \u7C7B\u578B[{2}]\u7684NASFileSystemFactory[{0}\uFF0C{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:63
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ attached\ to\ cluster[uuid\:%s],\ can't\ attach\ again = \u4E0D\u80FD\u518D\u6B21\u6302\u8F7D\u4E8C\u5C42\u7F51\u7EDC[uuid:{0}]\uFF0C\u56E0\u4E3A\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A\u4E86

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:75
# args: otherL2s.get(0),l2.getPhysicalInterface()
could\ not\ attach\ l2\ network,\ because\ there\ is\ another\ network\ [uuid\:%]\ on\ physical\ interface\ [%s]\ with\ different\ vswitch\ type = \u65E0\u6CD5\u8FDE\u63A5\u4E8C\u5C42\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u7269\u7406\u63A5\u53E3[{0}]\u4E0A\u5B58\u5728\u53E6\u4E00\u4E2A\u5177\u6709\u4E0D\u540CvSwitch\u7C7B\u578B\u7684\u7F51\u7EDC[uuid\uFF1A%]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:87
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ not\ attached\ to\ cluster[uuid\:%s] = \u4E8C\u5C42\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u96C6\u7FA4\u4E0A[uuid:{1}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:101
# args: msg.getType()
unsupported\ l2Network\ type[%s] = \u4E0D\u652F\u6301\u7684\u7F51\u7EDC\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:105
# args: msg.getvSwitchType()
unsupported\ vSwitch\ type[%s] = \u4E0D\u652F\u6301\u7684vSwitch\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:626
# args: vl2.getUuid(),vl2.getName(),msg.getClusterUuid(),vl2.getPhysicalInterface(),vl2.getVlan(),tl2.getUuid()
There\ has\ been\ a\ L2VlanNetwork[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s],\ vlan[%s].\ Failed\ to\ attach\ L2VlanNetwork[uuid\:%s] = \u4E8C\u5C42\u7F51\u7EDC\u6302\u8F7D\u5931\u8D25[uuid:{5}]: \u4E8C\u5C42\u7F51\u7EDC[uuid:{0}, name:{1}]\u7684\u7269\u7406\u63A5\u53E3[{3}], vlan[{4}]\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{2}]\u4E0A

# at: src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:608
# args: l2.getUuid(),l2.getName(),msg.getClusterUuid(),l2.getPhysicalInterface(),tl2.getUuid()
There\ has\ been\ a\ l2Network[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s].\ Failed\ to\ attach\ l2Network[uuid\:%s] = \u4E8C\u5C42\u7F51\u7EDC\u6302\u8F7D\u5931\u8D25[uuid:{4}]: \u4E8C\u5C42\u7F51\u7EDC[uuid:{0}, name:{1}]\u7684\u7269\u7406\u63A5\u53E3[{3}]]\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{2}]\u4E0A

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:84
# args: msg.getvSwitchUuid(),msg.getVlan()
could\ not\ create\ L2PortGroupNetwork,\ because\ L2VirtualSwitchNetwork[uuid\:%s]\ already\ has\ L2PortGroupNetworks\ with\ the\ same\ vlanId[%s] = \u521B\u5EFA\u7AEF\u53E3\u7EC4\u5931\u8D25\uFF0C\u56E0\u4E3A\u865A\u62DF\u4EA4\u6362\u673A[uuid:{0}]\u5DF2\u7ECF\u5B58\u5728vlanId[{1}]\u7684\u7AEF\u53E3\u7EC4

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:106
# args: vswitchVO.getPhysicalInterface(),msg.getClusterUuid()
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ interface[%s]\ in\ cluster[uuid\:%s]\ is\ already\ used\ for\ another\ L2VirtualSwitchNetwork = \u6302\u8F7D\u865A\u62DF\u4EA4\u6362\u673A\u5931\u8D25\uFF0C\u56E0\u4E3A\u96C6\u7FA4[uuid:{1}]\u4E2D\u7684\u7F51\u5361[{0}]\u5DF2\u88AB\u5176\u4ED6\u865A\u62DF\u4EA4\u6362\u673A\u4F7F\u7528

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:113
# args: msg.getClusterUuid()
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ there\ are\ no\ hosts\ in\ cluster[uuid\:%s] = \u6302\u8F7D\u865A\u62DF\u4EA4\u6362\u673A\u5931\u8D25\uFF0C\u56E0\u4E3A\u96C6\u7FA4[uuid:{0}]\u4E2D\u4E0D\u5B58\u5728\u4EFB\u4F55\u7269\u7406\u673A

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:126
# args: vswitchVO.getPhysicalInterface(),hostUuid
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ interface[%s]\ should\ be\ created\ on\ host[uuid\:%s] = \u6302\u8F7D\u865A\u62DF\u4EA4\u6362\u673A\u5931\u8D25\uFF0C\u56E0\u4E3A\u7F51\u5361[{0}]\u5E94\u5F53\u5728\u7269\u7406\u673A[uuid:{1}]\u4E0A\u521B\u5EFA

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java:231
# args: inv.getUuid(),destHostUuid
cannot\ configure\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u5728\u76EE\u6807\u7269\u7406\u673A[uuid:{1}]\u4E0A\u914D\u7F6EVXLAN\u7F51\u7EDC

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:77
# args: vtepIps,hostUuid
find\ multiple\ vtep\ ips[%s]\ for\ one\ host[uuid\:%s],\ need\ to\ delete\ host\ and\ add\ again = \u5728\u4E00\u4E2A\u7269\u7406\u673A[uuid:{1}]\u53D1\u73B0\u591A\u4E2AVTEP IP\uFF0C\u9700\u8981\u5220\u9664\u7269\u7406\u673A\u5728\u8FDB\u884C\u6DFB\u52A0

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:82
# args: hostUuid,l2vxlan.getPoolUuid()
failed\ to\ find\ vtep\ on\ host[uuid\:\ %s],\ please\ re-attach\ vxlanpool[uuid\:\ %s]\ to\ cluster. = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u627E\u5230VTEP\uFF0C\u8BF7\u5C06vxlanpool[uuid\uFF1A{1}]\u91CD\u65B0\u6302\u63A5\u5230\u96C6\u7FA4\u3002

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:133
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u4E3A\u4E8C\u5C42\u7F51\u7EDC[uuid:{1}, type:{2}, vni:{3}]\u5728KVM\u7269\u7406\u673A[uuid:{4}]\u4E0A\u521B\u5EFA\u7F51\u6865[{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282: {5}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:197
# args: cmd.getCidr(),l2vxlan.getUuid(),l2vxlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = \u4E3AKVM\u7269\u7406\u673A[uuid:{3}]\u4E0A\u7684L2 VXLAN \u7F51\u7EDC[uuid:{1}, name:{2}]\u68C0\u67E5CIDR[{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282: {4}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:474
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5220\u9664KVM\u7269\u7406\u673A[uuid\uFF1A{4}]\u4E0A\u7684\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{1}\uFF0C\u7C7B\u578B\uFF1A{2}\uFF0CVNI\uFF1A{3}]\u7684\u7F51\u6865[{0}]\uFF0C\u56E0\u4E3A{5}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:261
# args: l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ realize\ vxlan\ network\ pool[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{2}]\u4E0A\u5B9E\u73B0VXLAN\u7F51\u7EDC\u6C60[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:111
# args: cmd.getCidr(),vxlanPool.getUuid(),vxlanPool.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetworkPool[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = \u68C0\u67E5\u5728kvm\u7269\u7406\u673A[uuid:{3}]\u4E0A\u7684l2VxlanNetworkPool[uuid:{1}, name:{2}]\u7684CIDR[{0}]\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:37
# args: VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()
need\ to\ input\ one\ system\ tag\ like\ \:\ [%s] = \u9700\u8981\u8F93\u5165\u4E00\u4E2A\u7CFB\u7EDF\u6807\u7B7E\uFF0C\u683C\u5F0F\u4E3A\uFF1A[{0}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:49
# args: tag,VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()
wrong\ system\ tag\ [%s],\ should\ be\ like\ \:\ [%s] = \u9519\u8BEF\u7684\u7CFB\u7EDF\u6807\u7B7E[{0}]\uFF0C\u683C\u5F0F\u5E94\u8BE5\u4E3A\uFF1A[{1}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:55
# args: tag
wrong\ cidr\ format\ in\ system\ tag\ [%s] = \u7CFB\u7EDF\u6807\u7B7E[{0}]\u4E2D\u7684cidr\u683C\u5F0F\u9519\u8BEF

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:64
# args: inv.getType(),overlappedPool
overlap\ vni\ range\ with\ %s\ [%s] = \u4E0E{0}[{1}]\u7684vni\u8303\u56F4\u91CD\u53E0

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:99
# args: 
vxlan\ network\ pool\ doesn't\ support\ create\ l3\ network = vxlan network pool\u4E0D\u652F\u6301\u521B\u5EFA\u4E09\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanPoolApiInterceptor.java:56
# args: msg.getHostUuid(),msg.getPoolUuid()
vxlan\ vtep\ address\ for\ host\ [uuid\ \:\ %s]\ and\ pool\ [uuid\ \:\ %s]\ pair\ already\ existed = \u7269\u7406\u673A[uuid : {0}]\u5728vxlan\u8D44\u6E90\u6C60[uuid : {1}]\u4E2D\u96A7\u9053\u7AEF\u70B9\u5730\u5740\u5DF2\u7ECF\u914D\u7F6E

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:27
# args: 
it\ is\ used = \u88AB\u5360\u7528

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:25
# args: 
it\ is\ not\ in\ this\ range = \u4E0D\u5728IP\u5730\u5740\u8303\u56F4\u5185

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:23
# args: 
it\ is\ gateway = \u7F51\u5173\u4E0D\u80FD\u5206\u914D

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:159
# args: l2VO.getUuid(),msg.getL3NetworkUuid()
could\ not\ set\ mtu\ because\ l2\ network[uuid\:%s]\ of\ l3\ network\ [uuid\:%s]\ mtu\ can\ not\ be\ bigger\ than\ the\ novlan\ network = \u65E0\u6CD5\u8BBE\u7F6EMTU\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{1}]MTU\u7684\u4E8C\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u4E0D\u80FD\u5927\u4E8ENoVLAN\u7F51\u7EDC

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:175
# args: 
can\ not\ delete\ the\ last\ normal\ ip\ range\ because\ there\ is\ still\ has\ address\ pool = \u65E0\u6CD5\u5220\u9664\u6700\u540E\u4E00\u4E2A\u6B63\u5E38IP\u8303\u56F4\uFF0C\u56E0\u4E3A\u4ECD\u6709\u5730\u5740\u6C60

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:190
# args: 
you\ must\ update\ system\ and\ category\ both = \u5FC5\u987B\u540C\u65F6\u66F4\u884Csystem\u5C5E\u6027\u548Ccategory\u5C5E\u6027

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:474
# args: L3NetworkCategory.validCombination
not\ valid\ combination\ of\ system\ and\ category,only\ %s\ are\ valid = \u65E0\u6548\u7684system\u5C5E\u6027\u548Ccategory\u5C5E\u6027\u7684\u7EC4\u5408\uFF0C\u53EA\u6709{0}\u662F\u6709\u6548\u7684

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:237
# args: msg.getIp()
invalid\ IP[%s] = \u9519\u8BEF\u7684IP\u503C[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:221
# args: msg.getL3NetworkUuid()
no\ ip\ range\ in\ l3[%s] = \u6CA1\u6709IP\u5728\u4E09\u5C42\u7F51\u7EDC\u8303\u56F4\u4E2D

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:225
# args: msg.getRouterInterfaceIp(),ipr.getUuid(),ipr.getNetworkCidr(),msg.getL3NetworkUuid()
ip[%s]\ is\ not\ in\ the\ cidr\ of\ ip\ range[uuid\:%s,\ cidr\:%s]\ which\ l3\ network[%s]\ attached = IP[{0}]\u6CA1\u6709\u5728\u4E09\u5C42\u7F51\u7EDC[{3}]\u7684CIDR\u7684IP\u8303\u56F4\u5185[uuid:{1}, cidr:{2}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:229
# args: msg.getRouterInterfaceIp(),ipr.getUuid(),ipr.getStartIp(),ipr.getEndIp(),msg.getL3NetworkUuid()
ip[%s]\ in\ ip\ range[uuid\:%s,\ startIp\:%s,\ endIp\:%s]\ which\ l3\ network[%s]\ attached,\ this\ is\ not\ allowed = IP[{0}]\u5728\u4E09\u5C42\u7F51\u7EDC[{4}]\u7ED1\u5B9A\u7684IP\u8303\u56F4\u5185[uuid:{1}, startIp:{2}, endIp:{3}]\uFF0C\u8FD9\u662F\u4E0D\u88AB\u5141\u8BB8\u7684

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:243
# args: 
ipRangeUuid\ and\ l3NetworkUuid\ cannot\ both\ be\ null;\ you\ must\ set\ either\ one. = IP\u6BB5\u548CL3\u7684uuid\u4E0D\u80FD\u90FD\u4E3A\u7A7A\uFF0C\u60A8\u5FC5\u987B\u9009\u62E9\u4E00\u4E2A\u586B\u4E0A

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:276
# args: msg.getStart(),msg.getStart()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ start[ip\:%s]\ is\ not\ a\ correct\ ipv6\ address = \u65E0\u6CD5\u4F7F\u7528start[IP\uFF1A{0}]\u83B7\u53D6\u53EF\u7528IP\uFF0C\u56E0\u4E3Astart[IP\uFF1A{1}]\u4E0D\u662F\u6B63\u786E\u7684IPv6\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:274
# args: msg.getStart(),msg.getStart()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ start[ip\:%s]\ is\ not\ a\ correct\ ipv4\ address = \u65E0\u6CD5\u4F7F\u7528start[IP\uFF1A{0}]\u83B7\u53D6\u53EF\u7528IP\uFF0C\u56E0\u4E3Astart[IP\uFF1A{1}]\u4E0D\u662F\u6B63\u786E\u7684IPv4\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:272
# args: msg.getStart(),msg.getL3NetworkUuid()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ l3Network[uuid\:%s]\ is\ dual\ stack = \u65E0\u6CD5\u4F7F\u7528start[IP\uFF1A{0}]\u83B7\u53D6\u53EF\u7528IP\uFF0C\u56E0\u4E3AL3Network[uuid\uFF1A{1}]\u662F\u53CC\u5806\u6808

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:408
# args: msg.getNetworkCidr()
%s\ is\ not\ a\ valid\ network\ cidr = {0}\u4E0D\u662F\u6709\u6548\u7684\u65E0\u7C7B\u522B\u57DF\u95F4\u8DEF\u7531

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:304
# args: msg.getGateway()
%s\ is\ not\ a\ valid\ ipv6\ address = {0}\u4E0D\u662F\u6709\u6548\u7684IPv6\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:308
# args: msg.getStartIp(),msg.getEndIp(),msg.getPrefixLen(),msg.getGateway()
[startIp\ %s,\ endIp\ %s,\ prefixLen\ %d,\ gateway\ %s]\ is\ not\ a\ valid\ ipv6\ range = IPv6\u5730\u5740\u6BB5{0}-{1}/{2}, \u7F51\u5173{3}\u4E0D\u662F\u6709\u6548\u7684IPv6\u5730\u5740\u6BB5

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:633
# args: 
adding\ normal\ ip\ range\ must\ specify\ gateway\ ip\ address = \u6DFB\u52A0\u6B63\u5E38IP\u8303\u56F4\u5FC5\u987B\u6307\u5B9A\u7F51\u5173IP\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:324
# args: 
can\ not\ add\ ip\ range,\ because\ ipv6\ address\ pool\ is\ not\ supported = \u65E0\u6CD5\u6DFB\u52A0IP\u8303\u56F4\uFF0C\u56E0\u4E3A\u4E0D\u652F\u6301IPv6\u5730\u5740\u6C60

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:335
# args: IPv6Constants.IPV6_PREFIX_LEN_MIN,IPv6Constants.IPV6_PREFIX_LEN_MAX
ip\ range\ prefix\ length\ is\ out\ of\ range\ [%d\ -\ %d]\  = IPv6\u5730\u5740\u524D\u7F00\u957F\u5EA6\u4E0D\u5728\u6709\u6548\u8303\u56F4\u5185[{0}-{1}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:342
# args: 
can\ not\ add\ ip\ range,\ because\ system\ network\ doesn't\ support\ ipv6\ yet = \u65E0\u6CD5\u6DFB\u52A0IP\u8303\u56F4\uFF0C\u56E0\u4E3A\u7CFB\u7EDF\u7F51\u7EDC\u5C1A\u4E0D\u652F\u6301IPv6

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:348
# args: ipr.getAddressMode(),rangeVOS.get(0).getAddressMode()
addressMode[%s]\ is\ different\ from\ L3Netowork\ address\ mode[%s] = \u5730\u5740\u6A21\u5F0F[{0}]\u548C\u4E09\u5C42\u7F51\u7EDC\u7684\u5730\u5740\u6A21\u5F0F[{1}]\u4E0D\u540C

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:354
# args: IPv6Constants.IPV6_STATELESS_PREFIX_LEN
ipv6\ prefix\ length\ must\ be\ %d\ for\ Stateless-DHCP\ or\ SLAAC = Stateless-DHCP or SLAAC\u5730\u5740\u6A21\u5F0FIPv6\u7F51\u7EDC\u524D\u7F00\u957F\u5EA6\u5FC5\u987B\u662F{0}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:364
# args: ipr.getStartIp(),ipr.getEndIp(),r.getStartIp(),r.getEndIp()
new\ ip\ range\ [startip\ \:%s,\ endip\ \:%s]\ is\ overlaped\ with\ old\ ip\ range[startip\ \:%s,\ endip\ \:%s] = \u65B0\u7684IP\u5730\u5740\u6BB5[{0}-{1}]\u548C\u65E7\u7684IP\u5730\u5740\u6BB5[{2}-{3}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:374
# args: r.getNetworkCidr(),ipr.getNetworkCidr()
new\ network\ CIDR\ [%s]\ is\ different\ from\ old\ network\ cidr\ [%s] = \u540C\u4E00\u4E09\u5C42\u7F51\u7EDC\u4E0A\u4E0D\u80FD\u52A0\u8F7D\u591A\u4E2ACIDR\u3002

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:618
# args: ipr.getGateway(),r.getGateway()
new\ add\ ip\ range\ gateway\ %s\ is\ different\ from\ old\ gateway\ %s = \u65B0ip\u6BB5\u7684\u7F51\u5173\u5730\u5740{0}\u548C\u5DF2\u6709ip\u6BB5\u7684\u7F51\u5173\u5730\u5740{1}\u51B2\u7A81

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:611
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getEndIp()
gateway[%s]\ can\ not\ be\ part\ of\ range[%s,\ %s] = \u7F51\u5173[{0}]\u4E0D\u80FD\u662FIP\u6BB5[{1}, {2}]\u7684\u4E00\u90E8\u5206

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:401
# args: msg.getNetworkCidr()
%s\ is\ not\ an\ allowed\ network\ cidr,\ because\ it\ doesn't\ have\ usable\ ip\ range = {0}\u662F\u4E0D\u5141\u8BB8\u7684\u65E0\u7C7B\u522B\u57DF\u95F4\u8DEF\u7531\uFF0C\u56E0\u4E3A\u5B83\u4E0D\u652F\u6301\u53EF\u7528\u7684IP\u6BB5

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:405
# args: msg.getGateway(),msg.getNetworkCidr()
%s\ is\ not\ the\ first\ or\ last\ address\ of\ the\ cidr\ %s = {0}\u4E0D\u662FCIDR{1}\u7684\u7B2C\u4E00\u4E2A\u6216\u6700\u540E\u4E00\u4E2A\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:432
# args: 
ipRangeUuids,\ L3NetworkUuids,\ zoneUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = ipRangeUuids, L3NetworkUuids, zoneUuids \u81F3\u5C11\u4E00\u4E2A\u4E0D\u662F\u4E3A\u7A7A\u5217\u8868\uFF0C\u6216\u8005\u5168\u90E8\u4E0D\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:453
# args: msg.getType()
unsupported\ l3network\ type[%s] = \u4E0D\u652F\u6301\u7684\u4E09\u5C42\u7F51\u7EDC\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:459
# args: msg.getDnsDomain()
%s\ is\ not\ a\ valid\ domain\ name = {0}\u4E0D\u662F\u6709\u6548\u7684\u57DF\u540D

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:580
# args: r.getUuid(),r.getStartIp(),r.getEndIp()
overlap\ with\ ip\ range[uuid\:%s,\ start\ ip\:%s,\ end\ ip\:\ %s] = \u91CD\u53E0\u7684IP\u6BB5[uuid:{0}, \u8D77\u59CBip:{1}, \u5C3Eip: {2}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:523
# args: l3Vo.getUuid(),l3Vo.getName()
l3\ network\ [uuid\ %s\:\ name\ %s]\ is\ not\ a\ public\ network,\ address\ pool\ range\ can\ not\ be\ added = \u4E09\u5C42\u7F51\u7EDC[uuid{0}\uFF1A\u540D\u79F0{1}]\u4E0D\u662F\u516C\u7528\u7F51\u7EDC\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u5730\u5740\u6C60\u8303\u56F4

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:527
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ D\ class\ addresses\ which\ are\ for\ multicast = \u8FD9\u4E2AIP\u6BB5[{0} ~ {1}]\u5305\u542B\u4E86D\u7C7B\u7684\u7EC4\u64AD\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:531
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ E\ class\ addresses\ which\ are\ reserved = \u8FD9\u4E2AIP\u6BB5[{0} ~ {1}]\u5305\u542B\u4E86E\u7C7B\u7684\u4FDD\u7559\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:535
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ link\ local\ addresses\ which\ are\ reserved = \u8FD9\u4E2AIP\u6BB5[{0} ~ {1}]\u5305\u542B\u4E86\u672C\u5730\u7684\u4FDD\u7559\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:541
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getNetmask()
the\ gateway[%s]\ is\ not\ in\ the\ subnet\ %s/%s = \u7F51\u5173[{0}]\u4E0D\u5728\u5B50\u7F51{1}/{2}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:545
# args: 
ip\ allocation\ can\ not\ contain\ network\ address\ or\ broadcast\ address = ip \u5730\u5740\u5206\u914D\u4E0D\u80FD\u5305\u542B\u7F51\u7EDC\u5730\u5740\u6216\u5E7F\u64AD\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:551
# args: ipr.getStartIp()
start\ ip[%s]\ is\ not\ a\ IPv4\ address = \u5F00\u59CB\u7684ip[{0}] \u4E0D\u662FIPV4\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:555
# args: ipr.getEndIp()
end\ ip[%s]\ is\ not\ a\ IPv4\ address = \u7ED3\u675F\u7684ip[{0}] \u4E0D\u662FIPV4\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:559
# args: ipr.getGateway()
gateway[%s]\ is\ not\ a\ IPv4\ address = \u7F51\u5173[{0}]\u4E0D\u662FIPV4\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:563
# args: ipr.getNetmask()
netmask[%s]\ is\ not\ a\ netmask,\ and\ the\ IP\ range\ netmask\ cannot\ be\ 0.0.0.0 = \u5B50\u7F51\u63A9\u7801[{0}]\u4E0D\u662F\u5B50\u7F51\u63A9\u7801\uFF0C\u5E76\u4E14IP\u6BB5\u7684\u5B50\u7F51\u63A9\u7801\u4E0D\u80FD\u662F0.0.0.0

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:569
# args: ipr.getStartIp(),ipr.getEndIp()
start\ ip[%s]\ is\ behind\ end\ ip[%s] = \u8D77\u59CBip[{0}]\u5728\u5C3Eip[{1}]\u540E

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:596
# args: r.getUuid(),rcidr,cidr
multiple\ CIDR\ on\ the\ same\ L3\ network\ is\ not\ allowed.\ There\ has\ been\ a\ IP\ range[uuid\:%s,\ CIDR\:%s],\ the\ new\ IP\ range[CIDR\:%s]\ is\ not\ in\ the\ CIDR\ with\ the\ existing\ one = \u5728\u76F8\u540C\u7684\u4E09\u5C42\u7F51\u7EDC\u4E0A\u591A\u4E2ACIDR\u662F\u4E0D\u5141\u8BB8\u7684\uFF0C\u5DF2\u6709\u7684IP\u8303\u56F4 [uuid: {0}\uFF0CCIDR: {1}]\u3002\u65B0\u7684IP\u8303\u56F4 [CIDR: {2}] \u4E0D\u5728\u73B0\u6709\u7684\u4E00\u4E2ACIDR

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:606
# args: ipr.getEndIp(),ipr.getStartIp(),ipr.getNetmask()
the\ endip[%s]\ is\ not\ in\ the\ subnet\ %s/%s = IP\u6BB5\u7ED3\u675F\u5730\u5740\u4E0D\u5728\u5B50\u7F51{1}/{2}\u8303\u56F4\u5185

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:659
# args: msg.getDns(),msg.getL3NetworkUuid()
there\ has\ been\ a\ DNS[%s]\ on\ L3\ network[uuid\:%s] = \u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E0A\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2ADNS[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:692
# args: msg.getL3NetworkUuid()
prefix\ [%s]\ is\ not\ a\ IPv4\ network\ cidr = \u7F51\u7EDC\u6BB5{0}\u4E0D\u662F\u5408\u6CD5\u7684\u7F51\u7EDC\u6BB5

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:679
# args: msg.getNexthop()
nexthop[%s]\ is\ not\ a\ IPv4\ address = \u4E0B\u4E00\u8DF3{0}\u4E0D\u662F\u6709\u6548\u7684IP\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:686
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ has\ been\ a\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = \u4E09\u5C42\u7F51\u7EDC{1}\u5DF2\u914D\u7F6E\u7269\u7406\u673A\u8DEF\u7531{0}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:699
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ is\ no\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = \u4E09\u5C42\u7F51\u7EDC{1}\u6CA1\u6709\u7269\u7406\u673A\u8DEF\u7531{0}

# at: src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java:286
# args: rsp.getError()
apply\ gratuitous\ arp\ error,\ because\:%s = \u5E94\u7528\u65E0\u6545ARP\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java:329
# args: rsp.getError()
release\ gratuitous\ arp\ error,\ because\:%s = \u91CA\u653E\u65E0\u7AEF\u7684ARP\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:248
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ vm\ nic[uuid\:%s]\ not\ found = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230VM NIC[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:254
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ the\ vm\ nic[uuid\:%s]\ not\ attached\ to\ any\ security\ group = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3AVM NIC[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55\u5B89\u5168\u7EC4

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:261
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ not\ found = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u5B89\u5168\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:266
# args: priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ cannot\ be\ less\ than\ 1 = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u65E0\u6548\uFF0C\u4F18\u5148\u7EA7[{0}]\u4E0D\u80FD\u5C0F\u4E8E1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:270
# args: aoMap.get(priority),ao.getSecurityGroupUuid(),priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ priority,\ both\ security\ group\ %s\ and\ %s\ have\ priority[%d] = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u91CD\u590D\uFF0C\u5B89\u5168\u7EC4{0}\u548C{1}\u90FD\u5177\u6709\u4F18\u5148\u7EA7[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:273
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ security\ group[uuid\:%s] = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:285
# args: priorities[0]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority\ expects\ to\ start\ at\ 1,\ but\ [%d] = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u65E0\u6548\uFF0C\u4F18\u5148\u7EA7\u5E94\u4ECE1\u5F00\u59CB\uFF0C\u4F46[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:289
# args: priorities[i],priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ and\ priority[%d]\ expected\ to\ be\ consecutive = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u65E0\u6548\uFF0C\u4F18\u5148\u7EA7[{0}]\u548C\u4F18\u5148\u7EA7[{1}]\u5E94\u662F\u8FDE\u7EED\u7684

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:301
# args: ref.getSecurityGroupUuid(),sgOwnerAccountUuid
could\ no\ set\ vm\ nic\ security\ Group,\ because\ securityGroup[uuid\:%s]\ is\ already\ attached\ on\ this\ nic\ by\ account[uuid\:%s],\ current\ user\ does\ not\ have\ permission\ to\ delete = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3ASecurityGroup[uuid\uFF1A{0}]\u5DF2\u7531\u5E10\u6237[uuid\uFF1A{1}]\u9644\u52A0\u5728\u6B64NIC\u4E0A\uFF0C\u5F53\u524D\u7528\u6237\u6CA1\u6709\u5220\u9664\u6743\u9650

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:310
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ ruleUuids\ is\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3ARuleUIds\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:314
# args: msg.getSecurityGroupUuid()
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u5B89\u5168\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:322
# args: r
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group\ rule[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u5B89\u5168\u7EC4\u89C4\u5219[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:331
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ no\ security\ group\ rule\ state\ need\ to\ change = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3A\u65E0\u9700\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:339
# args: 
could\ no\ change\ vm\ nic\ security\ policy,\ because\ ingress\ policy\ and\ egress\ policy\ cannot\ be\ both\ null = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u5165\u53E3\u7B56\u7565\u548C\u51FA\u53E3\u7B56\u7565\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:342
# args: msg.getIngressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ ingress\ policy[%s] = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u5165\u53E3\u7B56\u7565[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:346
# args: msg.getEgressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ egress\ policy[%s] = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u51FA\u53E3\u7B56\u7565[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:350
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230VM NIC[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:355
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ has\ no\ security\ policy = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3AVM NIC[uuid\uFF1A{0}]\u6CA1\u6709\u5B89\u5168\u7B56\u7565

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:369
# args: msg.getType()
could\ not\ update\ security\ group\ rule\ priority,\ because\ invalid\ type[%s] = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u7C7B\u578B[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:374
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ is\ not\ exist = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:378
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rules\ is\ empty = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:388
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ rules\ size\ not\ match = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u89C4\u5219\u5927\u5C0F\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:393
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ priority[%d]\ is\ invalid = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219\u4F18\u5148\u7EA7[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:396
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ has\ duplicate = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:402
# args: ao.getRuleUuid(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule[uuid\:%s]\ not\ in\ security\ group[uuid\:%s] = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219[uuid\uFF1A{0}]\u4E0D\u5728\u5B89\u5168\u7EC4[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:405
# args: ao.getPriority(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ not\ in\ security\ group[uuid\:%s] = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u4E0D\u5728\u5B89\u5168\u7EC4[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:410
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ uuid\ duplicate = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219uuid\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:417
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule\ uuid[%s]\ is\ not\ exist = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219uuid[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:423
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ is\ default\ rule,\ only\ the\ description\ and\ status\ can\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u662F\u9ED8\u8BA4\u89C4\u5219\uFF0C\u53EA\u80FD\u8BBE\u7F6E\u63CF\u8FF0\u548C\u72B6\u6001

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:429
# args: msg.getUuid(),SecurityGroupConstant.DEFAULT_RULE_PRIORITY
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ priority\ cannot\ be\ set\ to\ default\ rule\ priority[%d] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u4F18\u5148\u7EA7\u65E0\u6CD5\u8BBE\u7F6E\u4E3A\u9ED8\u8BA4\u89C4\u5219\u4F18\u5148\u7EA7[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:438
# args: vo.getType(),count.intValue(),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4{0}\u89C4\u5219\u7F16\u53F7[{1}]\u8D85\u51FA\u6700\u5927\u9650\u5236[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:441
# args: vo.getType().toString(),count.intValue()
could\ not\ change\ security\ group\ rule,\ because\ the\ maximum\ priority\ of\ %s\ rule\ is\ [%d] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A{0}\u89C4\u5219\u7684\u6700\u9AD8\u4F18\u5148\u7EA7\u4E3A[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:450
# args: msg.getState()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ state[%s] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u72B6\u6001[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:458
# args: msg.getAction()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ action[%s] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u64CD\u4F5C[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:466
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ protocol[%s] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:498
# args: msg.getUuid(),msg.getSrcIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Egress,\ srcIpRange[%s]\ cannot\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u7C7B\u578B\u4E3A\u51FA\u53E3\uFF0C\u65E0\u6CD5\u8BBE\u7F6ESrcIPRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:495
# args: msg.getUuid(),msg.getDstIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Ingress,\ dstIpRange[%s]\ cannot\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u7C7B\u578B\u4E3A\u5165\u53E3\uFF0C\u65E0\u6CD5\u8BBE\u7F6EDSTIPRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:488
# args: msg.getSrcIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ srcIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5DF2\u8BBE\u7F6ESrcIPRange[{0}]\uFF0CRemoteSecurityGroupuuid[{1}]\u5FC5\u987B\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:501
# args: msg.getDstIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ dstIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5DF2\u8BBE\u7F6EDSTIPRange[{0}]\uFF0CRemoteSecurityGroupuuid[{1}]\u5FC5\u987B\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:508
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u8FDC\u7A0B\u5B89\u5168\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:511
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ is\ set,\ srcIpRange\ and\ dstIpRange\ must\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5DF2\u8BBE\u7F6E\u8FDC\u7A0B\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\uFF0CSrcIPRange\u548CDstIPRange\u5FC5\u987B\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:564
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ must\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE\u4E3A[{0}]\uFF0C\u5FC5\u987B\u8BBE\u7F6EDSTPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:556
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE\u4E3A[{0}]\uFF0CDstPortRange\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:551
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE\u4E3A[{0}]\uFF0C\u65E0\u6CD5\u8BBE\u7F6E\u76EE\u6807\u6620\u5C04

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:595
# args: JSONObjectUtil.toJsonString(sao),o.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219[{0}]\u4E0E\u6570\u636E\u5E93\u4E2D\u7684\u89C4\u5219[uuid\uFF1A{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:721
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ not\ attached\ to\ l3Network[uuid\:%s],\ can't\ detach = \u4E0D\u80FD\u5378\u8F7D\u5B89\u5168\u7EC4[uuid:{0}]\u5230L3[uuid:{1}]\u7F51\u7EDC\u4E0A\uFF0C\u56E0\u4E3A\u8FD8\u672A\u6302\u8F7D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:757
# args: 
can't\ delete\ rules\ of\ different\ security\ group = \u65E0\u6CD5\u5220\u9664\u4E0D\u540C\u5B89\u5168\u7EC4\u7684\u89C4\u5219

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:760
# args: vo.getUuid()
can't\ delete\ default\ rule[uuid\:%s] = \u65E0\u6CD5\u5220\u9664\u9ED8\u8BA4\u89C4\u5219[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:780
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ attached\ to\ l3Network[uuid\:%s],\ can't\ attach\ again = \u4E0D\u80FD\u518D\u6B21\u6302\u8F7D\u5B89\u5168\u7EC4[uuid:{0}]\u5230L3[uuid:{1}]\u7F51\u7EDC\u4E0A\uFF0C\u56E0\u4E3A\u5DF2\u7ECF\u6302\u8F7D\u4E86

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:788
# args: msg.getL3NetworkUuid(),SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE
the\ L3\ network[uuid\:%s]\ doesn't\ have\ the\ network\ service\ type[%s]\ enabled = \u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709\u5F00\u542F[{1}]\u7C7B\u578B\u7684\u7F51\u7EDC\u670D\u52A1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:850
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = \u4E91\u4E3B\u673A\u7F51\u5361[uuids:{0}]\u4E0D\u5728\u5B89\u5168\u7EC4[uuid:{1}]\u6302\u8F7D\u7684\u4E09\u5C42\u7F51\u7EDC\u4E0A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:886
# args: uuid
could\ not\ add\ security\ group\ rule,\ because\ security\ group[uuid\:%s]\ does\ not\ exist = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:875
# args: SecurityGroupConstant.ONE_API_RULES_MAX_NUM
could\ not\ add\ security\ group\ rule,\ because\ the\ rules\ cannot\ be\ empty\ or\ exceed\ the\ max\ number\ %d = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u4E0D\u80FD\u4E3A\u7A7A\u6216\u8D85\u8FC7\u6700\u5927\u6570\u91CF{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:880
# args: msg.getRemoteSecurityGroupUuids()
could\ not\ add\ security\ group\ rule,\ because\ duplicate\ uuid\ in\ remoteSecurityGroupUuids\:\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3ARemoteSecurityGroupuuid\u4E2D\u5B58\u5728\u91CD\u590D\u7684uuid\uFF1A{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:891
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ remote\ security\ group\ uuid\ is\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u8FDC\u7A0B\u5B89\u5168\u7EC4uuid\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:927
# args: SecurityGroupConstant.DEFAULT_RULE_PRIORITY,SecurityGroupConstant.LOWEST_RULE_PRIORITY
could\ not\ add\ security\ group\ rule,\ because\ rule\ priority\ must\ greater\ than\ %d\ or\ equals\ %d = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u4F18\u5148\u7EA7\u5FC5\u987B\u5927\u4E8E{0}\u6216\u7B49\u4E8E{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:935
# args: ao.getType(),SecurityGroupRuleType.getAllType()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ type[%s],\ valid\ types\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u7C7B\u578B[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u7C7B\u578B\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:942
# args: ao.getState(),SecurityGroupRuleState.getAllState()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ state[%s],\ valid\ states\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u72B6\u6001[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:947
# args: ao.getProtocol(),SecurityGroupRuleProtocolType.getAllProtocol()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ protocol[%s],\ valid\ protocols\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u534F\u8BAE\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:954
# args: ao.getAction(),SecurityGroupRuleAction.getAllAction()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ action[%s],\ valid\ actions\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u64CD\u4F5C[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u64CD\u4F5C\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:962
# args: ao.getIpVersion(),IPv6Constants.IPv4,IPv6Constants.IPv6
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ ipVersion[%d],\ valid\ ipVersions\ are\ %d/%d = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219IPVersion[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u7684IPVersion\u4E3A{1}/{2}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:990
# args: ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ dstIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ ingress\ rule = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4E0D\u5141\u8BB8\u4E3A\u5165\u53E3\u89C4\u5219\u8BBE\u7F6EDSTIPRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:995
# args: ao.getAllowedCidr(),ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ srcIpRange[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3Aallowedcidr[{0}]\u548Csrciprange[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:984
# args: ao.getDstIpRange(),ao.getRemoteSecurityGroupUuid()
could\ not\ add\ security\ group\ rule,\ because\ the\ ip\ range[%s]\ and\ remoteSecurityGroupUuid[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3AIP\u8303\u56F4[{0}]\u548CRemoteSecurityGroupuuid[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:972
# args: ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ srcIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ egress\ rule = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4E0D\u5141\u8BB8\u4E3A\u51FA\u53E3\u89C4\u5219\u8BBE\u7F6ESrcIPRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:977
# args: ao.getAllowedCidr(),ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ dstIpRange[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3AAllowedCidr[{0}]\u548CDSTIPRange[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1026
# args: ao.getEndPort(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ endPort[%d],\ endPort\ must\ be\ greater\ than\ or\ equal\ to\ startPort[%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219endPort[{0}]\u65E0\u6548\uFF0CendPort\u5FC5\u987B\u5927\u4E8E\u6216\u7B49\u4E8EstartPort[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1029
# args: ao.getDstPortRange(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ dstPortRange[%s]\ and\ starPort[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3ADstPortRange[{0}]\u548CStarPort[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1040
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ TCP/UDP\ must\ set\ dstPortRange = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE\u7C7B\u578BTCP/UDP\u5FC5\u987B\u8BBE\u7F6EDSTPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1018
# args: ao.getDstPortRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ dstPortRange[%s] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE\u7C7B\u578BALL\u6216ICMP\u65E0\u6CD5\u8BBE\u7F6EDstPortRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1021
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ startPort\ or\ endPort = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE\u7C7B\u578BALL\u6216ICMP\u65E0\u6CD5\u8BBE\u7F6EStartPort\u6216EndPort

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1050
# args: JSONObjectUtil.toJsonString(newRules.get(i)),JSONObjectUtil.toJsonString(newRules.get(j))
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ and\ rule[%s]\ are\ dupilicated = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219[{0}]\u548C\u89C4\u5219[{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1074
# args: JSONObjectUtil.toJsonString(sao),vo.getUuid()
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219[{0}]\u4E0E\u6570\u636E\u5E93\u4E2D\u7684\u89C4\u5219[uuid\uFF1A{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1089
# args: SecurityGroupRuleType.Egress,SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ has\ reached\ the\ maximum\ limit[%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4{0}\u89C4\u5219\u5DF2\u8FBE\u5230\u6700\u5927\u9650\u5236[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1097
# args: SecurityGroupRuleType.Egress,(egressRuleCount + toCreateEgressRuleCount),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4{0}\u89C4\u5219\u7F16\u53F7[{1}]\u8D85\u51FA\u6700\u5927\u9650\u5236[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1101
# args: msg.getPriority(),ingressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ ingress\ rule\ maximum\ priority\ is\ [%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u5FC5\u987B\u8FDE\u7EED\uFF0C\u5165\u53E3\u89C4\u5219\u6700\u5927\u4F18\u5148\u7EA7\u4E3A[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1104
# args: msg.getPriority(),egressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ egress\ rule\ maximum\ priority\ is\ [%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u5FC5\u987B\u662F\u8FDE\u7EED\u7684\uFF0C\u51FA\u53E3\u89C4\u5219\u6700\u5927\u4F18\u5148\u7EA7\u4E3A[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1908
# args: ref.getVmNicUuid(),msg.getSecurityGroupUuid()
vm\ nic[uuid\:%s]\ has\ been\ attach\ to\ security\ group[uuid\:%s] = VM NIC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u5B89\u5168\u7EC4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1917
# args: SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE,nic.getL3NetworkUuid(),nic.getUuid()
the\ netwotk\ service[type\:%s]\ not\ enabled\ on\ the\ l3Network[uuid\:%s]\ of\ nic[uuid\:%s] = \u7F51\u7EDC\u670D\u52A1[\u7C7B\u578B\uFF1A{0}]\u672A\u5728NIC[uuid\uFF1A{2}]\u7684L3\u7F51\u7EDC[uuid\uFF1A{1}]\u4E0A\u542F\u7528

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:153
# args: SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE,l3Uuid
the\ netwotk\ service[type\:%s]\ not\ enabled\ on\ the\ l3Network[uuid\:%s] = \u672A\u5728L3\u7F51\u7EDC[uuid\uFF1A{1}]\u4E0A\u542F\u7528\u7F51\u7EDC\u670D\u52A1[\u7C7B\u578B\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1051
# args: ao.getRuleUuid()
failed\ to\ chenge\ rule[uuid\:%s]\ priority,\ beacuse\ it's\ not\ found = \u65E0\u6CD5\u66F4\u6539\u89C4\u5219[uuid\uFF1A{0}]\u7684\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u8BE5\u4F18\u5148\u7EA7

# at: src/main/java/org/zstack/network/service/HostRouteExtension.java:88
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ provide\ type\ null = \u4E09\u5C42\u7F51\u7EDC{0}\u540E\u7AEF\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/HostRouteExtension.java:113
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ does\ not\ have\ host\ route\ service = \u4E09\u5C42\u7F51\u7EDC{0}\u6CA1\u6709\u7269\u7406\u673A\u8DEF\u7531\u529F\u80FD

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:107
# args: 
networkServices\ cannot\ be\ empty = \u7F51\u7EDC\u670D\u52A1(networkServices)\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:68
# args: puuid
network\ service\ for\ provider[uuid\:%s]\ must\ be\ specified = \u670D\u52A1\u63D0\u4F9B\u5668[uuid:{0}]\u7684\u7F51\u7EDC\u670D\u52A1\u5FC5\u987B\u88AB\u6307\u5B9A

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:73
# args: puuid
cannot\ find\ network\ service\ provider[uuid\:%s]\ or\ it\ provides\ no\ services = \u65E0\u6CD5\u627E\u5230\u7F51\u7EDC\u670D\u52A1\u63D0\u4F9B\u5668[uuid:{0}]\u6216\u5B83\u6CA1\u6709\u63D0\u4F9B\u4EFB\u4F55\u670D\u52A1

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:87
# args: puuid,notSupported
network\ service\ provider[uuid\:%s]\ doesn't\ provide\ services%s = \u7F51\u7EDC\u670D\u52A1\u63D0\u4F9B\u5668[uuid:{0}]\u65E0\u6CD5\u63D0\u4F9B\u670D\u52A1{1}

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:99
# args: type,msg.getL3NetworkUuid()
there\ has\ been\ a\ network\ service[%s]\ attached\ to\ L3\ network[uuid\:%s] = \u5DF2\u7ECF\u6709\u4E00\u4E2A\u7F51\u7EDC\u670D\u52A1[{0}]\u88AB\u6302\u8F7D\u5230\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]

# at: src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java:332
# args: l3NetworkUuid,serviceType
L3Network[uuid\:%s]\ doesn't\ have\ network\ service[type\:%s]\ enabled\ or\ no\ provider\ provides\ this\ network\ service = \u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u4E0A\u6CA1\u6709\u7F51\u7EDC\u670D\u52A1[type:{1}]\u88AB\u542F\u7528\u6216\u6CA1\u6709\u670D\u52A1\u63D0\u4F9B\u5668\u63D0\u4F9B\u8BE5\u7F51\u7EDC\u670D\u52A1

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:87
# args: msg.getVmNicUuid()
vmNic[uuid\:%s]\ is\ not\ attached\ to\ vmInstance,\ cannot\ get\ attachable\ eips = vmnic[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230VMInstance\uFF0C\u65E0\u6CD5\u83B7\u53D6\u53EF\u8FDE\u63A5\u7684EIP

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:93
# args: 
either\ eipUuid\ or\ vipUuid\ must\ be\ set = eipUuid\u6216vipUuid\u5FC5\u987B\u6709\u4E00\u4E2A\u88AB\u6307\u5B9A

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:99
# args: msg.getEipUuid()
eip[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ cannot\ get\ attachable\ vm\ nic = eip[uuid:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u65E0\u6CD5\u83B7\u53D6\u53EF\u6302\u8F7D\u7684\u4E91\u4E3B\u673A\u7F51\u5361

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:137
# args: guestIpUuid,vmNicUuid
ip\ [uuid\:%s]\ is\ attached\ to\ vm\ nic\ [%s] = IP\u5730\u5740[uuid:{0}]\u5DF2\u7ECF\u7ED1\u5B9A\u5230\u7F51\u5361[{1}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:148
# args: msg.getEipUuid(),vmNicUuid
eip[uuid\:%s]\ has\ attached\ to\ another\ vm\ nic[uuid\:%s],\ can't\ attach\ again = eip[uuid:{0}]\u5DF2\u7ECF\u88AB\u6302\u8F7D\u5230\u53E6\u5916\u4E00\u53F0\u4E91\u4E3B\u673A\u7F51\u5361[uuid:{1}]\uFF0C\u65E0\u6CD5\u518D\u6B21\u6302\u8F7D

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:154
# args: msg.getEipUuid(),EipState.Enabled,state
eip[uuid\:\ %s]\ can\ only\ be\ attached\ when\ state\ is\ %s,\ current\ state\ is\ %s = eip[uuid:{0}]\u53EA\u6709\u5728\u72B6\u6001(state)\u4E3A{1}\u7684\u60C5\u51B5\u4E0B\u53EF\u4EE5\u88AB\u6302\u8F7D\uFF0C\u5F53\u524D\u72B6\u6001\u662F{2}

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:184
# args: msg.getVmNicUuid(),msg.getEipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ EIP[uuid\:%s]\ are\ the\ same\ network = \u4E91\u4E3B\u673A\u7F51\u5361[uuid:{0}]\u7684\u5BA2\u6237\u4E09\u5C42\u7F51\u7EDC\uFF0C\u548CEIP[uuid:{1}]\u7684\u865A\u62DFip \u4E09\u5C42\u7F51\u7EDC\u662F\u540C\u4E00\u4E2A\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:203
# args: msg.getEipUuid(),msg.getVmNicUuid()
Ip\ address\ [uuid\:%s]\ is\ not\ belonged\ to\ nic\ [uuid\:%s] = IP\u5730\u5740[uuid:{0}]\u6CA1\u6709\u7ED1\u5B9A\u5230\u7F51\u5361[uuid:{1}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:216
# args: msg.getUuid()
eip[uuid\:%s]\ has\ not\ attached\ to\ any\ vm\ nic = eip[uuid:{0}]\u8FD8\u6CA1\u6709\u88AB\u6302\u8F7D\u5230\u4EFB\u610F\u4E91\u4E3B\u673A\u7F51\u5361

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:239
# args: vipIp.getIpVersion(),guestIp.getIpVersion()
vip\ ipVersion\ [%d]\ is\ different\ from\ guestIp\ ipVersion\ [%d]. = \u865A\u62DFIP\u7684\u534F\u8BAE\u53F7[{0}]\u548C\u7F51\u5361\u7684IP\u534F\u8BAE\u53F7[{1}]\u4E0D\u540C

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:246
# args: vipIp.getIp(),guestRange.getStartIp(),guestRange.getEndIp()
Vip[%s]\ is\ in\ the\ guest\ ip\ range\ [%s,\ %s] = \u865A\u62DFIP[{0}]\u548C\u7F51\u5361\u7684IP\u4E0D\u80FD\u5728\u76F8\u540C\u5730\u5740\u6BB5[{1}-{2}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:266
# args: vmUuid,vip.getL3NetworkUuid(),vip.getUuid(),vip.getName(),vip.getIp()
the\ vm[uuid\:%s]\ that\ the\ EIP\ is\ about\ to\ attach\ is\ already\ on\ the\ public\ network[uuid\:%s]\ from\ which\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:%s]\ comes = EIP\u5C06\u8981\u6302\u8F7D\u5230\u7684\u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u5904\u4E8E\u516C\u5171\u7F51\u7EDC[uuid:{1}]\u4E0A\uFF0C\u8BE5\u7F51\u7EDC\u4E0A\u5DF2\u6709vip[uuid:{2}, name:{3}, ip:{4}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:277
# args: msg.getVipUuid(),useForList.toString()
vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = vip[uuid:{0}]\u5DF2\u7ECF\u88AB\u5176\u4ED6\u7F51\u7EDC\u670D\u52A1\u5B9E\u4F53[{1}]\u5360\u7528

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:282
# args: 
eip\ can\ not\ be\ created\ on\ system\ vip = \u65E0\u6CD5\u5728\u7CFB\u7EDFVIP\u4E0A\u521B\u5EFAEIP

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:286
# args: msg.getVipUuid(),VipState.Enabled,vip.getState()
vip[uuid\:%s]\ is\ not\ in\ state[%s],\ current\ state\ is\ %s = vip[uuid:{0}]\u4E0D\u5904\u4E8E\u72B6\u6001[{1}]\u4E2D\uFF0C\u5F53\u524D\u72B6\u6001[{2}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:323
# args: state.toString()
vm\ state[%s]\ is\ not\ allowed\ to\ operate\ eip,\ maybe\ you\ should\ wait\ the\ vm\ process\ complete = \u4E91\u4E3B\u673A\u72B6\u6001[{0}]\u4E0D\u5141\u8BB8\u8FDB\u884C\u5F39\u6027IP\u64CD\u4F5C\uFF0C\u4F60\u53EF\u80FD\u9700\u8981\u7B49\u5F85\u4E91\u4E3B\u673A\u64CD\u4F5C\u5B8C\u6210

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:337
# args: vmNicUuid
vmNic\ uuid[%s]\ is\ not\ allowed\ add\ eip,\ because\ vmNic\ exist\ portForwarding\ with\ allowedCidr\ rule = \u4E0D\u5141\u8BB8vmnic uuid[{0}]\u6DFB\u52A0EIP\uFF0C\u56E0\u4E3Avmnic\u5B58\u5728\u5177\u6709AllowedCIDR\u89C4\u5219\u7684\u7AEF\u53E3\u8F6C\u53D1

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1463
# args: struct.getEip().getUuid()
eip\ [uuid\:%s]\ is\ deleted = \u5DF2\u5220\u9664EIP[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1316
# args: eip.getGuestIp(),nicIps
cannot\ find\ Eip\ guest\ ip\:\ %s\ in\ vmNic\ ips\ \:%s = \u5728vmnic IP{1}\u4E2D\u627E\u4E0D\u5230EIP\u6765\u5BBEIP{0}

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1622
# args: l3.getUuid(),l3.getName(),vm.getUuid(),vm.getName()
unable\ to\ attach\ the\ L3\ network[uuid\:%s,\ name\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s],\ because\ the\ L3\ network\ is\ providing\ EIP\ to\ one\ of\ the\ vm's\ nic = \u65E0\u6CD5\u5C06\u4E09\u5C42\u7F51\u7EDC[uuid:{0}, name:{1}]\u6302\u8F7D\u5230\u4E91\u4E3B\u673A[uuid:{2}, name:{3}]\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC\u6B63\u5728\u4E3A\u4E91\u4E3B\u673A\u4E0A\u7684\u4E00\u5757\u7F51\u5361\u63D0\u4F9BEIP

# at: src/main/java/org/zstack/network/service/flat/DhcpApply.java:73
# args: msg.getL3NetworkUuid()
could\ not\ get\ dhcp4\ server\ ip\ for\ l3\ network\ [uuid\:%s] = \u65E0\u6CD5\u83B7\u53D6\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u7684DHCP4\u670D\u52A1\u5668IP

# at: src/main/java/org/zstack/network/service/flat/DhcpApply.java:77
# args: msg.getL3NetworkUuid()
could\ not\ get\ dhcp6\ server\ ip\ for\ l3\ network\ [uuid\:%s] = \u65E0\u6CD5\u83B7\u53D6\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u7684DHCP6\u670D\u52A1\u5668IP

# at: src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java:39
# args: 
Session/account\ uuid\ is\ not\ valid. = \u4F1A\u8BDD/\u5E10\u6237uuid\u65E0\u6548\u3002

# at: src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java:43
# args: accountUuid,msg.getL3NetworkUuid()
the\ account[uuid\:%s]\ has\ no\ access\ to\ the\ resource[uuid\:%s,\ type\:L3NetworkVO] = \u5E10\u6237[uuid\uFF1A{0}]\u65E0\u6743\u8BBF\u95EE\u8D44\u6E90[uuid\uFF1A{1}\uFF0C\u7C7B\u578B\uFF1AL3NetworkVO]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:647
# args: 
l3\ network\ uuid\ cannot\ be\ null = \u4E09\u5C42\u7F51\u7EDC\u7684uuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:654
# args: msg.getL3NetworkUuid()
Cannot\ find\ DhcpIp\ for\ l3\ network[uuid\:%s] = \u65E0\u6CD5\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u627E\u5230DHCP IP

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:998
# args: inv.getUuid(),destHostUuid
cannot\ configure\ DHCP\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u76EE\u6807\u7269\u7406\u673A[uuid:{1}]\u4E0A\u7684\u4E91\u4E3B\u673A[uuid:{0}]\u914D\u7F6EDHCP

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1751
# args: IPv6Constants.IPV6_PREFIX_LEN_MIN_DNSMASQ
minimum\ ip\ range\ prefix\ length\ of\ flat\ network\ is\ %d = \u4E09\u5C42\u7F51\u7EDC\u7684\u6700\u5C0FIP\u8303\u56F4\u524D\u7F00\u957F\u5EA6\u4E3A{0}

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1780
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ is\ not\ a\ IPv6\ address = DHCP\u670D\u52A1\u5668\u5730\u5740[{0}]\u4E0D\u662F\u4E00\u4E2A\u6B63\u786E\u7684IPv6\u5730\u5740

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1776
# args: dhcpServerIp,inv.getNetworkCidr()
DHCP\ server\ ip\ [%s]\ is\ not\ in\ the\ cidr\ [%s] = DHCP\u670D\u52A1\u5668\u5730\u5740[{0}]\u4E0D\u5728\u7F51\u7EDC\u6BB5[{1}]\u7684\u8303\u56F4\u5185

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1772
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ is\ not\ a\ IPv4\ address = DHCP\u670D\u52A1\u5668\u5730\u5740[{0}]\u4E0D\u662F\u4E00\u4E2A\u6B63\u786E\u7684IPv4\u5730\u5740

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1791
# args: entry.getKey(),inv.getL3NetworkUuid()
DHCP\ server\ ip\ [%s]\ is\ already\ existed\ in\ l3\ network\ [%s] = \u4E09\u5C42\u7F51\u7EDC[{1}]\u5DF2\u7ECF\u914D\u7F6E\u4E86DHCP\u670D\u52A1\u5668\u5730\u5740[{0}]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1796
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ can\ not\ be\ equaled\ to\ gateway\ ip = DHCP\u670D\u52A1\u5668\u5730\u5740[{0}]\u4E0D\u80FD\u7B49\u4E8E\u7F51\u5173\u5730\u5740

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1802
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ can\ not\ be\ configured\ to\ system\ l3 = \u7CFB\u7EDF\u7F51\u7EDC\u4E0D\u80FD\u914D\u7F6EDHCP\u670D\u52A1\u5668\u5730\u5740[{0}]

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:80
# args: 
could\ not\ attach\ eip\ because\ ipv6\ eip\ can\ ONLY\ be\ attached\ to\ flat\ network = \u65E0\u6CD5\u9644\u52A0EIP\uFF0C\u56E0\u4E3AIPv6 EIP\u53EA\u80FD\u9644\u52A0\u5230\u4E09\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:109
# args: vmNicUuid
L2Network\ where\ vip's\ L3Network\ based\ hasn't\ attached\ the\ cluster\ where\ vmNic[uuid\:%s]\ located = \u57FA\u4E8E\u865A\u62DFIP\u4E09\u5C42\u7F51\u7EDC\u7684\u4E8C\u5C42\u7F51\u7EDC\u6CA1\u6709\u7ED1\u5B9A\u5230\u4E91\u4E3B\u673A\u7F51\u5361\u6240\u5728\u7684\u96C6\u7FA4

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:134
# args: version,vmNicUuid
can\ not\ bound\ more\ than\ 1\ %s\ eip\ to\ a\ vm\ nic[uuid\:%s]\ of\ flat\  = \u65E0\u6CD5\u5C061\u4E2A\u4EE5\u4E0A\u7684{0}EIP\u7ED1\u5B9A\u5230\u5E73\u9762\u7684VM NIC[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/network/service/flat/FlatEipBackend.java:614
# args: vmUuid,vm.getState()
unable\ to\ apply\ the\ EIP\ operation\ for\ the\ the\ vm[uuid\:%s,\ state\:%s],\ because\ cannot\ find\ the\ VM's\ hostUUid = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}, state:{1}]\u5E94\u7528EIP\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u65E0\u6CD5\u627E\u5230\u8BE5\u4E91\u4E3B\u673A\u7684\u7269\u7406\u673Auuid(hostUuid)

# at: src/main/java/org/zstack/network/service/flat/FlatUserdataBackend.java:374
# args: struct.getHostUuid()
host[uuid\:%s]\ is\ not\ connected = \u7269\u7406\u673A[uuid:{0}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:306
# args: e.getMessage()
Invalid\ rule\ expression,\ the\ detail\:\ %s = \u89C4\u5219\u8868\u8FBE\u5F0F\u65E0\u6548\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:180
# args: 
could\ not\ get\ candidate\ vmnic,\ because\ both\ load\ balancer\ uuid\ and\ server\ group\ uuid\ are\ not\ specified = \u65E0\u6CD5\u83B7\u53D6\u5019\u9009vmnic\uFF0C\u56E0\u4E3A\u672A\u6307\u5B9A\u8D1F\u8F7D\u5E73\u8861\u5668uuid\u548C\u670D\u52A1\u5668\u7EC4uuid

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:198
# args: 
could\ not\ get\ candidate\ l3\ network,\ because\ both\ load\ balancer\ uuid\ and\ server\ group\ uuid\ are\ not\ specified = \u65E0\u6CD5\u83B7\u53D6\u5019\u9009\u4E09\u5C42\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u672A\u6307\u5B9A\u8D1F\u8F7D\u5E73\u8861\u5668uuid\u548C\u670D\u52A1\u5668\u7EC4uuid

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:222
# args: msg.getListenerUuid()
could\ not\ detach\ vm\ nic\ to\ load\ balancer\ listener[uuid\:%s],\ because\ default\ server\ group\ for\ listener\ has\ been\ deleted = \u65E0\u6CD5\u5C06VM NIC\u4E0E\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[uuid\uFF1A{0}]\u5206\u79BB\uFF0C\u56E0\u4E3A\u5DF2\u5220\u9664\u4FA6\u542C\u5668\u7684\u9ED8\u8BA4\u670D\u52A1\u5668\u7EC4

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:251
# args: vipVO.getIp()
Load\ balancer\ VIP\ [%s]\ cannot\ be\ the\ first\ or\ the\ last\ IP\ of\ the\ CIDR\ with\ the\ public\ address\ pool\ type = \u8D1F\u8F7D\u5E73\u8861\u5668VIP[{0}]\u4E0D\u80FD\u662F\u5177\u6709\u516C\u5171\u5730\u5740\u6C60\u7C7B\u578B\u7684CIDR\u7684\u7B2C\u4E00\u4E2A\u6216\u6700\u540E\u4E00\u4E2AIP

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:282
# args: ipVer
operation\ failure,\ not\ support\ the\ ip\ version\ %d = \u64CD\u4F5C\u5931\u8D25\uFF0C\u4E0D\u652F\u6301IPv{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:288
# args: ips,acl.getUuid()
operation\ failure,\ duplicate/overlap\ ip\ entry\ in\ %s\ of\ accesscontrol\ list\ group\:%s = \u64CD\u4F5C\u5931\u8D25\uFF0C\u5728\u8BBF\u95EE\u63A7\u5236\u7EC4\uFF1A{1}\u4E2D\u6709\u91CD\u590D/\u91CD\u53E0ip{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:295
# args: ips
operation\ failure,\ ip\ format\ only\ supports\ ip/iprange/cidr,\ but\ find\ %s = \u64CD\u4F5C\u5931\u8D25\uFF0C\u53EA\u652F\u6301IP\u5730\u5740/IP\u6BB5/IP\u7F51\u7EDC\u683C\u5F0F\u7684\u53C2\u6570\uFF0C\u4E0D\u652F\u6301{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:299
# args: startIp,endIp,NetworkUtils.longToIpv4String(r.lowerEndpoint()),NetworkUtils.longToIpv4String(r.upperEndpoint()),acl.getUuid()
ip\ range[%s,\ %s]\ is\ overlap\ with\ start\ ip\:%s,\ end\ ip\:\ %s\ of\ access-control-list\ group\:%s = ip\u6BB5[{0}, {1}]\u548C\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4\uFF1A{4}\u4E2D\u7684ip\u6BB5[{2},{3}]\u91CD\u53E0

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:321
# args: aclUuids,lbUuid
Can't\ attach\ the\ type\ access-control-list\ group[%s]\ whose\ ip\ version\ is\ different\ with\ LoadBalancer[%s] = \u8D1F\u8F7D\u5747\u8861\u5668[{1}]\u4E0D\u80FD\u6DFB\u52A0IP\u7248\u672C\u4E0D\u4E00\u81F4\u7684\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:396
# args: aclEntry.getDomain(),aclEntry.getUrl(),acl.getUuid()
domian[%s],\ url[%s]\ duplicate/overlap\ redirect\ rule\ with\ access-control-list\ group\:%s = \u57DF[{0}]\uFF0CURL[{1}]\u4E0E\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4{2}\u91CD\u590D/\u91CD\u53E0\u91CD\u5B9A\u5411\u89C4\u5219

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:506
# args: msg.getAclType(),msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ use\ to\ %s,\ but\ there\ some\ access-control-list\ not\ has\ ip\ entry\ but\ redirect\ rule = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[uuid\uFF1A{0}]\u7528\u4E8E{1}\uFF0C\u4F46\u67D0\u4E9B\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u6CA1\u6709IP\u6761\u76EE\uFF0C\u4F46\u6709\u91CD\u5B9A\u5411\u89C4\u5219

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:515
# args: existingAcls,msg.getListenerUuid()
the\ access-control-list\ groups[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ listener[uuid\:%s] = \u8D1F\u8F7D\u5747\u8861\u76D1\u542C\u5668[uuid:{1}]\u5DF2\u7ECF\u6DFB\u52A0\u4E86\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:521
# args: msg.getListenerUuid(),type.toString()
the\ load\ balancer\ listener[uuid\:%s]\ just\ only\ attach\ the\ %s\ type\ access-control-list\ group = \u8D1F\u8F7D\u5747\u8861\u76D1\u542C\u5668[uuid:{0}]\u53EA\u80FD\u4EE5{1}\u65B9\u5F0F\u6DFB\u52A0\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:526
# args: msg.getListenerUuid(),LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)
the\ load\ balancer\ listener[uuid\:%s]\ can't\ \ attach\ more\ than\ %d\ access-control-list\ groups = \u8D1F\u8F7D\u5747\u8861\u76D1\u542C\u5668[uuid:{0}]\u6700\u591A\u53EA\u80FD\u6DFB\u52A0{1}\u4E2A\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:414
# args: msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ use\ to\ redirect,\ but\ there\ some\ access-control-list\ not\ has\ redirect\ rule\ but\ ip\ entry = Access-Control-List\u7EC4[uuid\uFF1A{0}]\u7528\u4E8E\u91CD\u5B9A\u5411\uFF0C\u4F46\u67D0\u4E9BAccess-Control-List\u6CA1\u6709\u91CD\u5B9A\u5411\u89C4\u5219\uFF0C\u53EA\u6709IP\u6761\u76EE

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:419
# args: msg.getAclUuids()
redirect\ access-control-list\ groups[uuid\:%s]\ cannot\ only\ attach\ to\ load\ balancer\ listener,\ must\ assign\ server\ group = \u91CD\u5B9A\u5411\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[uuid\uFF1A{0}]\u4E0D\u80FD\u4EC5\u8FDE\u63A5\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668\uFF0C\u5FC5\u987B\u5206\u914D\u670D\u52A1\u5668\u7EC4

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:424
# args: msg.getAclUuids(),msg.getListenerUuid()
access-control-list\ groups[uuid\:%s]\ attach\ to\ load\ balancer\ listener[uuid\:%s]\ not\ https\ or\ http = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[uuid\uFF1A{0}]\u8FDE\u63A5\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[uuid\uFF1A{1}]\u800C\u4E0D\u662FHTTPS\u6216HTTP

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:547
# args: msg.getServerGroupUuids(),msg.getListenerUuid()
server\ group[%s]\ not\ attach\ to\ load\ balancer\ listener[%s] = \u670D\u52A1\u5668\u7EC4[{0}]\u672A\u8FDE\u63A5\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:443
# args: msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ has\ no\ redirect\ rule = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[uuid\uFF1A{0}]\u6CA1\u6709\u91CD\u5B9A\u5411\u89C4\u5219

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:456
# args: msg.getAclUuids(),msg.getListenerUuid()
access-control-list\ groups[uuid\:%s]\ has\ attach\ to\ another\ load\ balancer\ listener[uuid\:%s] = \u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u53E6\u4E00\u4E2A\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:468
# args: msg.getListenerUuid(),LoadBalancerGlobalConfig.ACL_REDIRECT_MAX_COUNT.value(Long.class)
the\ load\ balancer\ listener[uuid\:%s]\ can't\ \ attach\ more\ than\ %d\ redirect\ rule\ access-control-list\ groups = \u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[uuid\uFF1A{0}]\u65E0\u6CD5\u9644\u52A0{1}\u4E2A\u4EE5\u4E0A\u7684\u91CD\u5B9A\u5411\u89C4\u5219\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:494
# args: msg.getListenerUuid(),redireRuleExistAclUuid
load\ balancer\ listener\ [uuid\:%s]\ had\ redirect\ rule\ of\ access-control-list\ groups[uuid\:%s] = \u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[uuid\uFF1A{0}]\u5177\u6709\u8BBF\u95EE\u63A7\u5236\u5217\u8868\u7EC4\u7684\u91CD\u5B9A\u5411\u89C4\u5219[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:555
# args: msg.getAclUuid(),msg.getListenerUuid()
acl[%s]\ not\ attach\ to\ load\ balancer\ listener[%s] = ACL[{0}]\u672A\u9644\u52A0\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1294
# args: l3Uuids,LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING
L3\ networks[uuids\:%s]\ of\ the\ vm\ nics\ has\ no\ network\ service[%s]\ enabled = \u4E91\u4E3B\u673A\u7F51\u5361\u7684\u4E09\u5C42\u7F51\u7EDC\u6CA1\u6709\u53EF\u7528\u7684\u7F51\u7EDC\u670D\u52A1

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:587
# args: nicUuid,groupVO.getUuid()
could\ not\ attach\ vm\ nic\ to\ load\ balancer\ listener,\ because\ the\ vm\ nic[uuid\:%s]\ are\ already\ on\ the\ default\ server\ group\ [uuid\:%s] = \u65E0\u6CD5\u5C06VM NIC\u9644\u52A0\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668\uFF0C\u56E0\u4E3AVM NIC[uuid\uFF1A{0}]\u5DF2\u4F4D\u4E8E\u9ED8\u8BA4\u670D\u52A1\u5668\u7EC4[uuid\uFF1A{1}]\u4E0A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1176
# args: listenerVO.getProtocol(),msg.getHealthCheckProtocol()
the\ listener\ with\ protocol\ [%s]\ doesn't\ support\ this\ health\ check\:[%s] = [{0}]\u7C7B\u578B\u7684\u76D1\u542C\u5668\u4E0D\u652F\u6301\u6B64\u7C7B\u578B[{1}]\u7684\u5065\u5EB7\u68C0\u67E5

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1145
# args: 
the\ http\ health\ check\ protocol\ must\ be\ specified\ its\ healthy\ checking\ parameter\ healthCheckURI = http\u7C7B\u578B\u7684\u5065\u5EB7\u68C0\u67E5\u5FC5\u987B\u63D0\u4F9BhealthCheckURI\u53C2\u6570

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1152
# args: msg.getHealthCheckHttpCode()
the\ http\ health\ check\ protocol's\ expecting\ code\ [%s]\ is\ invalidate = http\u5065\u5EB7\u68C0\u67E5\u534F\u8BAE\u7684expeting-code\u53C2\u6570\u975E\u6CD5

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:697
# args: LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)
Can't\ attach\ more\ than\ %d\ access-control-list\ groups\ to\ a\ listener = \u4E00\u4E2A\u76D1\u542C\u5668\u52A0\u8F7D\u7684\u8BBF\u95EE\u63A7\u5236\u7EC4\u4E0D\u80FD\u8D85\u8FC7{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:787
# args: msg.getProtocol(),msg.getName()
l4[%s]\ loadBalancer\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ state = L4[{0}]LoadBalancer\u4FA6\u542C\u5668[{1}]\u4E0D\u652F\u6301\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027\u72B6\u6001

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:808
# args: msg.getLoadBalancerUuid(),msg.getName(),algorithm
loadBalancer[%s]\ listener[%s]\ %s\ algorithm\ doesn't\ support\ assigning\ session\ persistence\ state\ except\ assigning\ disable\ explicitly = LoadBalancer[{0}]Listener[{1}]{2}\u7B97\u6CD5\u4E0D\u652F\u6301\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027\u72B6\u6001\uFF0C\u4F46\u663E\u5F0F\u5206\u914DDisable\u65F6\u9664\u5916

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:823
# args: msg.getLoadBalancerUuid(),msg.getName(),algorithm
loadBalancer[%s]\ listener[%s]\ %s\ algorithm\ doesn't\ support\ assigning\ session\ persistence\ state\ except\ assigning\ iphash\ explicitly = LoadBalancer[{0}]Listener[{1}]{2}\u7B97\u6CD5\u4E0D\u652F\u6301\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027\u72B6\u6001\uFF0C\u4F46\u663E\u5F0F\u5206\u914DIPHASH\u9664\u5916

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:849
# args: enableSession,Arrays.toString(LoadBalancerSessionPersistence.values())
invalid\ session\ persistence\ type[%s],\ it\ only\ support\ %s = \u4F1A\u8BDD\u6301\u4E45\u6027\u7C7B\u578B[{0}]\u65E0\u6548\uFF0C\u5B83\u4EC5\u652F\u6301{1}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:856
# args: timeout,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX
invalid\ session\ idle\ timeout[%s],\ it\ must\ be\ the\ number\ between[%s~%s]\  = \u4F1A\u8BDD\u7A7A\u95F2\u8D85\u65F6[{0}]\u65E0\u6548\uFF0C\u5B83\u5FC5\u987B\u662F\u4ECB\u4E8E[{1}~{2}]\u4E4B\u95F4\u7684\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:863
# args: cookieName,COOKIE_NAME_MAX
invalid\ session\ cookie\ name[%s],\ it\ must\ be\ shorter\ than\ [%s]\ characters = \u4F1A\u8BDDCookie\u540D\u79F0[{0}]\u65E0\u6548\uFF0C\u5FC5\u987B\u5C11\u4E8E[{1}]\u4E2A\u5B57\u7B26

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:866
# args: cookieName
invalid\ session\ cookie\ name[%s],\ it\ must\ only\ contains\ letters,\ numbers\ and\ underscores = \u4F1A\u8BDDCookie\u540D\u79F0[{0}]\u65E0\u6548\uFF0C\u5B83\u53EA\u80FD\u5305\u542B\u5B57\u6BCD\u3001\u6570\u5B57\u548C\u4E0B\u5212\u7EBF

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:870
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name\ at\ the\ same\ time = LoadBalancer[{0}]Listener[{1}]\u4E0D\u652F\u6301\u540C\u65F6\u5206\u914D\u7A7A\u95F2\u8D85\u65F6\u548CCookie\u540D\u79F0

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:876
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name,\ it\ must\ specify\ session\ persistence = LoadBalancer[{0}]Listener[{1}]\u4E0D\u652F\u6301\u5206\u914D\u7A7A\u95F2\u8D85\u65F6\u548CCookie\u540D\u79F0\uFF0C\u5B83\u5FC5\u987B\u6307\u5B9A\u4F1A\u8BDD\u6301\u4E45\u6027

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:880
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name\ when\ the\ session\ persistence\ is\ disabled = \u7981\u7528\u4F1A\u8BDD\u6301\u4E45\u6027\u65F6\uFF0CLoadBalancer[{0}]Listener[{1}]\u4E0D\u652F\u6301\u5206\u914D\u7A7A\u95F2\u8D85\u65F6\u548CCookie\u540D\u79F0

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:894
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ rewrite\ without\ assigning\ cookie\ name = LoadBalancer[{0}]\u4FA6\u542C\u5668[{1}]\u4E0D\u652F\u6301\u5728\u4E0D\u5206\u914DCookie\u540D\u79F0\u7684\u60C5\u51B5\u4E0B\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027\u91CD\u5199

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:899
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ idle\ timeout\ without\ assigning\ rewrite\ mode = LoadBalancer[{0}]\u4FA6\u542C\u5668[{1}]\u4E0D\u652F\u6301\u5728\u4E0D\u5206\u914D\u91CD\u5199\u6A21\u5F0F\u7684\u60C5\u51B5\u4E0B\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027\u7A7A\u95F2\u8D85\u65F6

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:904
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ cookieName\ without\ assigning\ insert\ mode = LoadBalancer[{0}]\u4FA6\u542C\u5668[{1}]\u4E0D\u652F\u6301\u5728\u4E0D\u5206\u914D\u63D2\u5165\u6A21\u5F0F\u7684\u60C5\u51B5\u4E0B\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027CookieName

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:909
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ rewrite\ when\ the\ http\ mode\ is\ http-tunnel = \u5F53HTTP\u6A21\u5F0F\u4E3AHTTP\u96A7\u9053\u65F6\uFF0CLoadBalancer[{0}]Listener[{1}]\u4E0D\u652F\u6301\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027\u91CD\u5199

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:920
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ other\ session\ persistence\ when\ the\ source\ balancer\ algorithm\ is\ source = \u5F53\u6E90\u5E73\u8861\u5668\u7B97\u6CD5\u4E3A\u6E90\u65F6\uFF0CLoadBalancer[{0}]\u4FA6\u542C\u5668[{1}]\u4E0D\u652F\u6301\u5206\u914D\u5176\u4ED6\u4F1A\u8BDD\u6301\u4E45\u6027

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:932
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ iphash = LoadBalancer[{0}]\u4FA6\u542C\u5668[{1}]\u4E0D\u652F\u6301\u5206\u914D\u4F1A\u8BDD\u6301\u4E45\u6027IPHASH

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:950
# args: tag,s,LoadBalancerConstants.MAX_CONNECTION_LIMIT
invalid\ max\ connection[%s],\ %s\ is\ larger\ than\ upper\ threshold\ %d = \u975E\u6CD5\u7684\u6700\u5927\u8FDE\u63A5\u6570\u6807\u7B7E[{0}]\uFF0C\u56E0\u4E3A\u5176\u503C{1}\u5927\u4E8E\u4E0A\u9650\u503C{2}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:972
# args: msg.getLoadBalancerPort(),luuid
conflict\ loadBalancerPort[%s],\ a\ listener[uuid\:%s]\ has\ used\ that\ port = \u51B2\u7A81\u7684\u8D1F\u8F7D\u5747\u8861\u5668\u7AEF\u53E3(loadBalancerPort)[{0}]\uFF0C\u4E00\u4E2A\u76D1\u542C\u5668[uuid:{1}]\u5DF2\u7ECF\u4F7F\u7528\u4E86\u8BE5\u7AEF\u53E3

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1161
# args: listenerVO.getProtocol(),msg.getHealthCheckProtocol()
the\ listener\ with\ protocol\ [%s]\ doesn't\ support\ select\ security\ policy = \u5177\u6709\u534F\u8BAE[{0}]\u7684\u4FA6\u542C\u5668\u4E0D\u652F\u6301\u9009\u62E9\u5B89\u5168\u7B56\u7565

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1005
# args: vo.getProtocol()
loadbalancer\ listener\ with\ type\ %s\ does\ not\ need\ certificate = [{0}]\u7C7B\u578B\u8BC1\u4E66\u4E0D\u9700\u8981\u8BC1\u4E66

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1009
# args: msg.getListenerUuid(),msg.getCertificateUuid()
loadbalancer\ listener\ [uuid\:%s]\ already\ had\ certificate[uuid\:%s] = LoadBalancer\u4FA6\u542C\u5668[uuid\uFF1A{0}]\u5DF2\u5177\u6709\u8BC1\u4E66[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1019
# args: msg.getCertificateUuid(),msg.getListenerUuid()
certificate\ [uuid\:%s]\ is\ not\ added\ to\ loadbalancer\ listener\ [uuid\:%s] = \u8BC1\u4E66[uuid:{0}]\u672A\u6DFB\u52A0\u5230\u8D1F\u8F7D\u5747\u8861\u76D1\u542C\u5668[uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1034
# args: target
healthCheck\ target\ [%s]\ error,\ it\ must\ be\ 'default'\ or\ number\ between[1~65535]\  = \u5065\u5EB7\u68C0\u67E5\u7AEF\u53E3[{0}]\u9519\u8BEF,\u503C\u5FC5\u987B\u662F'default'\u6216\u8005\u6570\u5B57[1~65535]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1050
# args: listener.getProtocol(),listener.getName()
l4[%s]\ loadBalancer\ listener[%s]\ doesn't\ support\ modifying\ session\ persistence\ state = L4[{0}]LoadBalancer\u4FA6\u542C\u5668[{1}]\u4E0D\u652F\u6301\u4FEE\u6539\u4F1A\u8BDD\u6301\u4E45\u6027\u72B6\u6001

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1064
# args: msg.getUuid()
listener[%s]\ can\ not\ modifying\ session\ persistence\ rewrite\ when\ the\ http\ mode\ is\ http-tunnel = \u5F53HTTP\u6A21\u5F0F\u4E3AHTTP\u96A7\u9053\u65F6\uFF0C\u4FA6\u542C\u5668[{0}]\u65E0\u6CD5\u4FEE\u6539\u4F1A\u8BDD\u6301\u4E45\u6027\u91CD\u5199

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1072
# args: msg.getUuid()
listener[%s]\ can\ not\ modifying\ httpMode\ http-tunnel\ when\ the\ session\ persistence\ is\ rewrite = \u91CD\u5199\u4F1A\u8BDD\u6301\u4E45\u6027\u65F6\uFF0C\u4FA6\u542C\u5668[{0}]\u65E0\u6CD5\u4FEE\u6539httpmode HTTP-tunnel

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1079
# args: msg.getUuid()
listener[%s]\ changes\ session\ persistence\ to\ iphash,\ it\ must\ specify\ source\ balancer\ algorithm = \u4FA6\u542C\u5668[{0}]\u5C06\u4F1A\u8BDD\u6301\u4E45\u6027\u66F4\u6539\u4E3AIPHASH\uFF0C\u5B83\u5FC5\u987B\u6307\u5B9A\u6E90\u5E73\u8861\u5668\u7B97\u6CD5

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1084
# args: msg.getUuid()
listener[%s]\ modifies\ session\ persistence,\ it\ must\ specify\ balancer\ algorithm = \u4FA6\u542C\u5668[{0}]\u4FEE\u6539\u4F1A\u8BDD\u6301\u4E45\u6027\uFF0C\u5B83\u5FC5\u987B\u6307\u5B9A\u5E73\u8861\u5668\u7B97\u6CD5

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1090
# args: msg.getUuid(),msg.getBalancerAlgorithm()
listener[%s]\ %s\ algorithm\ doesn't\ support\ modifying\ session\ persistence\ except\ assigning\ iphash\ explicitly = \u4FA6\u542C\u5668[{0}]{1}\u7B97\u6CD5\u4E0D\u652F\u6301\u4FEE\u6539\u4F1A\u8BDD\u6301\u4E45\u6027\uFF0C\u9664\u975E\u663E\u5F0F\u5206\u914DIPHASH

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1098
# args: msg.getUuid(),msg.getBalancerAlgorithm()
listener[%s]\ %s\ algorithm\ doesn't\ support\ modifying\ session\ persistence\ except\ assigning\ disable\ explicitly = \u4FA6\u542C\u5668[{0}]{1}\u7B97\u6CD5\u4E0D\u652F\u6301\u4FEE\u6539\u4F1A\u8BDD\u6301\u4E45\u6027\uFF0C\u9664\u975E\u663E\u5F0F\u6307\u5B9A\u7981\u7528

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1106
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ idle\ timeout\ and\ cookie\ name,\ it\ must\ specify\ session\ persistence = \u4FA6\u542C\u5668[{0}]\u4E0D\u652F\u6301\u4FEE\u6539\u7A7A\u95F2\u8D85\u65F6\u548Ccookie\u540D\u79F0\uFF0C\u5B83\u5FC5\u987B\u6307\u5B9A\u4F1A\u8BDD\u6301\u4E45\u6027

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1110
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ idle\ timeout\ when\ the\ session\ persistence\ is\ not\ insert = \u5F53\u4F1A\u8BDD\u6301\u4E45\u6027\u4E0D\u662FINSERT\u65F6\uFF0C\u4FA6\u542C\u5668[{0}]\u4E0D\u652F\u6301\u4FEE\u6539\u7A7A\u95F2\u8D85\u65F6

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1114
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ cookie\ name\ when\ the\ session\ persistence\ is\ not\ rewrite = \u4FA6\u542C\u5668[{0}]\u4E0D\u652F\u6301\u5728\u4F1A\u8BDD\u6301\u4E45\u6027\u672A\u91CD\u5199\u65F6\u4FEE\u6539cookie\u540D\u79F0

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1118
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ session\ rewrite\ without\ modifying\ cookie\ name = \u4FA6\u542C\u5668[{0}]\u4E0D\u652F\u6301\u5728\u4E0D\u4FEE\u6539Cookie\u540D\u79F0\u7684\u60C5\u51B5\u4E0B\u4FEE\u6539\u4F1A\u8BDD\u91CD\u5199

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1132
# args: timeout,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX
invalid\ session\ idle\ timeout[%s],\ it\ must\ be\ the\ number\ between[%s~%s] = \u4F1A\u8BDD\u7A7A\u95F2\u8D85\u65F6[{0}]\u65E0\u6548\uFF0C\u5B83\u5FC5\u987B\u662F\u4ECB\u4E8E[{1}~{2}]\u4E4B\u95F4\u7684\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1181
# args: 
the\ http\ health\ check\ protocol\ must\ be\ specified\ its\ healthy\ checking\ parameters\ including\ healthCheckMethod\ and\ healthCheckURI = http\u7C7B\u578B\u7684\u5065\u5EB7\u68C0\u67E5\u534F\u8BAE\u5FC5\u987B\u63D0\u4F9BhealthCheckMethod\u548ChealthCheckURI\u53C2\u6570

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1204
# args: msg.getUuid()
could\ not\ allow\ to\ delete\ default\ serverGroup[uuid\:%s] = \u65E0\u6CD5\u5141\u8BB8\u5220\u9664\u9ED8\u8BA4\u670D\u52A1\u5668\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1429
# args: msg.getServerGroupUuid()
loadbalacerServerGroup\ [%s]\ is\ non-existent = LoadBalacerServerGroup[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1263
# args: vmNic.get("uuid"),msg.getServerGroupUuid()
could\ not\ add\ backend\ server\ vmnic[uuid\:%s]\ to\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ not\ exist = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668vmnic[uuid\uFF1A{0}]\u6DFB\u52A0\u5230ServerGroup[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3Avmnic uuid\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1274
# args: vmNic.get("weight")
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668vmnic\u6DFB\u52A0\u5230ServerGroup[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3Avmnic\u6743\u91CD[{1}]\u4E0D\u662F\u6B63\u786E\u7684\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1552
# args: vmNic.get("uuid"),vmNicWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[vimNic\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = \u65E0\u6548\u7684\u5E73\u8861\u5668\u91CD\u91CF[vimnic\uFF1A{0}\uFF0C\u91CD\u91CF\uFF1A{1}]\uFF0C\u91CD\u91CF\u4E0D\u5728\u8303\u56F4[{2}\uFF0C{3}]\u5185

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1304
# args: existingNics,msg.getServerGroupUuid()
the\ vm\ nics[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ servegroup\ [uuid\:%s] = VM NIC[uuid\uFF1A{0}]\u5DF2\u4F4D\u4E8E\u8D1F\u8F7D\u5E73\u8861\u5668ServerGroup[uuid\uFF1A{1}]\u4E0A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1313
# args: msg.getServerGroupUuid(),vmNicIps
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup\ [uuid\:%s],\ because\ vmnic\ ip\ [ipAddress\:%s]\ is\ repeated = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668vmnic\u6DFB\u52A0\u5230ServerGroup[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3Avmnic IP[IPAddress\uFF1A{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1325
# args: vmNicUuids,msg.getServerGroupUuid(),listenerVO.getUuid()
could\ not\ add\ vm\ nic\ [uuid\:%s]\ to\ server\ group\ [uuid\:%s]\ because\ listener\ [uuid\:%s]\ attached\ this\ server\ group\ already\ the\ nic\ to\ be\ added = \u65E0\u6CD5\u5C06VM NIC[uuid\uFF1A{0}]\u6DFB\u52A0\u5230\u670D\u52A1\u5668\u7EC4[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A\u4FA6\u542C\u7A0B\u5E8F[uuid\uFF1A{2}]\u5DF2\u5C06\u6B64\u670D\u52A1\u5668\u7EC4\u8FDE\u63A5\u5230\u8981\u6DFB\u52A0\u7684NIC

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1606
# args: msg.getServerGroupUuid(),serverIps
could\ not\ add\ backend\ server\ ip\ to\ serverGroup\ [uuid\:%s],\ because\ ip\ [ipAddress\:%s]\ is\ invalid = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668IP\u6DFB\u52A0\u5230ServerGroup[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3AIP[IPAddress\uFF1A{1}]\u65E0\u6548

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1341
# args: msg.getServerGroupUuid(),server.get("ipAddress")
could\ not\ add\ backend\ server\ ip\ to\ serverGroup\ [uuid\:%s],\ because\ ip\ [ipAddress\:%s]\ is\ repeated = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668IP\u6DFB\u52A0\u5230ServerGroup[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3AIP[IPAddress\uFF1A{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1599
# args: server.get("weight")
could\ not\ add\ backend\ server\ ip\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668IP\u6DFB\u52A0\u5230ServerGroup[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3Avmnic\u6743\u91CD[{1}]\u4E0D\u662F\u6B63\u786E\u7684\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1352
# args: server.get("ipAddress"),serverIpWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ \ weight[serverIp\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = \u6743\u91CD[\u670D\u52A1\u5668IP\uFF1A{0}\uFF0C\u6743\u91CD\uFF1A{1}]\u65E0\u6548\uFF0C\u6743\u91CD\u4E0D\u5728\u8303\u56F4[{2}\uFF0C{3}]\u5185

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1367
# args: existingServerIps,msg.getServerGroupUuid()
the\ server\ ips\ [uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ servegroup\ [uuid\:%s] = \u670D\u52A1\u5668IP[uuid\uFF1A{0}]\u5DF2\u5728\u8D1F\u8F7D\u5E73\u8861\u5668ServerGroup[uuid\uFF1A{1}]\u4E0A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1611
# args: 
could\ not\ add\ server\ ip\ to\ share\ load\ balancer\ server\ group = \u65E0\u6CD5\u5C06\u670D\u52A1\u5668IP\u6DFB\u52A0\u5230\u5171\u4EAB\u8D1F\u8F7D\u5E73\u8861\u5668\u670D\u52A1\u5668\u7EC4

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1433
# args: 
vmnic\ or\ ip\ is\ null = vmnic\u6216IP\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1397
# args: msg.getServerGroupUuid()
vmnics\ are\ all\ not\ in\ servergroup\ [%s] = VMNIC\u5747\u4E0D\u5728ServerGroup[{0}]\u4E2D

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1414
# args: msg.getServerGroupUuid()
serverips\ are\ all\ not\ in\ servergroup\ [%s] = ServerIP\u5168\u90E8\u4E0D\u5728ServerGroup[{0}]\u4E2D

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1444
# args: msg.getServerGroupUuid(),msg.getlistenerUuid()
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ it\ is\ already\ added\  = \u65E0\u6CD5\u5C06\u670D\u52A1\u5668\u7EC4[uuid\uFF1A{0}}\u6DFB\u52A0\u5230\u4FA6\u542C\u5668[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A\u5B83\u5DF2\u6DFB\u52A0

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1461
# args: msg.getServerGroupUuid(),msg.getlistenerUuid(),nicUuid
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ nic\ [uuid\:%s]\ is\ already\ added = \u65E0\u6CD5\u5C06\u670D\u52A1\u5668\u7EC4[uuid\uFF1A{0}}\u6DFB\u52A0\u5230\u4FA6\u542C\u5668[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A\u5DF2\u7ECF\u6DFB\u52A0\u4E86NIC[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1476
# args: msg.getServerGroupUuid(),msg.getlistenerUuid(),ipAddress
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ server\ ip\ [%s]\ is\ already\ added = \u65E0\u6CD5\u5C06\u670D\u52A1\u5668\u7EC4[uuid\uFF1A{0}}\u6DFB\u52A0\u5230\u4FA6\u542C\u5668[uuid\uFF1A{1}]\uFF0C\u56E0\u4E3A\u5DF2\u6DFB\u52A0\u670D\u52A1\u5668IP[{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1496
# args: msg.getServerGroupUuid(),msg.getListenerUuid()
could\ not\ remove\ server\ group[uuid\:%s}\ from\ listener\ [uuid\:%s]\ because\ it\ is\ not\ added = \u7531\u4E8E\u672A\u6DFB\u52A0\u670D\u52A1\u5668\u7EC4[uuid\uFF1A{1}]\uFF0C\u56E0\u6B64\u65E0\u6CD5\u5C06\u5176\u4ECE\u4FA6\u542C\u5668[uuid\uFF1A{1}]\u4E2D\u5220\u9664

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1511
# args: loadBalancerUuid
loadbalacerUuid\ [%s]\ is\ non-existent = LoadBalaceRuuid[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1526
# args: msg.getServerGroupUuid()
could\ not\ find\ loadBalancer\ with\ serverGroup\ [uuid\:%s] = \u627E\u4E0D\u5230ServerGroup\u4E3A[uuid\uFF1A{0}]\u7684LoadBalancer

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1567
# args: msg.getServerGroupUuid()
could\ not\ update\ backend\ server\ vmnic\ of\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ null = \u65E0\u6CD5\u66F4\u65B0ServerGroup[uuid\uFF1A{0}]\u7684\u540E\u7AEF\u670D\u52A1\u5668vmnic\uFF0C\u56E0\u4E3Avmnic uuid\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1542
# args: msg.getServerGroupUuid(),vmNic.containsKey("uuid")
could\ not\ update\ backend\ server\ vmnic\ of\ serverGroup,because\ serverGroup[uuid\:%s]\ don\ not\ have\ vmnic\ [uuid\:%s]\  = \u65E0\u6CD5\u66F4\u65B0ServerGroup\u7684\u540E\u7AEF\u670D\u52A1\u5668vmnic\uFF0C\u56E0\u4E3AServerGroup[uuid\uFF1A{0}]\u6CA1\u6709vmnic[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1564
# args: vmNic.get("uuid")
invalid\ balancer\ weight[vimNic\:%s],\ weight\ is\ null = \u5E73\u8861\u5668\u6743\u91CD[vimnic\uFF1A{0}]\u65E0\u6548\uFF0C\u6743\u91CD\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1559
# args: vmNic.get("weight")
could\ not\ change\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668vmnic\u66F4\u6539\u4E3AServerGroup[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3Avmnic\u6743\u91CD[{1}]\u4E0D\u662F\u6B63\u786E\u7684\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1583
# args: msg.getServerGroupUuid(),ipAddress
could\ not\ update\ backend\ server\ ip\ of\ serverGroup,because\ serverGroup[uuid\:%s]\ don\ not\ have\ ip\ [ipAddress\:%s]\  = \u65E0\u6CD5\u66F4\u65B0ServerGroup\u7684\u540E\u7AEF\u670D\u52A1\u5668IP\uFF0C\u56E0\u4E3AServerGroup[uuid\uFF1A{0}]\u6CA1\u6709IP[IP\u5730\u5740\uFF1A{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1602
# args: server.get("ipAddress")
invalid\ balancer\ weight[serverIp\:%s],\ weight\ is\ null = \u65E0\u6548\u7684\u5E73\u8861\u5668\u6743\u91CD[ServerIP\uFF1A{0}]\uFF0C\u6743\u91CD\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1592
# args: server.get("ipAddress"),serverIpWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[serverIp\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = \u65E0\u6548\u7684\u5E73\u8861\u5668\u6743\u91CD[\u670D\u52A1\u5668IP\uFF1A{0}\uFF0C\u6743\u91CD\uFF1A{1}]\uFF0C\u6743\u91CD\u4E0D\u5728\u8303\u56F4[{2}\uFF0C{3}]\u5185

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1618
# args: 
could\ not\ change\ backendserver,\ beacause\ vmincs\ and\ serverips\ is\ null = \u65E0\u6CD5\u66F4\u6539\u540E\u7AEF\u670D\u52A1\u5668\uFF0C\u56E0\u4E3AVMINCS\u548CServerIPS\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1355
# args: struct.listenerUuid
can\ not\ get\ service\ providerType\ for\ load\ balancer\ listener\ [uuid\:%s] = \u65E0\u6CD5\u83B7\u53D6\u8D1F\u8F7D\u5E73\u8861\u5668\u4FA6\u542C\u5668[uuid\uFF1A{0}]\u7684Service ProviderType

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1384
# args: self.getUuid(),self.getProviderType(),providerType
service\ provider\ type\ mismatching.\ The\ load\ balancer[uuid\:%s]\ is\ provided\ by\ the\ service\ provider[type\:%s],\ but\ new\ service\ provider\ is\ [type\:\ %s] = \u670D\u52A1\u63D0\u4F9B\u5546\u7C7B\u578B\u4E0D\u5339\u914D\u3002\u8D1F\u8F7D\u5E73\u8861\u5668[uuid\uFF1A{0}]\u7531\u670D\u52A1\u63D0\u4F9B\u7A0B\u5E8F[\u7C7B\u578B\uFF1A{1}]\u63D0\u4F9B\uFF0C\u4F46\u65B0\u670D\u52A1\u63D0\u4F9B\u7A0B\u5E8F\u4E3A[\u7C7B\u578B\uFF1A{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1486
# args: msg.getLoadBalancerPort(),msg.getLoadBalancerUuid()
there\ is\ listener\ with\ same\ port\ [%s]\ and\ same\ load\ balancer\ [uuid\:%s] = \u5B58\u5728\u5177\u6709\u76F8\u540C\u7AEF\u53E3[{0}]\u548C\u76F8\u540C\u8D1F\u8F7D\u5E73\u8861\u5668[uuid\uFF1A{1}]\u7684\u4FA6\u542C\u5668

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:2011
# args: param
invalid\ health\ checking\ parameters[%s],\ the\ format\ is\ method\:URI\:code,\ for\ example,\ GET\:/index.html\:http_2xx = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u53C2\u6570[{0}]\uFF0C\u6B63\u786E\u683C\u5F0F\uFF1Amethod:URI:code\uFF0C\u4F8B\u5982 GET:/index.html:http_2xx

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:699
# args: systemTag
invalid\ health\ target[%s],\ the\ format\ is\ targetCheckProtocol\:port,\ for\ example,\ tcp\:default = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u683C\u5F0F\u4E3A[\u76EE\u6807\u68C0\u67E5\u534F\u8BAE(targetCheckProtocol):\u7AEF\u53E3(port)], \u4F8B\u5982[tcp:default]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:100
# args: msg.getLoadBalancerUuid()
cannot\ find\ the\ load\ balancer[uuid\:%s] = \u65E0\u6CD5\u627E\u5230\u8D1F\u8F7D\u5747\u8861\u5668[uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:483
# args: tag.getTag()
cannot\ delete\ the\ system\ tag[%s].\ The\ load\ balancer\ plugin\ relies\ on\ it,\ you\ can\ only\ update\ it = \u65E0\u6CD5\u5220\u9664\u7CFB\u7EDF\u6807\u7B7E[{0}]\u3002\u8D1F\u8F7D\u5747\u8861\u5668\u63D2\u4EF6\u4F9D\u8D56\u4E8E\u8BE5\u6807\u7B7E\uFF0C\u8BE5\u6807\u7B7E\u53EA\u80FD\u88AB\u66F4\u65B0

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:502
# args: nicUuid,systemTag
nic[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ loadbalancer = \u627E\u4E0D\u5230\u7F51\u5361[uuid:{0}]\u3002\u8BF7\u68C0\u67E5\u8D1F\u8F7D\u5747\u8861\u5668\u7684\u7CFB\u7EDF\u6807\u7B7E[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:514
# args: systemTag,s
invalid\ balancer\ weight[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u6743\u91CD\u503C[{0}], {1}\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:510
# args: systemTag,s,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[%s],\ %s\ is\ not\ in\ the\ range\ [%d,\ %d] = \u65E0\u6548\u7684\u6743\u91CD\u503C[{0}], {1}\u4E0D\u5728\u5141\u8BB8\u8303\u56F4[{2}, {3}]\u4E2D

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:526
# args: algorithm,LoadBalancerConstants.BALANCE_ALGORITHMS
invalid\ balance\ algorithm[%s],\ valid\ algorithms\ are\ %s = \u65E0\u6548\u7684\u5747\u8861\u7B97\u6CD5[{0}]\uFF0C\u6709\u6548\u7684\u4E3A[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:602
# args: systemTag,s
invalid\ unhealthy\ threshold[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u4E0D\u5065\u5EB7\u9608\u503C[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:616
# args: systemTag,s
invalid\ healthy\ threshold[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u9608\u503C[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:630
# args: systemTag,s
invalid\ healthy\ timeout[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u8D85\u65F6[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:644
# args: systemTag,s
invalid\ connection\ idle\ timeout[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u8FDE\u63A5\u7A7A\u95F2\u8D85\u65F6[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:658
# args: systemTag,s
invalid\ health\ check\ interval[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u95F4\u9694[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:672
# args: systemTag,s
invalid\ max\ connection[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u6700\u5927\u8FDE\u63A5[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:686
# args: systemTag,s
invalid\ process\ number[%s],\ %s\ is\ not\ a\ number = \u8FDB\u7A0B\u7F16\u53F7[{0}]\u65E0\u6548\uFF0C{1}\u4E0D\u662F\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:704
# args: systemTag,protocol,LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS
invalid\ health\ target[%s],\ the\ target\ checking\ protocol[%s]\ is\ invalid,\ valid\ protocols\ are\ %s = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u76EE\u6807\u68C0\u67E5\u534F\u8BAE\u65E0\u6548[{1}]\uFF0C\u6709\u6548\u7684\u4E3A[{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:716
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u7AEF\u53E3[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:713
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ in\ the\ range\ of\ [1,\ 65535] = \u65E0\u6548\u7684\u65E0\u6548\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u7AEF\u53E3[{1}]\u4E0D\u5728\u8303\u56F4[1, 65535]\u5185

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerWeightOperator.java:89
# args: nicUuid,weight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight\ for\ nic\:%s,\ %d\ is\ not\ in\ the\ range\ [%d,\ %d] = \u65E0\u6548\u7684\u7F51\u5361:{0}\u6743\u91CD\u503C{1}\uFF0C\u4E0D\u5728\u6709\u6548\u8303\u56F4[{2}, {3}]\u5185

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:226
# args: msg.getVmNicUuid(),msg.getVipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ vip[uuid\:\ %s]\ are\ the\ same\ network = \u4E91\u4E3B\u673A\u7F51\u5361[uuid:{0}]\u7684\u5BA2\u6237\u4E09\u5C42\u7F51\u7EDC\u548C\u865A\u62DFIP[uuid:{1}]\u7684\u865A\u62DFIP \u4E09\u5C42\u7F51\u7EDC\u662F\u540C\u4E00\u4E2A\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:201
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = \u865A\u62DFIP[uuid:{0}]\u5DF2\u7ECF\u88AB\u5176\u4ED6\u7F51\u7EDC\u670D\u52A1\u5360\u7528

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:68
# args: msg.getRuleUuid(),state
Port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ current\ state\ is\ %s = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u672A\u542F\u7528\uFF0C\u5F53\u524D\u72B6\u6001[{1}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:83
# args: msg.getUuid()
port\ forwarding\ rule\ rule[uuid\:%s]\ has\ not\ been\ attached\ to\ any\ vm\ nic,\ can't\ detach = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u5C1A\u672A\u88AB\u6302\u8F7D\u5230\u4EFB\u4F55\u4E91\u4E3B\u673A\u7F51\u5361\uFF0C\u65E0\u6CD5\u5378\u8F7D

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:99
# args: msg.getRuleUuid(),vmNicUuid
port\ forwarding\ rule[uuid\:%s]\ has\ been\ attached\ to\ vm\ nic[uuid\:%s],\ can't\ attach\ again = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u5DF2\u7ECF\u88AB\u6302\u8F7D\u5230\u4E91\u4E3B\u673A\u7F51\u5361[uuid:{1}]\uFF0C\u65E0\u6CD5\u518D\u6B21\u6302\u8F7D

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:104
# args: msg.getRuleUuid(),state
port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ \ current\ state\ is\ %s.\ A\ rule\ can\ only\ be\ attached\ when\ its\ state\ is\ Enabled = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u6CA1\u6709\u542F\u7528\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}\u3002\u4E00\u4E2A\u89C4\u5219\u53EA\u80FD\u5728\u542F\u7528\u65F6\u88AB\u6302\u8F7D

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:123
# args: msg.getVmNicUuid(),msg.getRuleUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ port\ forwarding\ rule[uuid\:%s]\ are\ the\ same\ network = \u4E91\u4E3B\u673A\u7F51\u5361[uuid:{0}]\u7684\u5BA2\u6237\u4E09\u5C42\u7F51\u7EDC\u548C\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{1}]\u7684VIP \u4E09\u5C42\u7F51\u7EDC\u662F\u540C\u4E00\u4E2A\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:167
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
could\ not\ create\ port\ forwarding\ rule,\ because\ vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ is\ incompatible\ with\ private\ port\ range[privateStartPort\:%s,\ privateEndPort\:%s] = \u65E0\u6CD5\u521B\u5EFA\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219\uFF0C\u56E0\u4E3AVIP\u7AEF\u53E3\u8303\u56F4[vipStartPort\uFF1A{0}\uFF0CvipEndPort\uFF1A{1}]\u4E0E\u4E13\u7528\u7AEF\u53E3\u8303\u56F4[PrivateStartPort\uFF1A[2}\uFF0CPrivateEndPport\uFF1A{3}]\u4E0D\u517C\u5BB9

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:184
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
for\ range\ port\ forwarding,\ the\ port\ range\ size\ must\ match;\ vip\ range[%s,\ %s]'s\ size\ doesn't\ match\ range[%s,\ %s]'s\ size = \u5BF9\u4E8E\u8303\u56F4\u7AEF\u53E3\u8F6C\u53D1\uFF0C\u7AEF\u53E3\u8303\u56F4\u5927\u5C0F\u5FC5\u987B\u5339\u914D\uFF1BVIP\u8303\u56F4[{0}, {1}]\u7684\u5927\u5C0F\u4E0D\u5339\u914D\u8303\u56F4[{2}, {3}]\u7684\u5927\u5C0F

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:193
# args: msg.getAllowedCidr()
invalid\ CIDR[%s],\ only\ ipv4\ is\ supported = \u65E0\u6548\u7684CIDR[{0}]\uFF0C\u4EC5\u652F\u6301ipv4

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:191
# args: msg.getAllowedCidr()
invalid\ CIDR[%s] = \u65E0\u6548\u7684CIDR[{0}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:211
# args: vipStart,vipEnd,vo.getUuid(),vo.getVipPortStart(),vo.getVipPortEnd()
vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ overlaps\ with\ rule[uuid\:%s,\ vipStartPort\:%s,\ vipEndPort\:%s] = \u865A\u62DFIP\uFF08vip\uFF09\u7AEF\u53E3\u8303\u56F4[vipStartPort:{0}, vipEndPort:{1}]\u4E0E\u89C4\u5219[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]\u91CD\u53E0

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:269
# args: vm.getName(),vm.getUuid(),vipUuid
the\ VM[name\:%s\ uuid\:%s]\ already\ has\ port\ forwarding\ rules\ that\ have\ different\ VIPs\ than\ the\ one[uuid\:%s] = \u4E91\u4E3B\u673A[name:{0} uuid:{1}]\u5DF2\u7ECF\u6709\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219\uFF0C\u4E14\u4E0E[uuid:{2}]\u6709\u4E0D\u540C\u7684VIPs

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:282
# args: vmNicUuid
vmNic\ uuid[%s]\ is\ not\ allowed\ add\ portForwarding\ with\ allowedCidr\ rule,\ because\ vmNic\ exist\ eip = \u4E0D\u5141\u8BB8vmnic uuid[{0}]\u4F7F\u7528AllowedCIDR\u89C4\u5219\u6DFB\u52A0PortForwarding\uFF0C\u56E0\u4E3Avmnic\u5B58\u5728EIP

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:316
# args: vmNicUuid,privatePortStart,privatePortEnd,protocolType
could\ not\ attach\ port\ forwarding\ rule,\ because\ vmNic[uuid\:%s]\ already\ has\ a\ rule\ that\ overlaps\ the\ target\ private\ port\ ranges[%s,\ %s],\ has\ the\ same\ protocol\ type[%s]\ and\ has\ AllowedCidr = \u65E0\u6CD5\u6302\u8F7D\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219\uFF0C\u56E0\u4E3A\u4E91\u4E3B\u673A\u7F51\u5361[uuid:{0}]\u5DF2\u7ECF\u6709\u4E0E\u76EE\u6807\u89C4\u5219\u7684\u4E91\u4E3B\u673A\u7AEF\u53E3\u8303\u56F4[{1}, {2}]\u91CD\u53E0\u3001\u534F\u8BAE\u7C7B\u578B[{3}]\u76F8\u540C\u4E14\u8BBE\u7F6E\u6709\u5141\u8BB8CIDR\u7684\u89C4\u5219

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:306
# args: vmNicUuid,privatePortStart,privatePortEnd,protocolType
could\ not\ attach\ port\ forwarding\ rule\ with\ allowedCidr,\ because\ vmNic[uuid\:%s]\ already\ has\ rules\ that\ overlap\ the\ target\ private\ port\ ranges[%s,\ %s]\ and\ have\ the\ same\ protocol\ type[%s] = \u65E0\u6CD5\u6302\u8F7D\u8BBE\u7F6E\u6709\u5141\u8BB8CIDR\u7684\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219\uFF0C\u56E0\u4E3A\u4E91\u4E3B\u673A\u7F51\u5361[uuid:{0}]\u5DF2\u7ECF\u6709\u4E0E\u76EE\u6807\u89C4\u5219\u7684\u4E91\u4E3B\u673A\u7AEF\u53E3\u8303\u56F4[{1}, {2}]\u91CD\u53E0\u4E14\u534F\u8BAE\u7C7B\u578B[{3}]\u76F8\u540C\u7684\u89C4\u5219

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingManagerImpl.java:1222
# args: struct.getRule().getUuid()
port\ forwarding\ rule\ [uuid\:%s]\ is\ deleted = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid\uFF1A{0}]\u5DF2\u5220\u9664

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:375
# args: msg.getServerGroupUuid()
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ null = \u65E0\u6CD5\u5C06\u540E\u7AEF\u670D\u52A1\u5668vmnic\u6DFB\u52A0\u5230ServerGroup[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3Avmnic uuid\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:88
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ there\ is\ no\ load\ balancer\ slb\ group\ [uuid\:%s] = \u65E0\u6CD5\u521B\u5EFASLB\u5B9E\u4F8B\uFF0C\u56E0\u4E3A\u6CA1\u6709\u8D1F\u8F7D\u5E73\u8861\u5668SLB\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:93
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ there\ is\ no\ slb\ offering\ configured\ for\ slb\ group\ [uuid\:%s] = \u65E0\u6CD5\u521B\u5EFASLB\u5B9E\u4F8B\uFF0C\u56E0\u4E3A\u6CA1\u6709\u4E3ASLB\u7EC4[uuid\uFF1A{0}]\u914D\u7F6ESLB\u4EA7\u54C1

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:99
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ image\ uuid\ of\ slb\ offering\ [uuid\:%s]\ is\ null = \u65E0\u6CD5\u521B\u5EFASLB\u5B9E\u4F8B\uFF0C\u56E0\u4E3ASLB\u4EA7\u54C1[uuid\uFF1A{0}]\u7684\u955C\u50CFuuid\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:104
# args: slbOfferingVO.getImageUuid()
could\ not\ create\ slb\ instance\ because\ image\ [uuid\:%s]\ is\ deleted = \u65E0\u6CD5\u521B\u5EFASLB\u5B9E\u4F8B\uFF0C\u56E0\u4E3A\u955C\u50CF[uuid\uFF1A{0}]\u5DF2\u5220\u9664

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:112
# args: frontL3.getCategory()
could\ not\ create\ slb\ group\ because\ invalid\ front\ l3\ network\ type\ %s = \u65E0\u6CD5\u521B\u5EFASLB\u7EC4\uFF0C\u56E0\u4E3A\u524D\u7AEF\u4E09\u5C42\u7F51\u7EDC\u7C7B\u578B{0}\u65E0\u6548

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:127
# args: 
could\ not\ create\ slb\ group,\ because\ front\ network\ doesn't\ support\ ipv6\ yet = \u65E0\u6CD5\u521B\u5EFASLB\u7EC4\uFF0C\u56E0\u4E3A\u524D\u7AEF\u7F51\u7EDC\u5C1A\u4E0D\u652F\u6301IPv6

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:142
# args: 
could\ not\ create\ slb\ group,\ because\ backend\ network\ doesn't\ support\ ipv6\ yet = \u65E0\u6CD5\u521B\u5EFASLB\u7EC4\uFF0C\u56E0\u4E3A\u540E\u7AEF\u7F51\u7EDC\u5C1A\u4E0D\u652F\u6301IPv6

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:143
# args: msg.getResourceUuid()
could\ not\ change\ resource\ owner,\ because\ the\ resource[uuid\:%s,\ type\:VmInstance]\ has\ already\ attached\ security\ group = \u65E0\u6CD5\u66F4\u6539\u8D44\u6E90\u6240\u6709\u8005\uFF0C\u56E0\u4E3A\u8D44\u6E90[uuid:{0}, \u7C7B\u578B:VmInstance] \u5DF2\u52A0\u8F7D\u5B89\u5168\u7EC4

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:250
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ vm\ nic[uuid\:%s]\ not\ found = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230VM NIC[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:256
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ the\ vm\ nic[uuid\:%s]\ not\ attached\ to\ any\ security\ group = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3AVM NIC[uuid\uFF1A{0}]\u672A\u6302\u8F7D\u5230\u4EFB\u4F55\u5B89\u5168\u7EC4

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:266
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ not\ found = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u5B89\u5168\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:271
# args: priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ cannot\ be\ less\ than\ 1 = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u65E0\u6548\uFF0C\u4F18\u5148\u7EA7[{0}]\u4E0D\u80FD\u5C0F\u4E8E1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:275
# args: aoMap.get(priority),ao.getSecurityGroupUuid(),priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ priority,\ both\ security\ group\ %s\ and\ %s\ have\ priority[%d] = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u91CD\u590D\uFF0C\u5B89\u5168\u7EC4{0}\u548C{1}\u90FD\u5177\u6709\u76F8\u540C\u7684\u4F18\u5148\u7EA7[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:278
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ security\ group[uuid\:%s] = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:288
# args: ao.getSecurityGroupUuid(),vmAccountUuid
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ is\ not\ owned\ by\ account[uuid\:%s]\ or\ admin = \u65E0\u6CD5\u8BBE\u7F6E VM NIC \u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4 [uuid:{0}] \u4E0D\u5C5E\u4E8E\u5E10\u6237[uuid:{1}] \u6216\u7BA1\u7406\u5458

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:298
# args: priorities[0]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority\ expects\ to\ start\ at\ 1,\ but\ [%d] = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u65E0\u6548\uFF0C\u4F18\u5148\u7EA7\u5E94\u4ECE1\u5F00\u59CB\uFF0C\u800C\u4E0D\u662F[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:302
# args: priorities[i],priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ and\ priority[%d]\ expected\ to\ be\ consecutive = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7\u65E0\u6548\uFF0C\u4F18\u5148\u7EA7[{0}]\u548C\u4F18\u5148\u7EA7[{1}]\u5E94\u662F\u8FDE\u7EED\u7684

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:348
# args: priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ admin\ security\ group\ priority[%d]\ must\ be\ higher\ than\ users = \u65E0\u6CD5\u8BBE\u7F6EVM NIC\u5B89\u5168\u7EC4\uFF0C\u56E0\u4E3A\u7BA1\u7406\u5458\u5B89\u5168\u7EC4\u4F18\u5148\u7EA7[{0}]\u5FC5\u987B\u9AD8\u4E8E\u7528\u6237\u5B89\u5168\u7EC4

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:357
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ ruleUuids\ is\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3ARuleUIds\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:361
# args: msg.getSecurityGroupUuid()
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u5B89\u5168\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:369
# args: r
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group\ rule[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u5B89\u5168\u7EC4\u89C4\u5219[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:378
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ no\ security\ group\ rule\ state\ need\ to\ change = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\u72B6\u6001\uFF0C\u56E0\u4E3A\u6CA1\u6709\u5B89\u5168\u7EC4\u89C4\u5219\u9700\u8981\u4FEE\u6539\u72B6\u6001

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:386
# args: 
could\ no\ change\ vm\ nic\ security\ policy,\ because\ ingress\ policy\ and\ egress\ policy\ cannot\ be\ both\ null = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u5165\u53E3\u7B56\u7565\u548C\u51FA\u53E3\u7B56\u7565\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:389
# args: msg.getIngressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ ingress\ policy[%s] = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u5165\u53E3\u7B56\u7565[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:393
# args: msg.getEgressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ egress\ policy[%s] = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u51FA\u53E3\u7B56\u7565[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:397
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230VM NIC[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:402
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ has\ no\ security\ policy = \u65E0\u6CD5\u66F4\u6539VM NIC\u5B89\u5168\u7B56\u7565\uFF0C\u56E0\u4E3AVM NIC[uuid\uFF1A{0}]\u6CA1\u6709\u5B89\u5168\u7B56\u7565

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:416
# args: msg.getType()
could\ not\ update\ security\ group\ rule\ priority,\ because\ invalid\ type[%s] = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u7C7B\u578B[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:421
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ is\ not\ exist = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:425
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rules\ is\ empty = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:435
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ rules\ size\ not\ match = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u89C4\u5219\u5927\u5C0F\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:440
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ priority[%d]\ is\ invalid = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219\u4F18\u5148\u7EA7[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:443
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ has\ duplicate = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:449
# args: ao.getRuleUuid(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule[uuid\:%s]\ not\ in\ security\ group[uuid\:%s] = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219[uuid\uFF1A{0}]\u4E0D\u5728\u5B89\u5168\u7EC4[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:452
# args: ao.getPriority(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ not\ in\ security\ group[uuid\:%s] = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u4E0D\u5728\u5B89\u5168\u7EC4[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:457
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ uuid\ duplicate = \u65E0\u6CD5\u66F4\u65B0\u5B89\u5168\u7EC4\u89C4\u5219\u4F18\u5148\u7EA7\uFF0C\u56E0\u4E3A\u89C4\u5219uuid\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:464
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule\ uuid[%s]\ is\ not\ exist = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219uuid[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:470
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ is\ default\ rule,\ only\ the\ description\ and\ status\ can\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u662F\u9ED8\u8BA4\u89C4\u5219\uFF0C\u53EA\u80FD\u8BBE\u7F6E\u63CF\u8FF0\u548C\u72B6\u6001

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:476
# args: msg.getUuid(),SecurityGroupConstant.DEFAULT_RULE_PRIORITY
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ priority\ cannot\ be\ set\ to\ default\ rule\ priority[%d] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u4F18\u5148\u7EA7\u65E0\u6CD5\u8BBE\u7F6E\u4E3A\u9ED8\u8BA4\u89C4\u5219\u4F18\u5148\u7EA7[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:485
# args: vo.getType(),count.intValue(),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4{0}\u89C4\u5219\u7F16\u53F7[{1}]\u8D85\u51FA\u6700\u5927\u9650\u5236[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:488
# args: vo.getType().toString(),count.intValue()
could\ not\ change\ security\ group\ rule,\ because\ the\ maximum\ priority\ of\ %s\ rule\ is\ [%d] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A{0}\u89C4\u5219\u7684\u6700\u9AD8\u4F18\u5148\u7EA7\u4E3A[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:497
# args: msg.getState()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ state[%s] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u72B6\u6001[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:505
# args: msg.getAction()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ action[%s] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:513
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ protocol[%s] = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:545
# args: msg.getUuid(),msg.getSrcIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Egress,\ srcIpRange[%s]\ cannot\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u7C7B\u578B\u4E3A\u51FA\u53E3\uFF0C\u65E0\u6CD5\u8BBE\u7F6ESrcIPRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:542
# args: msg.getUuid(),msg.getDstIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Ingress,\ dstIpRange[%s]\ cannot\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4\u89C4\u5219[{0}]\u7C7B\u578B\u4E3A\u5165\u53E3\uFF0C\u65E0\u6CD5\u8BBE\u7F6EdstIpRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:535
# args: msg.getSrcIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ srcIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5DF2\u8BBE\u7F6ESrcIPRange[{0}]\uFF0CRemoteSecurityGroupuuid[{1}]\u5FC5\u987B\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:548
# args: msg.getDstIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ dstIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5DF2\u8BBE\u7F6EdstIpRange[{0}]\uFF0CRemoteSecurityGroupuuid[{1}]\u5FC5\u987B\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:555
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ not\ found = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230\u8FDC\u7A0B\u5B89\u5168\u7EC4[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:558
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ is\ set,\ srcIpRange\ and\ dstIpRange\ must\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5DF2\u8BBE\u7F6E\u8FDC\u7AEF\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\uFF0CSrcIPRange\u548CDstIPRange\u5FC5\u987B\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:611
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ must\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE\u4E3A[{0}]\uFF0C\u5FC5\u987B\u8BBE\u7F6EdstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:603
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ empty = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE\u4E3A[{0}]\uFF0CdstPortRange\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:598
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ set = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE\u4E3A[{0}]\uFF0C\u65E0\u6CD5\u8BBE\u7F6EdstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:642
# args: JSONObjectUtil.toJsonString(sao),o.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = \u65E0\u6CD5\u66F4\u6539\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219[{0}]\u4E0E\u6570\u636E\u5E93\u4E2D\u7684\u89C4\u5219[uuid\uFF1A{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:145
# args: uuid,backendL3Cidr,frontL3Uuid,frontL3Cidr
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ cidr\ [%s]\ is\ overlapped\ with\ frond\ l3\ network[uuid\:%s]\ cidr\ [%s] = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]CIDR[{1}]\u4E0E\u524D\u7AEF\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{2}]CIDR[{3}]\u91CD\u53E0

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:768
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ can\ not\ be\ vpc\ network\ because\ other\ backend\ network\ is\ not\ vpc\ network = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u4E0D\u80FD\u662FVPC\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u5176\u4ED6\u540E\u7AEF\u7F51\u7EDC\u4E0D\u662FVPC\u7F51\u7EDC

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:804
# args: 
can't\ delete\ rules\ of\ different\ security\ group = \u65E0\u6CD5\u5220\u9664\u4E0D\u540C\u5B89\u5168\u7EC4\u7684\u89C4\u5219

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:807
# args: vo.getUuid()
can't\ delete\ default\ rule[uuid\:%s] = \u65E0\u6CD5\u5220\u9664\u9ED8\u8BA4\u89C4\u5219[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:170
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ not\ connected\ vpc\ router = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:835
# args: backendL3Uuids.get(0),firstBackendVrUuids.get(0),frontL3Uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ which\ is\ not\ connect\ to\ front\ network[uuid\:%s] = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u8FDE\u63A5\u4E86VPC\u8DEF\u7531\u5668[uuid\uFF1A{1}]\uFF0C\u800C\u8BE5\u8DEF\u7531\u5668\u672A\u8FDE\u63A5\u5230\u524D\u7AEF\u7F51\u7EDC[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:897
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = \u4E91\u7269\u7406\u673A\u7F51\u5361[uuids:{0}]\u4E0D\u5728\u5B89\u5168\u7EC4[uuid:{1}]\u6302\u8F7D\u7684L3\u7F51\u7EDC\u4E0A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:933
# args: uuid
could\ not\ add\ security\ group\ rule,\ because\ security\ group[uuid\:%s]\ does\ not\ exist = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:922
# args: SecurityGroupConstant.ONE_API_RULES_MAX_NUM
could\ not\ add\ security\ group\ rule,\ because\ the\ rules\ cannot\ be\ empty\ or\ exceed\ the\ max\ number\ %d = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u4E0D\u80FD\u4E3A\u7A7A\u6216\u8D85\u8FC7\u6700\u5927\u6570\u91CF{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:927
# args: msg.getRemoteSecurityGroupUuids()
could\ not\ add\ security\ group\ rule,\ because\ duplicate\ uuid\ in\ remoteSecurityGroupUuids\:\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3ARemoteSecurityGroupuuid\u4E2D\u5B58\u5728\u91CD\u590D\u7684uuid\uFF1A{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:938
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ remote\ security\ group\ uuid\ is\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u8FDC\u7AEF\u5B89\u5168\u7EC4uuid\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:974
# args: SecurityGroupConstant.DEFAULT_RULE_PRIORITY,SecurityGroupConstant.LOWEST_RULE_PRIORITY
could\ not\ add\ security\ group\ rule,\ because\ rule\ priority\ must\ greater\ than\ %d\ or\ equals\ %d = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u4F18\u5148\u7EA7\u5FC5\u987B\u5927\u4E8E{0}\u6216\u7B49\u4E8E{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:982
# args: ao.getType(),SecurityGroupRuleType.getAllType()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ type[%s],\ valid\ types\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u7C7B\u578B[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u7C7B\u578B\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:989
# args: ao.getState(),SecurityGroupRuleState.getAllState()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ state[%s],\ valid\ states\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u72B6\u6001[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:994
# args: ao.getProtocol(),SecurityGroupRuleProtocolType.getAllProtocol()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ protocol[%s],\ valid\ protocols\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u534F\u8BAE[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u534F\u8BAE\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1001
# args: ao.getAction(),SecurityGroupRuleAction.getAllAction()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ action[%s],\ valid\ actions\ are\ %s = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219\u52A8\u4F5C[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u52A8\u4F5C\u4E3A{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1009
# args: ao.getIpVersion(),IPv6Constants.IPv4,IPv6Constants.IPv6
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ ipVersion[%d],\ valid\ ipVersions\ are\ %d/%d = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219IPVersion[{0}]\u65E0\u6548\uFF0C\u6709\u6548\u7684IPVersion\u4E3A{1}/{2}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1037
# args: ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ dstIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ ingress\ rule = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4E0D\u5141\u8BB8\u4E3A\u5165\u53E3\u89C4\u5219\u8BBE\u7F6EdstIpRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1042
# args: ao.getAllowedCidr(),ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ srcIpRange[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3Aallowedcidr[{0}]\u548Csrciprange[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1031
# args: ao.getDstIpRange(),ao.getRemoteSecurityGroupUuid()
could\ not\ add\ security\ group\ rule,\ because\ the\ ip\ range[%s]\ and\ remoteSecurityGroupUuid[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3AIP\u8303\u56F4[{0}]\u548CRemoteSecurityGroupuuid[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1019
# args: ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ srcIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ egress\ rule = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4E0D\u5141\u8BB8\u4E3A\u51FA\u53E3\u89C4\u5219\u8BBE\u7F6ESrcIPRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1024
# args: ao.getAllowedCidr(),ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ dstIpRange[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3AAllowedCidr[{0}]\u548CdstIpRange[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1073
# args: ao.getEndPort(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ endPort[%d],\ endPort\ must\ be\ greater\ than\ or\ equal\ to\ startPort[%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219endPort[{0}]\u65E0\u6548\uFF0CendPort\u5FC5\u987B\u5927\u4E8E\u6216\u7B49\u4E8EstartPort[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1076
# args: ao.getDstPortRange(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ dstPortRange[%s]\ and\ starPort[%s]\ are\ in\ conflict = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3ADstPortRange[{0}]\u548CStarPort[{1}]\u51B2\u7A81

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1087
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ TCP/UDP\ must\ set\ dstPortRange = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE\u7C7B\u578BTCP/UDP\u5FC5\u987B\u8BBE\u7F6EdstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1065
# args: ao.getDstPortRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ dstPortRange[%s] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE\u7C7B\u578BALL\u6216ICMP\u65E0\u6CD5\u8BBE\u7F6EDstPortRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1068
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ startPort\ or\ endPort = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u534F\u8BAE\u7C7B\u578BALL\u6216ICMP\u65E0\u6CD5\u8BBE\u7F6EStartPort\u6216EndPort

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1097
# args: JSONObjectUtil.toJsonString(newRules.get(i)),JSONObjectUtil.toJsonString(newRules.get(j))
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ and\ rule[%s]\ are\ dupilicated = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219[{0}]\u548C\u89C4\u5219[{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1121
# args: JSONObjectUtil.toJsonString(sao),vo.getUuid()
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u89C4\u5219[{0}]\u4E0E\u6570\u636E\u5E93\u4E2D\u7684\u89C4\u5219[uuid\uFF1A{1}]\u91CD\u590D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1136
# args: SecurityGroupRuleType.Egress,SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ has\ reached\ the\ maximum\ limit[%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4{0}\u89C4\u5219\u5DF2\u8FBE\u5230\u6700\u5927\u9650\u5236[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1144
# args: SecurityGroupRuleType.Egress,(egressRuleCount + toCreateEgressRuleCount),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u5B89\u5168\u7EC4{0}\u89C4\u5219\u7F16\u53F7[{1}]\u8D85\u51FA\u6700\u5927\u9650\u5236[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1148
# args: msg.getPriority(),ingressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ ingress\ rule\ maximum\ priority\ is\ [%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u5FC5\u987B\u8FDE\u7EED\uFF0C\u5165\u53E3\u89C4\u5219\u6700\u5927\u4F18\u5148\u7EA7\u4E3A[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1151
# args: msg.getPriority(),egressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ egress\ rule\ maximum\ priority\ is\ [%d] = \u65E0\u6CD5\u6DFB\u52A0\u5B89\u5168\u7EC4\u89C4\u5219\uFF0C\u56E0\u4E3A\u4F18\u5148\u7EA7[{0}]\u5FC5\u987B\u662F\u8FDE\u7EED\u7684\uFF0C\u51FA\u53E3\u89C4\u5219\u6700\u5927\u4F18\u5148\u7EA7\u4E3A[{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:217
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ vpc\ network\ because\ other\ backend\ network\ is\ vpc\ network = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u5FC5\u987B\u662FVPC\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u5176\u4ED6\u540E\u7AEF\u7F51\u7EDC\u662FVPC\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:228
# args: uuid,bVrUuids.get(0),firstBackendVrUuids.get(0)
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ while\ other\ backend\ network\ is\ connected\ to\ vpc\ router[uuid\:%s] = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[uuid\uFF1A{1}]\uFF0C\u800C\u53E6\u4E00\u4E2A\u540E\u7AEF\u7F51\u7EDC\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:186
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ private\ flat\ network\ because\ frond\ l3\ network\ is\ private\ flat\ network = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u5FC5\u987B\u662F\u4E13\u7528\u4E09\u5C42\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u524D\u7AEF\u4E09\u5C42\u7F51\u7EDC\u662F\u4E13\u7528\u4E09\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:156
# args: frontL3.getUuid()
could\ not\ execute\ the\ api\ operation.\ frontend\ network\ [uuid\:%s]\ is\ not\ connected\ vpc\ router = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u524D\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u672A\u8FDE\u63A5VPC\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:164
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ vpc\ network\ because\ frond\ l3\ network\ is\ vpc\ network = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u5FC5\u987B\u662FVPC\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u524D\u7AEF\u4E09\u5C42\u7F51\u7EDC\u662FVPC\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:175
# args: uuid,backendVrUuids.get(0),frontVrUuids.get(0)
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ while\ front\ network\ is\ connected\ to\ vpc\ router[uuid\:%s] = \u65E0\u6CD5\u6267\u884CAPI\u64CD\u4F5C\u3002\u540E\u7AEF\u7F51\u7EDC[uuid\uFF1A{0}]\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[uuid\uFF1A{1}]\uFF0C\u524D\u7AEF\u7F51\u7EDC\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:254
# args: msg.getDeployType()
could\ not\ create\ slb\ group\ because\ invalid\ deploy\ type\ %s = \u65E0\u6CD5\u521B\u5EFASLB\u7EC4\uFF0C\u56E0\u4E3A\u90E8\u7F72\u7C7B\u578B{0}\u65E0\u6548

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:263
# args: msg.getBackendType()
could\ not\ create\ slb\ group\ because\ invalid\ backend\ type\ %s = \u65E0\u6CD5\u521B\u5EFASLB\u7EC4\uFF0C\u56E0\u4E3A\u540E\u7AEF\u7C7B\u578B{0}\u65E0\u6548

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:298
# args: frontL3Uuid,slbVO.getUuid()
can\ not\ detach\ front\ end\ l3\ network\ [uuid\:%s]\ from\ SLB\ instance = \u65E0\u6CD5\u4ECESLB\u5B9E\u4F8B\u5206\u79BB\u524D\u7AEF\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:303
# args: slbVO.getManagementNetworkUuid(),slbVO.getUuid()
can\ not\ detach\ management\ l3\ network\ [uuid\:%s]\ from\ SLB\ instance = \u65E0\u6CD5\u4ECESLB\u5B9E\u4F8B\u5206\u79BB\u7BA1\u7406\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:315
# args: msg.getVmNicUuid()
can\ not\ detach\ nic\ [uuid\:%s]\ from\ SLB\ instance,\ because\ it\ is\ the\ last\ backend\ l3\ network\ nic = \u65E0\u6CD5\u4ECESLB\u5B9E\u4F8B\u5206\u79BBNIC[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A\u5B83\u662F\u6700\u540E\u4E00\u4E2A\u540E\u7AEF\u4E09\u5C42\u7F51\u7EDCNIC

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:343
# args: msg.getVipUuid(),vipVO.getServicesTypes()
can\ not\ create\ load\ balancer\ because\ vip\ [uuid\:%s]\ has\ attached\ other\ network\ service\ [%s] = \u65E0\u6CD5\u521B\u5EFA\u8D1F\u8F7D\u5E73\u8861\u5668\uFF0C\u56E0\u4E3AVIP[uuid\uFF1A{0}]\u5DF2\u9644\u52A0\u5176\u4ED6\u7F51\u7EDC\u670D\u52A1[{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:350
# args: msg.getVipUuid(),vrUuids
can\ not\ create\ load\ balancer\ because\ vip\ [uuid\:%s]\ has\ attached\ to\ vpc\ router\ [%s] = \u65E0\u6CD5\u521B\u5EFA\u8D1F\u8F7D\u5E73\u8861\u5668\uFF0C\u56E0\u4E3AVIP[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:356
# args: slbGroupUuid
can\ not\ create\ load\ balancer\ because\ invalid\ slb\ group\ [uuid\:%s] = \u65E0\u6CD5\u521B\u5EFA\u8D1F\u8F7D\u5E73\u8861\u5668\uFF0C\u56E0\u4E3ASLB\u7EC4[uuid\uFF1A{0}]\u65E0\u6548

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:407
# args: 
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network\ is\ not\ connected\ slb\ instance = \u65E0\u6CD5\u5C06vmnic\u6DFB\u52A0\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u670D\u52A1\u5668\u7EC4\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC\u672A\u8FDE\u63A5\u5230SLB\u5B9E\u4F8B

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:389
# args: uuid
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network\ [uuid\:%s]\ is\ connected\ any\ vpc\ router = \u65E0\u6CD5\u5C06vmnic\u6DFB\u52A0\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u670D\u52A1\u5668\u7EC4\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4EFB\u4F55VPC\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:396
# args: uuid
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network[uuid\:%s]\ is\ connected\ to\ different\ vpc\ router = \u65E0\u6CD5\u5C06vmnic\u6DFB\u52A0\u5230\u8D1F\u8F7D\u5E73\u8861\u5668\u670D\u52A1\u5668\u7EC4\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E0D\u540C\u7684VPC\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/network/service/slb/SlbCreatePublicVipFlow.java:60
# args: slbInstance.getUuid(),frontL3Uuid
can\ not\ find\ nic\ of\ slb\ instance\ [uuid\:%s]\ which\ is\ attached\ to\ slb\ group\ front\ l3\ network\ [uuid\:%s] = \u627E\u4E0D\u5230SLB\u5B9E\u4F8B[uuid\uFF1A{0}]\u7684\u7F51\u5361\uFF0C\u8BE5\u7F51\u5361\u6302\u63A5\u5728SLB\u7EC4\u524D\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{1}]\u4E0A

# at: src/main/java/org/zstack/network/service/slb/SlbVyosBackend.java:38
# args: 
can\ not\ find\ slb\ vm\ instance = \u627E\u4E0D\u5230SLB\u4E91\u4E3B\u673A\u5B9E\u4F8B

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:48
# args: 
system\ vip\ can\ not\ be\ deleted\ by\ API\ message = API\u6D88\u606F\u65E0\u6CD5\u5220\u9664\u7CFB\u7EDFVIP

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:54
# args: msg.getAllocatorStrategy()
unsupported\ ip\ allocation\ strategy[%s] = \u4E0D\u652F\u6301\u7684ip\u5206\u914D\u7B56\u7565[{0}]

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:63
# args: msg.getRequiredIp()
requiredIp[%s]\ is\ not\ in\ valid\ IPv4\ mediaType = \u8BF7\u6C42\u7684ip[{0}]\u4E0D\u662F\u6709\u6548\u7684IPv4\u5730\u5740

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:70
# args: msg.getRequiredIp(),msg.getL3NetworkUuid()
there\ is\ already\ a\ vip[%s]\ on\ l3Network[uuid\:%s] = \u5DF2\u6709\u4E00\u4E2Avip[{0}]\u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:76
# args: msg.getRequiredIp()
required\ ip\ address\ [%s]\ is\ already\ used = \u6240\u9700\u7684IP\u5730\u5740[{0}]\u5DF2\u88AB\u4F7F\u7528

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:100
# args: 
could\ not\ create\ vip,\ because\ can\ not\ determine\ the\ vip\ version = \u65E0\u6CD5\u521B\u5EFAVIP\uFF0C\u56E0\u4E3A\u65E0\u6CD5\u786E\u5B9AVIP\u7248\u672C

# at: src/main/java/org/zstack/network/service/vip/VipBase.java:155
# args: self.getUuid(),self.getName(),self.getIp(),self.getServiceProvider()
service\ provider\ of\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:\ %s]\ has\ been\ set\ to\ %s = vip[uuid:{0}, name:{1}, ip: {2}]\u7684\u670D\u52A1\u63D0\u4F9B\u5668\u5DF2\u7ECF\u88AB\u8BBE\u7F6E\u6210[{3}]

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:43
# args: 
VipQos\ for\ ipv6\ wil\ be\ added\ soon = IPv6\u7684VIPQoS\u5C06\u5F88\u5FEB\u6DFB\u52A0

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:53
# args: msg.getVipUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ already\ existed = \u865A\u62DFIP[uuid: {0}]\u7684Qos\u5DF2\u7ECF\u5B58\u5728\u4E86

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:48
# args: msg.getVipUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ already\ existed = \u865A\u62DFIP[uuid: {0}]\u7684Qos\u7AEF\u53E3{1}\u5DF2\u7ECF\u5B58\u5728

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:59
# args: 
SetVipQos\ MUST\ set\ InboundBandwidth\ or\ OutboundBandwidth = \u8BBE\u7F6E\u865A\u62DFIP\u7684Qos\u662F\u5FC5\u987B\u8BBE\u7F6E\u4E0A\u884C\u7F51\u7EDC\u5E26\u5BBD\u548C\u4E0B\u884C\u7F51\u7EDC\u5E26\u5BBD

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:67
# args: 
Cannot\ set\ Qos\ for\ this\ Vip.\ Not\ all\ peer\ l3networks\ provide\ VipQos\ service. = \u65E0\u6CD5\u8BBE\u7F6E\u6B64VIP\u7684QoS\u3002\u5E76\u975E\u6240\u6709\u5BF9\u7B49\u4E09\u5C42\u7F51\u7EDC\u90FD\u63D0\u4F9BVIPQoS\u670D\u52A1\u3002

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:80
# args: msg.getUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ does\ not\ exist = \u865A\u62DFIP[uuid: {0}]\u7684Qos\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:75
# args: msg.getUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ does\ not\ exist = \u865A\u62DFIP[uuid: {0}]\u7684Qos\u7AEF\u53E3{1}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/network/service/vipQos/VipQosManagerImpl.java:129
# args: vipUuid
Can\ not\ find\ VipQos\ backend\ for\ Vip\ [uuid\:%s] = \u672A\u627E\u5230\u865A\u62DFIP\u7684Qos\u540E\u7AEF

# at: src/main/java/org/zstack/network/service/vipQos/flat/FlatVipQosBackend.java:198
# args: hostUuid
operation\ error,\ vip\ %s\ has\ not\ bind\ to\ vm = \u64CD\u4F5C\u5931\u8D25\uFF0C\u865A\u62DFIP{0}\u6CA1\u6709\u7ED1\u5B9A\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:656
# args: self.getName(),self.getUuid(),self.getState()
the\ virtual\ router[name\:%s,\ uuid\:%s,\ current\ state\:%s]\ is\ not\ running,and\ cannot\ perform\ required\ operation.\ Please\ retry\ your\ operation\ later\ once\ it\ is\ running = \u4E91\u8DEF\u7531[name:{0}, uuid:{1}, current state:{2}]\u6CA1\u6709\u8FD0\u884C\uFF0C\u65E0\u6CD5\u6267\u884C\u8BF7\u6C42\u7684\u64CD\u4F5C\u3002\u8BF7\u5728\u5176\u542F\u52A8\u540E\u91CD\u8BD5

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:661
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
virtual\ router[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = \u4E91\u8DEF\u7531[uuid:{0}]\u5904\u4E8E\u72B6\u6001{1}\u4E2D\uFF0C\u65E0\u6CD5\u5411{2}\u53D1\u9001http\u8C03\u7528

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:666
# args: self.getUuid(),msg.getPath()
virtual\ router[uuid\:%s]\ has\ no\ management\ nic\ that\ cannot\ make\ http\ call\ to\ %s = \u865A\u62DF\u8DEF\u7531\u5668[uuid\uFF1A{0}]\u6CA1\u6709\u65E0\u6CD5\u5BF9{1}\u8FDB\u884CHTTP\u8C03\u7528\u7684\u7BA1\u7406NIC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:995
# args: info.getIp(),info.getMac(),vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError()
unable\ to\ add\ nic[ip\:%s,\ mac\:%s]\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s = \u4E0D\u80FD\u6DFB\u52A0\u7F51\u5361[ip:{0}, mac:{1}]\u5230\u865A\u62DF\u8DEF\u7531\u8BBE\u5907[uuid:{2} ip:{3}]\uFF0C\u56E0\u4E3A{4}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:94
# args: msg.getDefaultRouteL3NetworkUuid(),msg.getVmInstanceUuid()
l3\ uuid[\:%s]\ is\ same\ to\ default\ network\ of\ virtual\ router\ [uuid\:%s] = L3 uuid[\uFF1A{0}]\u4E0E\u865A\u62DF\u8DEF\u7531\u5668[uuid\uFF1A{1}]\u7684\u9ED8\u8BA4\u7F51\u7EDC\u76F8\u540C

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:107
# args: msg.getDefaultRouteL3NetworkUuid(),msg.getVmInstanceUuid()
l3\ uuid[\:%s]\ is\ not\ attached\ to\ virtual\ router\ [uuid\:%s] = L3 uuid[\uFF1A{0}]\u672A\u8FDE\u63A5\u5230\u865A\u62DF\u8DEF\u7531\u5668[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:114
# args: msg.getDefaultRouteL3NetworkUuid()
could\ not\ set\ the\ default\ network,\ because\ l3\ uuid[\:%s]\ is\ not\ public\ network = \u8BBE\u7F6E\u9ED8\u8BA4\u7F51\u7EDC\u5931\u8D25\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u8DEF[:{0}] \u4E0D\u662F\u516C\u6709\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:112
# args: msg.getDefaultRouteL3NetworkUuid()
could\ not\ set\ the\ default\ network,\ because\ l3\ uuid[\:%s]\ is\ management\ network = \u8BBE\u7F6E\u9ED8\u8BA4\u7F51\u7EDC\u5931\u8D25\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u8DEF[:{0}] \u662F\u7BA1\u7406\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:219
# args: msg.getImageUuid(),type,ImageMediaType.RootVolumeTemplate
image[uuid\:%s]'s\ mediaType\ is\ %s,\ the\ mediaType\ of\ a\ virtual\ router\ image\ must\ be\ %s = \u955C\u50CF[uuid:{0}]\u7684mediaType\u4E3A{1}\uFF0C\u4E91\u8DEF\u7531\u7684mediaType\u5FC5\u987B\u4E3A{2}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:225
# args: msg.getImageUuid(),format
image[uuid\:%s]\ is\ of\ format\ %s,\ cannot\ be\ used\ for\ virtual\ router = \u955C\u50CF[uuid:{0}]\u7684\u683C\u5F0F\u4E3A{1}\uFF0C\u65E0\u6CD5\u88AB\u7528\u4E8E\u4E91\u8DEF\u7531

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:191
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
management\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = \u7BA1\u7406\u7F51\u7EDC[uuid:{0}]\u548C\u5C06\u8981\u521B\u5EFA\u7684\u89C4\u683C\u4E0D\u5904\u4E8E\u540C\u4E00\u4E2A\u533A\u57DF\uFF08zone\uFF09[uuid:{1}]\u4E2D

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:196
# args: 
can\ not\ create\ virtual\ router\ offering,\ because\ management\ network\ doesn't\ support\ ipv6\ yet = \u65E0\u6CD5\u521B\u5EFA\u865A\u62DF\u8DEF\u7531\u5668\u4EA7\u54C1\uFF0C\u56E0\u4E3A\u7BA1\u7406\u7F51\u7EDC\u5C1A\u4E0D\u652F\u6301IPv6

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:208
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
public\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = \u516C\u5171\u7F51\u7EDC[uuid:{0}]\u548C\u5C06\u8981\u521B\u5EFA\u7684\u89C4\u683C\u4E0D\u5904\u4E8E\u540C\u4E00\u4E2A\u533A\u57DF\uFF08zone\uFF09[uuid:{1}]\u4E2D

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:236
# args: msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ public\ network = \u4E09\u5C42\u7F51\u7EDC[uuid: {0}]\u542F\u7528\u4E86SNAT\u670D\u52A1\uFF0C\u65E0\u6CD5\u88AB\u7528\u4F5C\u516C\u5171\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:234
# args: msg.getManagementNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ management\ network = \u4E09\u5C42\u7F51\u7EDC[uuid: {0}]\u542F\u7528\u4E86SNAT\u670D\u52A1\uFF0C\u65E0\u6CD5\u88AB\u7528\u4F5C\u7BA1\u7406\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:243
# args: msg.getManagementNetworkUuid(),msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ is\ same\ network\ address\ with\ [uuid\:\ %s],\ it\ cannot\ be\ used\ for\ virtual\ router = \u4E09\u5C42\u7F51\u7EDC[uuid: {0}] \u548C \u7F51\u7EDC [uuid: {1}] \u5177\u6709\u76F8\u540C\u7684\u7F51\u7EDC\u5730\u5740\uFF0C\u65E0\u6CD5\u88AB\u7528\u4E8E\u4E91\u8DEF\u7531

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:253
# args: managementNetworkUuid
the\ management\ network[uuid\:%s]\ doesn't\ have\ any\ IP\ range = \u7BA1\u7406\u7F51\u7EDC[uuid:{0}]\u4E0D\u5305\u542B\u4EFB\u4F55\u7684IP\u8303\u56F4

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:274
# args: managementNetworkUuid,gateway
the\ management\ network[uuid\:%s,\ gateway\:%s]\ is\ not\ reachable = \u7BA1\u7406\u7F51\u7EDC[uuid:{0}, gateway:{1}]\u4E0D\u53EF\u62B5\u8FBE

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:103
# args: iso.getIsoPath(),vrSpec.getDestHost().getUuid(),vrSpec.getDestHost().getManagementIp(),iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ create\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = \u521B\u5EFA\u4E91\u8DEF\u7531\u5F15\u5BFC\u955C\u50CF\uFF08VirtualRouterBootstrapIso\uFF09[{0}]\u5931\u8D25\uFF0C\u8BE5\u64CD\u4F5C\u662F\u5728KVM\u7269\u7406\u673A[uuid:{1}, ip:{2}]\u4E0A\u4E3A\u4E91\u8DEF\u7531[uuid:{3}]\u6267\u884C\u7684\uFF0C\u539F\u56E0\u4E3A{4}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:136
# args: iso.getIsoPath(),hostUuid,iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ delete\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = \u5220\u9664\u4E91\u8DEF\u7531\u5F15\u5BFC\u955C\u50CF\uFF08VirtualRouterBootstrapIso\uFF09[{0}]\u5931\u8D25\uFF0C\u8BE5\u64CD\u4F5C\u662F\u5728KVM\u7269\u7406\u673A[uuid:{1}]\u4E0A\u4E3A\u4E91\u8DEF\u7531[uuid:{2}]\u6267\u884C\u7684\uFF0C\u539F\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:289
# args: 
cannot\ create\ virtual\ Router\ vm\ while\ virtual\ router\ network\ overlaps\ with\ private\ network\ in\ ip\  = \u5F53\u4E91\u8DEF\u7531\u89C4\u683C\u7684\u7F51\u7EDC\u548C\u79C1\u6709\u7F51\u7EDCIP\u8303\u56F4\u6709\u91CD\u53E0\u65F6\uFF0C\u65E0\u6CD5\u521B\u5EFA\u4E91\u8DEF\u7531\u8BBE\u5907

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:716
# args: offeringUuid
No\ virtual\ router\ instance\ offering\ with\ uuid\:%s\ is\ found = \u627E\u4E0D\u5230uuid\u4E3A{0}\u7684\u865A\u62DF\u8DEF\u7531\u5668\u5B9E\u4F8B\u4EA7\u54C1

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:720
# args: offeringUuid,resourceUuid
the\ network\ of\ virtual\ router\ instance\ offering\ with\ uuid\:%s\ can't\ be\ same\ with\ private\ l3\ network\ uuid\:%s = uuid\u4E3A{0}\u7684\u865A\u62DF\u8DEF\u7531\u5668\u5B9E\u4F8B\u63D0\u4F9B\u7684\u7F51\u7EDC\u4E0D\u80FD\u4E0Euuid\u4E3A{1}\u7684\u4E13\u7528\u4E09\u5C42\u7F51\u7EDC\u76F8\u540C

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1434
# args: l3NetworkUuid
cannot\ add\ ip\ range,\ because\ l3\ network[uuid\:%s]\ is\ management\ network\ of\ virtual\ router\ offering = \u65E0\u6CD5\u6DFB\u52A0IP\u8303\u56F4\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u662F\u865A\u62DF\u8DEF\u7531\u5668\u4EA7\u54C1\u7684\u7BA1\u7406\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1439
# args: l3NetworkUuid
cannot\ add\ ip\ range,\ because\ l3\ network[uuid\:%s]\ is\ management\ network\ of\ virtual\ router = \u65E0\u6CD5\u6DFB\u52A0IP\u8303\u56F4\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u662F\u865A\u62DF\u8DEF\u7531\u5668\u7684\u7BA1\u7406\u7F51\u7EDC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1466
# args: tag,type
couldn't\ add\ image,\ because\ systemTag\ [%s]\ includes\ invalid\ appliance\ image\ type\ [%s] = \u65E0\u6CD5\u6DFB\u52A0\u955C\u50CF\uFF0C\u56E0\u4E3A\u7CFB\u7EDF\u6807\u8BB0[{0}]\u5305\u542B\u65E0\u6548\u7684\u88C5\u7F6E\u955C\u50CF\u7C7B\u578B[{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1504
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ eip\ is\ selected,\ snat\ must\ be\ selected\ too = \u6302\u8F7D\u865A\u62DF\u8DEF\u7531\u7F51\u7EDC\u670D\u52A1\u5230\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u5931\u8D25\u3002\u9009\u4E2DEIP\u670D\u52A1\u65F6\uFF0CSNAT\u670D\u52A1\u4E5F\u5FC5\u987B\u88AB\u9009\u4E2D

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1508
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ port\ forwarding\ is\ selected,\ snat\ must\ be\ selected\ too = \u6302\u8F7D\u865A\u62DF\u8DEF\u7531\u7F51\u7EDC\u670D\u52A1\u5230\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u5931\u8D25\u3002\u9009\u4E2D\u7AEF\u53E3\u8F6C\u53D1\u670D\u52A1\u65F6\uFF0CSNAT\u670D\u52A1\u4E5F\u5FC5\u987B\u88AB\u9009\u4E2D

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:2445
# args: vrUuid,ret.getError()
update\ virtual\ router\ [uuid\:%s]\ default\ network\ failed,\ because\ %s = \u66F4\u65B0\u865A\u62DF\u8DEF\u7531\u5668[uuid\uFF1A{0}]\u9ED8\u8BA4\u7F51\u7EDC\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:2541
# args: ss[1]
invalid\ ApplianceVmType\ %s = \u65E0\u6548\u7684\u8BBE\u5907VMType{0}

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:93
# args: vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError(),JSONObjectUtil.toJsonString(info)
unable\ to\ add\ dhcp\ entries\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s,\ dhcp\ entry[%s] = \u65E0\u6CD5\u5411\u4E91\u8DEF\u7531[uuid:{0} ip:{1}]\u6DFB\u52A0DHCP\u6761\u76EE\uFF0C\u56E0\u4E3A{2}\uFF0CDHCP\u6761\u76EE\u4E3A[{3}]

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:375
# args: 
no\ virtual\ router\ is\ configured\ for\ vyos\ dhcp = \u6CA1\u6709\u4E3AVyOS DHCP\u914D\u7F6E\u865A\u62DF\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java:208
# args: vr.getUuid(),vr.getManagementNic().getIp(),ret.getError()
unable\ to\ program\ dhcp\ entries\ served\ by\ virtual\ router[uuid\:%s,\ ip\:%s],\ %s = \u65E0\u6CD5\u6267\u884C\u7531\u4E91\u8DEF\u7531[uuid:{0}, ip:{1}]\u63D0\u4F9B\u7684DHCP\u6761\u76EE{2}.

# at: src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterDnsBackend.java:210
# args: vr.getUuid(),vr.getManagementNic().getIp(),struct,l3.getUuid(),l3.getName(),ret.getError()
virtual\ router[uuid\:%s,\ ip\:%s]\ failed\ to\ configure\ dns%s\ for\ L3Network[uuid\:%s,\ name\:%s],\ %s = \u4E91\u8DEF\u7531[uuid:{0}, ip:{1}]\u672A\u80FD\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid:{3}, name:{4}]\u914D\u7F6EDNS{2}\uFF0C\u9519\u8BEF\u7EC6\u8282: {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java:127
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(dns),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ configure\ dns%s,\ %s\  = \u4E91\u8DEF\u7531[name: {0}, uuid: {1}]\u672A\u80FD\u914D\u7F6EDNS{2}\uFF0C\u9519\u8BEF\u7EC6\u8282: {3}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:168
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ create\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A\u7F51\u5361[uuid:{3}]\u5728\u4E91\u8DEF\u7531[uuid:{4}]\u4E0A\u521B\u5EFAEIP[uuid:{0}, name:{1}, ip:{2}]\uFF0C\u9519\u8BEF\u7EC6\u8282: {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:226
# args: offering.getUuid(),l3inv.getUuid(),l3inv.getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getEip().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ EIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = \u5728\u533A\u57DF\uFF08zone\uFF09[uuid:{2}]\u4E0A\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u627E\u5230\u4E86\u4E91\u8DEF\u7531\u89C4\u683C[uuid:{0}]\uFF1B\u4F46\u662F\uFF0C\u5176\u516C\u5171\u7F51\u7EDC[uuid:{3}]\u548CEIP[uuid:{4}]\u7684\u516C\u5171\u7F51\u7EDC\u4E0D\u662F\u540C\u4E00\u4E2A\u4E09\u5C42\u7F51\u7EDC\u3002\u4F60\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u7CFB\u7EDF\u6807\u7B7E[guestL3Network::l3NetworkUuid]\u4E3A\u8BE5\u4E09\u5C42\u7F51\u7EDC\u6307\u5B9A\u4E00\u4E2A\u7279\u5B9A\u7684\u4E91\u8DEF\u6709\u89C4\u683C

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:318
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ remove\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = \u672A\u80FD\u5728\u4E91\u8DEF\u7531[uuid:{4}]\u4E0A\u4E3A\u4E91\u4E3B\u673A\u7F51\u5361[uuid:{3}]\u79FB\u9664EIP[uuid:{0}, name:{1}, ip:{2}]\uFF0C\u9519\u8BEF\u7EC6\u8282: {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterSyncEipOnStartFlow.java:214
# args: vr.getUuid(),ret.getError()
failed\ to\ sync\ eip\ on\ virtual\ router[uuid\:%s],\ %s = \u672A\u80FD\u5728\u4E91\u8DEF\u7531[uuid:{0}]\u4E0A\u540C\u6B65EIP\uFF0C\u9519\u8BEF\u7EC6\u8282: {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/ha/VirtualRouterHaBackendImpl.java:63
# args: 
ha\ group\ extension\ point\ nil = HA\u7EC4\u6269\u5C55\u70B9Nil

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:170
# args: msg.getVmNicUuids(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ attached\ vmnics\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = \u65B0\u6DFB\u52A0\u7684\u865A\u62DF\u7F51\u5361[uuids:{0}]\u548C\u7ED1\u5B9A\u4E91\u4E3B\u673A\u7684\u7F51\u5361\u6CA1\u6709\u5728\u4E00\u4E2A\u4E91\u8DEF\u7531\u4E0A\uFF0C\u5B83\u4EEC\u5206\u522B\u5728\u4E91\u8DEF\u7531[uuids:{1}]\u4E0A

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:200
# args: msg.getVmNicUuids(),peerL3NetworkUuids,msg.getLoadBalancerUuid(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ peer\ l3s[uuids\:%s]\ of\ loadbalancer[uuid\:\ %s]'s\ vip\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = \u65B0\u6DFB\u52A0\u7684\u4E91\u4E3B\u673A\u7F51\u5361[uuids:{0}]\u548C\u8D1F\u8F7D\u5747\u8861\u5668[uuid: {2}]\u7684\u5F39\u6027IP\u7684\u4E09\u5C42\u7F51\u7EDC[uuids:{1}]\u6CA1\u6709\u5728\u76F8\u540C\u7684\u4E91\u8DEF\u7531\u4E0A\uFF0C\u5B83\u4EEC\u5206\u522B\u5728\u4E91\u8DEF\u7531[uuids:{3}]\u4E0A

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:1320
# args: 
vmnic\ must\ be\ specified\ for\ share\ loadbalancer = \u5FC5\u987B\u4E3AShare LoadBalancer\u6307\u5B9Avmnic

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:1778
# args: struct.getLb().getUuid()
cannot\ find\ virtual\ router\ for\ load\ balancer\ [uuid\:%s] = \u672A\u80FD\u4E3A\u8D1F\u8F7D\u5747\u8861\u5668[uuid:{0}]\u627E\u5230\u4E91\u8DEF\u7531

# at: src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java:91
# args: guestL3.getUuid(),guestL3.getName(),offering.getPublicNetworkUuid(),offering.getUuid(),offering.getName()
guest\ l3Network[uuid\:%s,\ name\:%s]\ needs\ SNAT\ service\ provided\ by\ virtual\ router,\ but\ public\ l3Network[uuid\:%s]\ of\ virtual\ router\ offering[uuid\:\ %s,\ name\:%s]\ is\ the\ same\ to\ this\ guest\ l3Network = \u7528\u6237\u4E09\u5C42\u7F51\u7EDC[uuid:{0}, name:{1}]\u9700\u8981\u4E91\u8DEF\u7531\u63D0\u4F9B\u7684SNAT\u670D\u52A1\uFF0C\u4F46\u662F\u4E91\u8DEF\u7531\u89C4\u683C[uuid: {3}, name:{4}]\u7684\u516C\u5171\u4E09\u5C42\u7F51\u7EDC[uuid:{2}]\u4E0E\u8BE5\u5BA2\u6237\u4E09\u5C42\u7F51\u7EDC\u76F8\u540C

# at: src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSyncSNATOnStartFlow.java:144
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(snatInfo),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ sync\ snat%s,\ %s = \u4E91\u8DEF\u7531[name: {0}, uuid: {1}]\u672A\u80FD\u540C\u6B65SNAT{2}\uFF0C\u9519\u8BEF\u7EC6\u8282: {3}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java:85
# args: to.getVipIp(),to.getPrivateIp(),to.getVipPortStart(),to.getVipPortEnd(),to.getPrivatePortStart(),to.getPrivatePortEnd(),ret.getError()
failed\ to\ create\ port\ forwarding\ rule[vip\ ip\:\ %s,\ private\ ip\:\ %s,\ vip\ start\ port\:\ %s,\ vip\ end\ port\:\ %s,\ private\ start\ port\:\ %s,\ private\ end\ port\:\ %s],\ because\ %s = \u65E0\u6CD5\u521B\u5EFA\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}]\uFF0C\u9519\u8BEF\u7EC6\u8282: {6}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java:82
# args: JSONObjectUtil.toJsonString(to),ret.getError()
failed\ to\ revoke\ port\ forwarding\ rules\ %s,\ because\ %s = \u672A\u80FD\u89E3\u9664\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219{0}\uFF0C\u539F\u56E0: {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:184
# args: offering.getUuid(),struct.getGuestL3Network().getUuid(),struct.getGuestL3Network().getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getRule().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ PortForwarding\ rule[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = \u5728\u533A\u57DF\uFF08zone\uFF09[uuid:{2}]\u5185\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u627E\u5230\u4E86\u4E00\u4E2A\u4E91\u8DEF\u7531\u89C4\u683C[uuid:{0}]\uFF1B\u7136\u800C\uFF0C\u5176\u7F51\u7EDC\u7684\u516C\u5171\u7F51\u7EDC[uuid:{3}]\u548C\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{4}]\u7684\u516C\u5171\u7F51\u7EDC\u4E0D\u4E00\u81F4\u3002\u4F60\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u7CFB\u7EDF\u6807\u7B7E[guestL3Network::l3NetworkUuid]\u4E3A\u8BE5\u4E09\u5C42\u7F51\u7EDC\u6307\u5B9A\u4E00\u4E2A\u7279\u5B9A\u7684\u4E91\u8DEF\u6709\u89C4\u683C

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:249
# args: rule.getVipPortStart(),rule.getVipPortEnd(),rule.getPrivatePortStart(),rule.getPrivatePortEnd()
virtual\ router\ doesn't\ support\ port\ forwarding\ range\ redirection,\ the\ vipPortStart\ must\ be\ equals\ to\ privatePortStart\ and\ vipPortEnd\ must\ be\ equals\ to\ privatePortEnd;but\ this\ rule\ rule\ has\ a\ mismatching\ range\:\ vip\ port[%s,\ %s],\ private\ port[%s,\ %s] = \u4E91\u8DEF\u7531\u4E0D\u652F\u6301\u8303\u56F4\u6027\u7684\u7AEF\u53E3\u8F6C\u53D1\u91CD\u5B9A\u5411\uFF0CvipPortStart\u548CprivatePortStart\u5FC5\u987B\u4E00\u81F4\uFF0CvipPortEnd\u548CprivatePortEnd\u5FC5\u987B\u4E00\u81F4\uFF0C\u4F46\u8FD9\u6761\u89C4\u5219\u6709\u4E2A\u4E0D\u5339\u914D\u7684\u8303\u56F4: vip\u7AEF\u53E3\u8303\u56F4[{0}, {1}]\uFF0C\u79C1\u6709\u7AEF\u53E3\u8303\u56F4[{2}, {3}]

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:408
# args: vrVO.getUuid(),ret.getError()
failed\ to\ add\ portforwardings\ on\ virtual\ router[uuid\:%s],\ %s = \u5728\u4E91\u8DEF\u7531[uuid:{0}]\u6DFB\u52A0\u7AEF\u53E3\u8F6C\u53D1\u5931\u8D25\uFF0C{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:484
# args: vrVO.getUuid(),ret.getError()
failed\ to\ revoke\ port\ forwardings\ on\ virtual\ router[uuid\:%s],\ %s = \u53D6\u6D88\u5728\u4E91\u8DEF\u7531[uuid:{0}]\u4E0A\u7AEF\u53E3\u8F6C\u53D1\u670D\u52A1\u5931\u8D25\uFF0C{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java:212
# args: vr.getName(),vr.getUuid(),ret.getError()
failed\ to\ sync\ port\ forwarding\ rules\ served\ by\ virtual\ router[name\:\ %s,\ uuid\:\ %s],\ because\ %s = \u672A\u80FD\u540C\u6B65\u7531\u4E91\u8DEF\u7531[name: {0}, uuid: {1}]\u63D0\u4F9B\u7684\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219\uFF0C\u56E0\u4E3A: {2}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:179
# args: tos,ret.getError()
failed\ to\ remove\ vip%s,\ because\ %s = \u672A\u80FD\u79FB\u9664VIP{0}\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:125
# args: tos,vr.getUuid(),ret.getError()
failed\ to\ create\ vip%s\ on\ virtual\ router[uuid\:%s],\ because\ %s = \u672A\u80FD\u5728\u4E91\u8DEF\u7531[uuid:{1}]\u4E0A\u521B\u5EFAVIP{0}\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:245
# args: vips.stream().map(VipTO::getIp).collect(Collectors.toList()),nic.getVmInstanceUuid(),nic.getUuid(),nic.getIp(),ret.getError()
failed\ to\ sync\ vips[ips\:\ %s]\ on\ virtual\ router[uuid\:%s]\ for\ attaching\ nic[uuid\:\ %s,\ ip\:\ %s],\ because\ %s = \u4E3A\u4E86\u7ED1\u5B9A\u7F51\u5361[uuid: {2}, ip: {3}]\u5728\u4E91\u8DEF\u7531[uuid:{1}]\u4E0A\u540C\u6B65\u865A\u62DFIP[ips: {0}]\u5931\u8D25\uFF0C\u56E0\u4E3A{4}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:240
# args: vrUuid,vrState
virtual\ router[uuid\:%s,\ state\:%s]\ is\ not\ running = \u4E91\u8DEF\u7531[uuid:{0}, state:{1}]\u6CA1\u6709\u8FD0\u884C

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:281
# args: offering.getUuid(),s.getL3Network().getUuid(),s.getL3Network().getZoneUuid(),self.getL3NetworkUuid(),self.getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ VIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = \u5728\u533A\u57DF\uFF08zone\uFF09[uuid:{2}]\u5185\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u627E\u5230\u4E86\u4E00\u4E2A\u4E91\u8DEF\u7531\u89C4\u683C[uuid:{0}]\uFF1B\u7136\u800C\uFF0C\u5176\u7F51\u7EDC\u7684\u516C\u5171\u7F51\u7EDC[uuid:{3}]\u548CVIP[uuid:{4}]\u7684\u516C\u5171\u7F51\u7EDC\u4E0D\u4E00\u81F4\u3002\u4F60\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u7CFB\u7EDF\u6807\u7B7E[guestL3Network::l3NetworkUuid]\u4E3A\u8BE5\u4E09\u5C42\u7F51\u7EDC\u6307\u5B9A\u4E00\u4E2A\u7279\u5B9A\u7684\u4E91\u8DEF\u6709\u89C4\u683C

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosChangePrivateL3FirewallDefaultActionExtensionPoint.java:67
# args: nic.getIp(),nic.getMac(),nic.getVmInstanceUuid(),rsp.getError()
failed\ to\ change\ nic[ip\:%s,\ mac\:%s]\ firewall\ default\ action\ of\ virtual\ router\ vm[uuid\:%s],\ because\ %s = \u4FEE\u6539\u4E91\u8DEF\u7531[uuid:{2}]\u7684\u7F51\u5361[ip:{0}, mac:{1}]\u7684\u9ED8\u8BA4\u9632\u706B\u5899\u89C4\u5219\u5931\u8D25\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConfigSshFlow.java:156
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ virtual\ router[%s]\ after\ configure\ ssh = \u914D\u7F6ESSH\u540E\uFF0C\u65E0\u6CD5\u901A\u8FC7SSH\u8FDE\u63A5\u5230\u865A\u62DF\u8DEF\u7531\u5668[{0}]

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConnectFlow.java:214
# args: ret.getError()
vyos\ init\ command\ failed,\ because\:%s = vyos init\u547D\u4EE4\u5931\u8D25\uFF0C\u539F\u56E0\u662F\uFF1A{0}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java:246
# args: nic.getVmInstanceUuid(),rsp.getError()
unable\ to\ start\ dhcp\ server\ on\ virtual\ router\ vm[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5728\u865A\u62DF\u8DEF\u7531\u5668VM[uuid\uFF1A{0}]\u4E0A\u542F\u52A8DHCP\u670D\u52A1\u5668\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java:282
# args: nic.getVmInstanceUuid(),rsp.getError()
unable\ to\ stop\ dhcp\ server\ on\ virtual\ router\ vm[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u505C\u6B62\u865A\u62DF\u8DEF\u7531\u5668VM[uuid\uFF1A{0}]\u4E0A\u7684DHCP\u670D\u52A1\u5668\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:104
# args: id
File\ reference\ not\ fount\ for\ disk\ %s = \u627E\u4E0D\u5230\u78C1\u76D8{0}\u7684\u6587\u4EF6\u5F15\u7528

# at: src/main/java/org/zstack/ovf/OvfHelper.java:117
# args: capacity
Illegal\ disk\ capacity\:\ %s = \u975E\u6CD5\u78C1\u76D8\u5BB9\u91CF\uFF1A{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:127
# args: pSize
Illegal\ disk\ populated\ size\:\ %s = \u975E\u6CD5\u7684\u78C1\u76D8\u586B\u5145\u5927\u5C0F\uFF1A{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:288
# args: 
Volume\ controller\ not\ found. = \u672A\u627E\u5230\u5377\u63A7\u5236\u5668\u3002

# at: src/main/java/org/zstack/ovf/OvfHelper.java:320
# args: 
CD\ Driver\ controller\ not\ found. = \u627E\u4E0D\u5230\u5149\u9A71\u63A7\u5236\u5668\u3002

# at: src/main/java/org/zstack/ovf/OvfHelper.java:368
# args: name
Ethernet\ Adapter\:\ %s\ do\ not\ connect\ to\ a\ network. = \u4EE5\u592A\u7F51\u9002\u914D\u5668\uFF1A{0}\u4E0D\u8981\u8FDE\u63A5\u5230\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/ovf/OvfHelper.java:380
# args: 
Memory\ 'InstanceID'\ not\ found = \u672A\u627E\u5230\u5185\u5B58\u201C instanceId \u201D

# at: src/main/java/org/zstack/ovf/OvfHelper.java:387
# args: 
Memory\ 'VirtualQuantity'\ not\ found = \u672A\u627E\u5230\u5185\u5B58\u201C virtualQuantity \u201D

# at: src/main/java/org/zstack/ovf/OvfHelper.java:392
# args: quantity
Illegal\ Memory\ 'VirtualQuantity'\ value\:\ %s = \u975E\u6CD5\u5185\u5B58\u201C virtualQuantity \u201D\u503C\uFF1A{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:401
# args: 
CPU\ 'InstanceID'\ not\ found = \u672A\u627E\u5230CPU \u201C instanceId \u201D

# at: src/main/java/org/zstack/ovf/OvfHelper.java:407
# args: 
CPU\ 'VirtualQuantity'\ not\ found = \u672A\u627E\u5230CPU ' virtualQuantity '

# at: src/main/java/org/zstack/ovf/OvfHelper.java:412
# args: quantity
Illegal\ CPU\ 'VirtualQuantity'\ value\:\ %s = \u975E\u6CD5\u7684CPU \u201C VirtualQuantity \u201D\u503C\uFF1A{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:422
# args: cps
Illegal\ CPU\ 'CoresPerSocket'\ value\:\ %s = \u975E\u6CD5\u7684CPU \u201C CoreSperSocket \u201D\u503C\uFF1A{0}

# at: src/main/java/org/zstack/ovf/OvfImageUploadTracker.java:156
# args: failLongJobUuids
long\ job[uuid\:%s]\ execute\ fail = \u957F\u4F5C\u4E1A[uuid\uFF1A{0}]\u6267\u884C\u5931\u8D25

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:69
# args: msg.getVmUuid(),ovaUuid
Vm[uuid\:\ %s]\ is\ already\ exported\ as\ the\ ova\ package[uuid\:\ %s],\ please\ delete\ the\ package\ and\ try\ again. = VM[uuid\uFF1A{0}]\u5DF2\u4F5C\u4E3AOVA\u7A0B\u5E8F\u5305[uuid\uFF1A{1}]\u5BFC\u51FA\uFF0C\u8BF7\u5220\u9664\u8BE5\u7A0B\u5E8F\u5305\uFF0C\u7136\u540E\u91CD\u8BD5\u3002

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:77
# args: msg.getBackupStorageUuid()
Export\ vm\ requires\ an\ ImageStore\ backup\ storage,\ but\ given\ backupStorageUuid\:\ %s\ is\ not\ an\ ImageStore\ backup\ storage. = \u5BFC\u51FAVM\u9700\u8981ImageStore\u5907\u4EFD\u5B58\u50A8\uFF0C\u4F46\u7ED9\u5B9A\u7684BackupStorageUuid{0}\u4E0D\u662FImageStore\u5907\u4EFD\u5B58\u50A8\u3002

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:84
# args: msg.getVmUuid()
Not\ found\ the\ vm\ to\ be\ exported\ with\ the\ uuid\:\ %s = \u672A\u627E\u5230uuid\u4E3A{0}\u7684\u8981\u5BFC\u51FA\u7684VM

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:89
# args: VmInstanceState.Stopped.toString()
Only\ vm\ in\ state\:\ %s\ can\ be\ exported. = \u53EA\u80FD\u5BFC\u51FA\u72B6\u6001\u4E3A{0}\u7684\u4E91\u4E3B\u673A\u3002

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:114
# args: 
failed\ to\ parse\ jsonCreateVmParam\ in\ APICreateVmInstanceFromOvfMsg = \u65E0\u6CD5\u5206\u6790APICreateVmInstanceFromOvFMsg\u4E2D\u7684JsonCreateVmParam

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:229
# args: msg.getBackupStorageUuid(),msg.getVmUuid(),totalSize
backup\ storage[uuid\:\ %s]\ does\ not\ have\ enough\ available\ capacity\ for\ exporting\ vm[uuid\:\ %s],\ required\ capacity\ is\:\ %d = \u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u6CA1\u6709\u8DB3\u591F\u7684\u53EF\u7528\u5BB9\u91CF\u6765\u5BFC\u51FA\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\uFF0C\u6240\u9700\u5BB9\u91CF\u4E3A\uFF1A{2}

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:629
# args: msg.getUuid()
ova\ package[uuid\:\ %s]\ not\ found. = \u672A\u627E\u5230OVA\u7A0B\u5E8F\u5305[uuid\uFF1A{0}]\u3002

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:757
# args: 
Failed\ to\ read\ ovf\ file. = \u65E0\u6CD5\u8BFB\u53D6OVF\u6587\u4EF6\u3002

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:1028
# args: 
failed\ to\ create\ VM\ from\ OVF\ because\ the\ root\ disk\ of\ the\ VM\ cannot\ be\ found = \u65E0\u6CD5\u4ECEOVF\u521B\u5EFAVM\uFF0C\u56E0\u4E3A\u627E\u4E0D\u5230VM\u7684\u6839\u78C1\u76D8

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:417
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ doesn't\ exist = PCI\u8BBE\u5907[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:422
# args: pci.getHostUuid()
could\ not\ enable\ sriov\ for\ device\ because\ iommu\ is\ disabled\ on\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u8BBE\u5907\u542F\u7528SRIOV\uFF0C\u56E0\u4E3A\u5DF2\u5728\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u7981\u7528IOMMU

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:468
# args: pci.getHostUuid()
pci\ devices\ in\ host[uuid\:%s]\ already\ sriov\ virtualized = \u7269\u7406\u673A[uuid:{0}]\u4E0A\u7684PCI\u8BBE\u5907\u5DF2\u7ECFSRIOV\u865A\u62DF\u5316\uFF0C\u65E0\u6CD5\u518D\u6B21\u5207\u5206

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:473
# args: pci.getHostUuid()
cannot\ sr-iov\ virtualize\ pci\ devices\ in\ host[uuid\:%s]\ that\ are\ attached\ to\ vm = \u7269\u7406\u673A[uuid:{0}]\u4E0A\u7684PCI\u8BBE\u5907\u5DF2\u7ECF\u6302\u8F7D\u5230\u4E91\u4E3B\u673A\uFF0C\u65E0\u6CD5SRIOV\u865A\u62DF\u5316

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:487
# args: minIns,pci.getType(),pci.getHostUuid()
only\ %d\ virtual\ pci\ devices\ can\ be\ generated\ by\ %ss\ in\ host[uuid\:%s] = \u7269\u7406\u673A[uuid:{2}]\u4E0A\u7684{1}\u7C7B\u578BPCI\u8BBE\u5907\u6700\u591A\u88AB\u5207\u5206\u51FA{0}\u4E2A\u865A\u62DFPCI\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:609
# args: pci.getHostUuid(),pci.getUuid()
the\ host[uuid\:%s]\ that\ pci\ device[uuid\:%s]\ in\ is\ not\ Connected = PCI\u8BBE\u5907[uuid:{1}]\u6240\u5728\u7269\u7406\u673A[uuid:{0}]\u5DF2\u5931\u8054

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:505
# args: interfaceVO.getUuid()
cannot\ sr-iov\ virtualize\ pci\ devices\ on\ interface[uuid\:%s]\ that\ are\ been\ bonded = SR-IOV\u65E0\u6CD5\u865A\u62DF\u5316\u5DF2\u7ED1\u5B9A\u7684\u63A5\u53E3[uuid\uFF1A{0}]\u4E0A\u7684PCI\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:513
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ not\ sriov\ virtualized = PCI\u8BBE\u5907[uuid:{0}]\u4E0D\u5B58\u5728\uFF0C\u6216\u8005\u672A\u5904\u4E8ESRIOV\u865A\u62DF\u5316\u72B6\u6001

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:528
# args: pci.getHostUuid()
virtual\ pci\ devices\ generated\ from\ pci\ devices\ in\ host[uuid\:%s]\ still\ attached\ to\ vm = \u7269\u7406\u673A[uuid:{0}]\u4E0A\u5B58\u5728\u4ECD\u5904\u4E8E\u5DF2\u6302\u8F7D\u72B6\u6001\u7684\u865A\u62DFPCI\u8BBE\u5907\uFF0C\u65E0\u6CD5\u6267\u884C\u865A\u62DF\u5316\u8FD8\u539F\u64CD\u4F5C

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:550
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ cannot\ be\ virtualized\ into\ mdevs,\ make\ sure\ it's\ enabled\ and\ un-attached = PCI\u8BBE\u5907[uuid:{0}]\u65E0\u6CD5\u88AB\u5207\u5206\u4E3AMDEV\u8BBE\u5907\uFF0C\u8BF7\u786E\u4FDD\u5B83\u5904\u4E8E\u542F\u7528\u72B6\u6001\uFF0C\u5E76\u4E14\u6CA1\u6709\u6302\u8F7D\u5230\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:561
# args: msg.getPciDeviceUuid(),msg.getMdevSpecUuid()
pci\ device[uuid\:%s]\ cannot\ be\ virtualized\ by\ mdev\ spec[uuid\:%s] = PCI\u8BBE\u5907[uuid:{0}]\u65E0\u6CD5\u4F7F\u7528MDEV\u8BBE\u5907\u89C4\u683C[uuid:{1}]\u8FDB\u884C\u865A\u62DF\u5316\u5207\u5206

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:583
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ is\ not\ virtualized\ into\ mdevs = PCI\u8BBE\u5907[uuid:{0}]\u672A\u5904\u4E8EVFIO_MDEV\u865A\u62DF\u5316\u72B6\u6001

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:600
# args: msg.getPciDeviceUuid()
mdev\ devices\ generated\ from\ pci\ device[uuid\:%s]\ still\ attached\ to\ vm = PCI\u8BBE\u5907[uuid:{0}]\u5207\u5206\u51FA\u7684MDEV\u8BBE\u5907\u4ECD\u5904\u4E8E\u5DF2\u6302\u8F7D\u72B6\u6001\uFF0C\u65E0\u6CD5\u6267\u884C\u865A\u62DF\u5316\u8FD8\u539F\u64CD\u4F5C

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:624
# args: VmInstanceUuid
please\ umount\ all\ GPU\ devices\ of\ the\ vm[%s]\ and\ try\ again = \u8BF7\u5378\u8F7D\u4E91\u4E3B\u673A[{0}]\u7684\u6240\u6709GPU\u8BBE\u5907\uFF0C\u7136\u540E\u91CD\u8BD5

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:628
# args: VmInstanceUuid
please\ umount\ all\ vGPU\ devices\ of\ the\ vm[%s]\ and\ try\ again = \u8BF7\u5378\u8F7D\u4E91\u4E3B\u673A[{0}]\u7684\u6240\u6709vGPU\u8BBE\u5907\uFF0C\u7136\u540E\u91CD\u8BD5

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:635
# args: VmInstanceUuid
please\ umount\ other\ pci\ devices\ of\ the\ vm[%s]\ and\ try\ again = \u8BF7\u5378\u8F7DVM[{0}]\u7684\u5176\u4ED6PCI\u8BBE\u5907\uFF0C\u7136\u540E\u91CD\u8BD5

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:59
# args: vo.getUuid(),vo.getHostUuid(),attachedPciUuid,dstHostUuid
specified\ pci\ devices\ not\ on\ same\ host\:\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s]\ while\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s] = \u4E91\u4E3B\u673A\u8BD5\u56FE\u6302\u8F7D\u6765\u81EA\u4E0D\u540C\u7269\u7406\u673A\u7684PCI\u8BBE\u5907\uFF1A\u8BBE\u5907[uuid: {0}]\u6765\u81EA\u7269\u7406\u673A[uuid: {1}]\uFF0C\u800C\u8BBE\u5907[uuid: {2}]\u6765\u81EA\u7269\u7406\u673A[uuid: {3}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:92
# args: 
no\ candidate\ host\ with\ enough\ pci\ devices = \u6CA1\u6709\u5177\u6709\u8DB3\u591FPCI\u8BBE\u5907\u7684\u5019\u9009\u7269\u7406\u673A

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:123
# args: vmUuid,specMap.keySet()
failed\ to\ start\ vm[uuid\:%s]\ because\ not\ all\ pci\ specs[uuids\:%s]\ exist = \u4E91\u4E3B\u673A[uuid:{0}]\u542F\u52A8\u5931\u8D25\uFF0C\u56E0\u4E3A\u6240\u8BBE\u7F6E\u7684PCI\u8BBE\u5907\u89C4\u683C[uuids:{1}]\u4E2D\u6709\u90E8\u5206\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1319
# args: vo.getType(),PciDeviceType.leagalPciDeviceCandidateTypes
illegal\ type[%s]\ for\ pci\ device,\ only\ %s\ are\ legal = PCI\u8BBE\u5907\u7684\u7C7B\u578B[{0}]\u975E\u6CD5\uFF0C\u53EA\u6709{1}\u662F\u5408\u6CD5\u7684

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:719
# args: specUuid,hostUuid,vmUuid
failed\ to\ find\ enough\ pci\ device\ of\ spec[uuid\:%s]\ in\ dest\ host[uuid\:%s]\ for\ vm[uuid\:%s] = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid:{1}]\u4E0A\u4E3A\u4E91\u4E3B\u673A[uuid:{2}]\u627E\u5230\u8DB3\u591F\u591A\u6EE1\u8DB3\u89C4\u683C[uuid:{0}]\u7684PCI\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:782
# args: pciUuid
something\ wrong\ with\ iommu\ group\ of\ pci\ device[uuid\:%s] = PCI\u8BBE\u5907[uuid\uFF1A{0}]\u7684IOMMU\u7EC4\u51FA\u73B0\u95EE\u9898

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:795
# args: pciUuids
pci\ devices\ [%s]\ are\ not\ all\ available = PCI\u8BBE\u5907[{0}]\u5E76\u975E\u5168\u90E8\u53EF\u7528

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:928
# args: msg.getPciDeviceUuid(),msg.getVmInstanceUuid()
can\ not\ attach\ this\ pci\ device[uuid\:%s]\ to\ vm[uuid\:%s]\ due\ to\ host\ allocation = \u7531\u4E8E\u7269\u7406\u673A\u5206\u914D\u95EE\u9898\u5BFC\u81F4\u4E0D\u80FD\u5C06PCI\u8BBE\u5907[uuid:{0}]\u7ED1\u5B9A\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1221
# args: msg.getVmInstanceUuid()
can\ not\ migrate\ vm[uuid\:%s]\ since\ pci\ device\ attached = \u5F53PCI\u8BBE\u5907\u7ED1\u5B9A\u540E\u4E0D\u80FD\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1270
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = \u4E0D\u80FD\u8FC1\u79FB\u4E91\u76D8[uuid:{0}]\uFF0C\u56E0\u4E3A\u5B83\u6240\u5728\u7684\u4E91\u4E3B\u673A\u6302\u8F7D\u4E86PCI\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1316
# args: pciDeviceUuid
pci\ device[uuid\:%s]\ doesn't\ exists = PCI\u8BBE\u5907[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1330
# args: pciSpecUuid
pci\ device\ spec[uuid\:%s]\ doesn't\ exists = PCI\u8BBE\u5907\u89C4\u8303[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1511
# args: pciUuid,vmUuid
pci\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled\ for\ vm[uuid\:%s] = PCI\u8BBE\u5907[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\u6216\u5DF2\u4E3A\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\u7981\u7528

# at: src/main/java/org/zstack/pciDevice/PciDeviceReserveFlow.java:161
# args: wrongStatusPciUuids,vmUuid
pci\ device[uuid\:%s]\ can\ not\ attach\ to\ vm[uuid\:%s]\ due\ to\ wrong\ status = \u7531\u4E8E\u72B6\u6001\u9519\u8BEF\uFF0CPCI\u8BBE\u5907[uuid\uFF1A{0}]\u65E0\u6CD5\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/pciDevice/PciHostChangeStateExtension.java:69
# args: inventory.getUuid(),hasPciVmUuids.toString()
The\ host\ [%s]\ has\ failed\ to\ enter\ the\ maintenance,\ The\ vm\ [%s]\ cannot\ migrate\ automatically\ because\ it\ contains\ the\ PCI\ device = \u7269\u7406\u673A[{0}]\u8FDB\u5165\u7EF4\u62A4\u72B6\u6001\u5931\u8D25\uFF0C\u8FD9\u4E2A\u4E91\u4E3B\u673A[{1}]\u4E0D\u80FD\u81EA\u52A8\u8FC1\u79FB\uFF0C\u56E0\u4E3A\u4E91\u4E3B\u673A\u5305\u542B\u4E86PCI\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:185
# args: vo.getType(),PciDeviceType.leagalPciDeviceCandidateTypes
illegal\ type[%s]\ for\ pci\ device\ spec,\ only\ %s\ are\ legal = PCI\u8BBE\u5907\u89C4\u8303\u7684\u7C7B\u578B[{0}]\u975E\u6CD5\uFF0C\u53EA\u6709{1}\u5408\u6CD5

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:258
# args: vmUuid,state
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ set\ pci\ device\ spec = \u4E91\u4E3B\u673A[uuid:{0}, state:{1}]\u9700\u8981\u5904\u4E8E\u5173\u673A\u72B6\u6001\u4E0B\u624D\u53EF\u4EE5\u8BBE\u7F6EPCI\u8BBE\u5907\u89C4\u683C

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:169
# args: msg.getVmInstanceUuid(),msg.getPciSpecUuid()
vm[uuid\:%s]\ already\ has\ pci\ device\ spec[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u8BBE\u7F6E\u8FC7\u4E86PCI\u8BBE\u5907\u89C4\u683C[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:197
# args: msg.getVmInstanceUuid(),msg.getPciSpecUuid()
vm[uuid\:%s]\ doesn't\ have\ pci\ device\ spec[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u672A\u8BBE\u7F6EPCI\u8BBE\u5907\u89C4\u683C[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:204
# args: vm.getUuid(),vm.getState(),msg.getPciSpecUuid()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ remove\ pci\ device\ spec[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}], state:{1}\u9700\u8981\u5904\u4E8E\u5173\u673A\u72B6\u6001\u4E0B\u624D\u53EF\u4EE5\u53D6\u6D88PCI\u8BBE\u5907\u89C4\u683C[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:285
# args: msg.getVmInstanceUuid(),msg.getMdevSpecUuid()
vm[uuid\:%s]\ already\ has\ mdev\ device\ spec[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u8BBE\u7F6E\u8FC7\u4E86MDEV\u8BBE\u5907\u89C4\u683C[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:293
# args: vm.getUuid(),vm.getState()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ set\ mdev\ device\ spec = \u4E91\u4E3B\u673A[uuid:{0}, state:{1}]\u9700\u8981\u5904\u4E8E\u5173\u673A\u72B6\u6001\u4E0B\u624D\u53EF\u4EE5\u8BBE\u7F6EMDEV\u8BBE\u5907\u89C4\u683C

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:306
# args: msg.getVmInstanceUuid(),msg.getMdevSpecUuid()
vm[uuid\:%s]\ doesn't\ have\ mdev\ device\ spec[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u672A\u8BBE\u7F6E\u8FC7MDEV\u8BBE\u5907\u89C4\u683C[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:313
# args: vm.getUuid(),vm.getState(),msg.getMdevSpecUuid()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ remove\ mdev\ device\ spec[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}, state:{1}]\u9700\u8981\u5904\u4E8E\u5173\u673A\u72B6\u6001\u4E0B\u624D\u53EF\u4EE5\u53D6\u6D88MDEV\u8BBE\u5907\u89C4\u683C[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:374
# args: msg.getPciSpecUuid(),msg.getVmInstanceUuid()
pci\ device\ spec[uuid\:%s]\ is\ not\ available\ for\ vm[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{1}]\u65E0\u6CD5\u8BBE\u7F6EPCI\u8BBE\u5907\u89C4\u683C[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:372
# args: msg.getVmInstanceUuid()
no\ pci\ device\ spec\ available\ for\ vm[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u65E0\u53EF\u7528\u7684PCI\u8BBE\u5907\u89C4\u683C

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:367
# args: msg.getVmInstanceUuid(),rly.getError()
failed\ to\ get\ pci\ device\ spec\ available\ for\ vm[uuid\:%s]\:\ %s = \u65E0\u6CD5\u83B7\u53D6\u53EF\u7528\u4E8EVM[uuid\uFF1A{0}]\u7684PCI\u8BBE\u5907\u89C4\u8303\uFF1A{1}

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:557
# args: msg.getMdevSpecUuid(),msg.getVmInstanceUuid()
mdev\ device\ spec[uuid\:%s]\ is\ not\ available\ for\ vm[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{1}]\u65E0\u6CD5\u8BBE\u7F6EMDEV\u8BBE\u5907\u89C4\u683C[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:550
# args: msg.getVmInstanceUuid()
no\ mdev\ device\ spec\ available\ for\ vm[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u65E0\u53EF\u7528\u7684MDEV\u8BBE\u5907\u89C4\u683C

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:751
# args: specUuid,systemTag
pci\ device\ spec[uuid\:%s]\ doesn't\ exist = PCI\u8BBE\u5907\u89C4\u683C[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:764
# args: specUuid,systemTag
mdev\ device\ spec[uuid\:%s]\ doesn't\ exist = MDEV\u8BBE\u5907\u89C4\u683C[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:191
# args: 
cluster\ uuids\ or\ host\ uuid\ or\ vm\ uuid\ can\ not\ be\ set\ at\ same\ time = \u83B7\u53D6\u5019\u9009\u89C4\u683C\u5217\u8868\u65F6\u4E0D\u8981\u540C\u65F6\u6307\u5B9A\u96C6\u7FA4uuids\u3001\u7269\u7406\u673Auuid\u6216\u4E91\u4E3B\u673Auuid

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:198
# args: 
clusters\ not\ exist\ or\ disabled = \u96C6\u7FA4\u4E0D\u5B58\u5728\u6216\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:232
# args: type,legalTypes
illegal\ mdev\ device\ type\ [%s],\ only\ %s\ are\ legal = \u975E\u6CD5\u7684MDEV\u8BBE\u5907\u7C7B\u578B[{0}]\uFF0C\u53EA\u6709{1}\u624D\u662F\u5408\u6CD5\u7684

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:69
# args: 
cannot\ change\ the\ state\ of\ mdev\ device\ that's\ in\ attached\ status = MDEV\u8BBE\u5907\u5904\u4E8E\u5DF2\u6302\u8F7D\u72B6\u6001\uFF0C\u65E0\u6CD5\u4FEE\u6539\u5176\u72B6\u6001

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:77
# args: msg.getMdevDeviceUuid()
cannot\ attach\ mdev\ device[uuid\:%s]\ to\ vm,\ make\ sure\ it's\ enabled\ and\ un-attached = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A\u6302\u8F7DMDEV\u8BBE\u5907[uuid:{0}]\uFF0C\u56E0\u4E3A\u8BE5\u8BBE\u5907\u5904\u4E8E\u7981\u7528\u72B6\u6001\u6216\u5DF2\u88AB\u6302\u8F7D

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:220
# args: 
cannot\ attach\ mdev\ device\ to\ vm\ instance\ that's\ not\ stopped = \u4E91\u4E3B\u673A\u9700\u8981\u5904\u4E8E\u5173\u673A\u72B6\u6001\u4E0B\u624D\u53EF\u4EE5\u6302\u8F7DMDEV\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:103
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ has\ pci\ devices\ attached\ that\ are\ in\ different\ host\ with\ mdev\ device[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u4E86PCI\u8BBE\u5907\uFF0C\u5E76\u4E14\u5B83\u4EEC\u548CMDEV\u8BBE\u5907[uuid:{1}]\u4E0D\u5728\u540C\u4E00\u53F0\u7269\u7406\u673A\u4E0A

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:113
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ has\ mdev\ devices\ attached\ that\ are\ in\ different\ host\ with\ mdev\ device[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u4E86MDEV\u8BBE\u5907\uFF0C\u5E76\u4E14\u5B83\u4EEC\u548CMDEV\u8BBE\u5907[uuid:{1}]\u4E0D\u5728\u540C\u4E00\u53F0\u7269\u7406\u673A\u4E0A

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:168
# args: mdev.getHostUuid(),mdev.getUuid(),HostState.Enabled,HostStatus.Connected
the\ host[uuid\:%s]\ that\ holds\ mdev\ device[uuid\:%s]\ is\ not\ [%s]\ and\ [%s] = \u62E5\u6709MDEV\u8BBE\u5907[uuid\uFF1A{1}]\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0D\u662F[{2}]\u548C[{3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:132
# args: msg.getVmInstanceUuid(),mdev.getUuid()
the\ vm[uuid\:%s]\ that\ holds\ se\ mdev\ device\ can\ not\ attach\ more\ se\ mdev[%s] = \u62E5\u6709SE MDEV\u8BBE\u5907\u7684VM[uuid\uFF1A{0}]\u65E0\u6CD5\u9644\u52A0\u66F4\u591ASE MDEV[{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:143
# args: mdev.getHostUuid(),mdev.getUuid(),HostState.Enabled,HostStatus.Connected
IOMMU\ of\ the\ host[uuid\:%s]\ that\ hosts\ pci\ device[uuid\:%s]\ is\ not\ [%s]\ and\ [%s] = \u6258\u7BA1PCI\u8BBE\u5907[uuid\uFF1A{1}]\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]\u7684IOMMU\u4E0D\u662F[{2}]\u548C[{3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:156
# args: msg.getMdevDeviceUuid(),msg.getVmInstanceUuid()
mdev\ device\ [uuid\:%s]\ is\ not\ attached\ to\ vm[uuid\:%s] = MDEV\u8BBE\u5907[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:181
# args: 
cannot\ detach\ mdev\ device\ from\ vm\ instance\ when\ it's\ not\ stopped = \u4E91\u4E3B\u673A\u9700\u8981\u5904\u4E8E\u5173\u673A\u72B6\u6001\u4E0B\u624D\u53EF\u4EE5\u5378\u8F7DMDEV\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:245
# args: 
cannot\ delete\ mdev\ device\ when\ it's\ attached = \u65E0\u6CD5\u5220\u9664\u5DF2\u8FDE\u63A5\u7684MDEV\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:379
# args: msg.getVmInstanceUuid(),reply.getError()
failed\ to\ get\ candidate\ hosts\ to\ start\ vm[uuid\:%s],\ %s = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u5BFB\u627E\u5230\u53EF\u542F\u52A8\u7684\u7269\u7406\u673A\uFF1A{1}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:100
# args: mdevUuid
mdev\ device\ [%s]\ is\ not\ available = MDEV\u8BBE\u5907[{0}]\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:217
# args: rsp.getError()
failed\ to\ hot\ plug\ mdev\ device\ to\ running\ vm,\ because\:%s = \u65E0\u6CD5\u5C06MDEV\u8BBE\u5907\u70ED\u63D2\u62D4\u5230\u6B63\u5728\u8FD0\u884C\u7684\u4E91\u4E3B\u673A\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:278
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ cannot\ start\ in\ host\ that\ hold\ mdev\ device[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u65E0\u6CD5\u5728MDEV\u8BBE\u5907[uuid:{1}]\u6240\u5728\u7684\u7269\u7406\u673A\u4E0A\u542F\u52A8

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:353
# args: rsp.getError()
failed\ to\ hot\ unplug\ mdev\ device\ to\ running\ vm,\ because\:%s = \u65E0\u6CD5\u5C06MDEV\u8BBE\u5907\u70ED\u62D4\u51FA\u5230\u6B63\u5728\u8FD0\u884C\u7684\u4E91\u4E3B\u673A\uFF0C\u539F\u56E0\u662F\uFF1A{0}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFactory.java:68
# args: pciDevice.getUuid(),PciDeviceVirtStatus.VFIO_MDEV_VIRTUALIZED
pci\ device[uuid\:%s]\ is\ known\ as\ %s,\ but\ cannot\ find\ it's\ mdev\ spec,\ so\ abort. = PCI\u8BBE\u5907[uuid:{0}]\u662F{1}\uFF0C\u4F46\u65E0\u6CD5\u627E\u5230\u53EF\u7528\u7684MDEV\u8BBE\u5907\u89C4\u683C

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:48
# args: vmUuid,specMap.keySet()
failed\ to\ start\ vm[uuid\:%s]\ because\ not\ all\ mdev\ specs[uuids\:%s]\ exist = \u4E91\u4E3B\u673A[uuid:{0}]\u542F\u52A8\u5931\u8D25\uFF0C\u7531\u4E8E\u6240\u8BBE\u7F6E\u7684MDEV\u8BBE\u5907\u89C4\u683C[uuids:{1}]\u4E2D\u6709\u90E8\u5206\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:145
# args: mdev.getUuid(),mdev.getHostUuid(),attachedMdevUuid,dstHostUuid
specified\ mdev\ devices\ not\ on\ same\ host\:\ mdev\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s]\ while\ mdev\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s] = \u4E91\u4E3B\u673A\u8BD5\u56FE\u6302\u8F7D\u6765\u81EA\u4E0D\u540C\u7269\u7406\u673A\u7684MDEV\u8BBE\u5907\uFF1A\u8BBE\u5907[uuid: {0}]\u6765\u81EA\u7269\u7406\u673A[uuid: {1}]\uFF0C\u800C\u8BBE\u5907[uuid: {2}]\u6765\u81EA\u7269\u7406\u673A[uuid: {3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:184
# args: 
no\ candidate\ host\ with\ enough\ mdev\ devices = \u6CA1\u6709\u7269\u7406\u673A\u6EE1\u8DB3mdev device\u8BBE\u5907\u7684\u6761\u4EF6

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceHostChangeStateExtension.java:55
# args: inventory.getUuid(),hasMdevVmUuids.toString()
The\ host\ [%s]\ has\ failed\ to\ enter\ the\ maintenance,\ because\ vm[%s]\ has\ mdev\ devices\ attached\ and\ cannot\ migrate\ automatically = \u7269\u7406\u673A[{0}]\u65E0\u6CD5\u8FDB\u5165\u7EF4\u62A4\u6A21\u5F0F\uFF0C\u56E0\u4E3A\u4E91\u4E3B\u673A[{1}]\u6302\u8F7D\u4E86MDEV\u8BBE\u5907\u5BFC\u81F4\u65E0\u6CD5\u8FC1\u79FB

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:308
# args: specUuid,hostUuid,vmUuid
failed\ to\ find\ enough\ mdev\ device\ of\ spec[uuid\:%s]\ in\ dest\ host[uuid\:%s]\ for\ vm[uuid\:%s] = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid:{1}]\u4E0A\u4E3A\u4E91\u4E3B\u673A[uuid:{2}]\u627E\u5230\u8DB3\u591F\u591A\u6EE1\u8DB3\u89C4\u683C[uuid:{0}]\u7684MDEV\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:352
# args: msg.getMdevDeviceUuid()
cannot\ find\ mdev\ device[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230MDEV\u8BBE\u5907[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:555
# args: vo.getUuid(),vmUuid
mdev\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled\ for\ vm[uuid\:%s] = MDEV\u8BBE\u5907[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\u6216\u5DF2\u4E3AVM[uuid\uFF1A{1}]\u7981\u7528

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:644
# args: msg.getVmInstanceUuid()
can\ not\ migrate\ vm[uuid\:%s]\ since\ mdev\ device\ attached = \u65E0\u6CD5\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{0}]\uFF0C\u56E0\u4E3A\u5B83\u6302\u8F7D\u4E86MDEV\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:673
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ mdev\ devices\ attached = \u65E0\u6CD5\u8FC1\u79FB\u8DDF\u4E91\u76D8[uuid:{0}]\uFF0C\u56E0\u4E3A\u5B83\u6240\u5728\u4E91\u4E3B\u673A\u6302\u8F7D\u4E86MDEV\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:688
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ mdev\ devices\ attached = \u65E0\u6CD5\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{0}]\uFF0C\u56E0\u4E3A\u5B83\u6302\u8F7D\u4E86MDEV\u8BBE\u5907

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceReserveFlow.java:129
# args: wrongStatusMdevUuids,vmUuid
mdev\ device[uuid\:%s]\ can\ not\ attach\ to\ vm[uuid\:%s]\ due\ to\ wrong\ status = \u7531\u4E8E\u72B6\u6001\u9519\u8BEF\uFF0CMDEV\u8BBE\u5907[uuid\uFF1A{0}]\u65E0\u6CD5\u8FDE\u63A5\u5230VM[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostAllocatorFlow.java:71
# args: String.format("maxInstancePerHost = %d", maxInstancePerHost)
No\ host\ with\ fewer\ than\ %s\ vms\ found = \u627E\u4E0D\u5230VM\u5C11\u4E8E{0}\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:76
# args: HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
%s\ must\ be\ a\ number = {0}\u5FC5\u987B\u662F\u4E00\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:58
# args: HostAllocatorConstant.MAX_INSTANCE_PER_HOST_HOST_ALLOCATOR_STRATEGY_TYPE,HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
Select\ %s\ strategy,\ you\ must\ set\ %s = \u9009\u62E9\u7B56\u7565{0}\uFF0C\u4F60\u5FC5\u987B\u8BBE\u7F6E{1}

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MinimumMemoryUsageHostAllocatorStrategyFactory.java:58
# args: HostAllocatorSystemTags.MINIMUM_MEMORY_USAGE_HOST_ALLOCATOR_STRATEGY_MODE_TOKEN,modes
Incorrect\ %s\ settings,\ valid\ value\ is\ %s = \u4E0D\u6B63\u786E\u7684\u8BBE\u7F6E{0}\uFF0C\u6709\u6548\u7684\u503C\u662F{1}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:93
# args: 
default\ route\ network\ can\ not\ be\ changed\ when\ system\ policy\ route\ is\ enabled = \u542F\u7528\u7CFB\u7EDF\u7B56\u7565\u8DEF\u7531\u65F6\uFF0C\u65E0\u6CD5\u66F4\u6539\u9ED8\u8BA4\u8DEF\u7531\u7F51\u7EDC

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:382
# args: 
can\ not\ find\ related\ virtual\ router = \u627E\u4E0D\u5230\u76F8\u5173\u7684\u865A\u62DF\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:132
# args: msg.getL3Uuid()
l3[%s]\ already\ attached\ a\ policy\ route\ ruleSet = L3[{0}]\u5DF2\u9644\u52A0\u7B56\u7565\u8DEF\u7531\u89C4\u5219\u96C6

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:192
# args: msg.getvRouterUuid(),msg.getName()
VRouter[%s]\ already\ has\ a\ ruleSet\ named\ %s = VRouter[{0}]\u5DF2\u5177\u6709\u540D\u4E3A{1}\u7684\u89C4\u5219\u96C6

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:283
# args: 
can\ not\ update\ system\ policy\ route\ set = \u65E0\u6CD5\u66F4\u65B0\u7CFB\u7EDF\u7B56\u7565\u8DEF\u7531\u96C6

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:198
# args: msg.getDestinationCidr()
DestinationCidr\ must\ be\ in\ cidr\ format\ but\ found\ [%s] = DestinationCIDR\u5FC5\u987B\u4E3ACIDR\u683C\u5F0F\uFF0C\u4F46\u627E\u5230[{0}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:202
# args: msg.getNextHopIp()
NextHopIp\ must\ be\ in\ ipv4\ format\ but\ found\ [%s] = NextHopIP\u5FC5\u987B\u4E3AIPv4\u683C\u5F0F\uFF0C\u4F46\u627E\u5230[{0}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:278
# args: 
can\ not\ find\ related\ vRouter = \u627E\u4E0D\u5230\u76F8\u5173\u7684VRouter

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:288
# args: 
can\ not\ update\ system\ policy\ route\ table = \u65E0\u6CD5\u66F4\u65B0\u7CFB\u7EDF\u7B56\u7565\u8DEF\u7531\u8868

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:237
# args: ip
operation\ failure,\ ip\ format\ only\ supports\ ipv4/iprange/cidr,\ but\ find\ %s = \u64CD\u4F5C\u5931\u8D25\uFF0CIP\u683C\u5F0F\u4EC5\u652F\u6301IPv4/IPRange/CIDR\uFF0C\u4F46\u627E\u5230{0}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:245
# args: protocol
illegal\ protocol\ type\ %s = \u975E\u6CD5\u7684\u534F\u8BAE\u7C7B\u578B{0}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:254
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
RuleSet[%s]\ already\ has\ a\ rule\ with\ rule\ number\ %s. = \u89C4\u5219\u96C6[{0}]\u5DF2\u5177\u6709\u89C4\u5219\u7F16\u53F7\u4E3A{1}\u7684\u89C4\u5219\u3002

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:310
# args: msg.getvRouterUuid(),msg.getNumber()
VRouter[%s]\ already\ has\ a\ policy\ route\ table\ [%s] = VRouter[{0}]\u5DF2\u5177\u6709\u7B56\u7565\u8DEF\u7531\u8868[{1}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:387
# args: 
can\ not\ delete\ system\ policy\ route\ table = \u65E0\u6CD5\u5220\u9664\u7CFB\u7EDF\u7B56\u7565\u8DEF\u7531\u8868

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:371
# args: 
can\ not\ delete\ system\ policy\ route\ set = \u65E0\u6CD5\u5220\u9664\u7CFB\u7EDF\u7B56\u7565\u8DEF\u7531\u96C6

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:360
# args: msg.getUuid()
ruleSet[%s]\ is\ still\ attached\ to\ nic = \u89C4\u5219\u96C6[{0}]\u4ECD\u8FDE\u63A5\u5230NIC

# at: src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java:958
# args: vrouterVmUuid
virtual\ router[uuid\:%s]\ can\ not\ find = \u4E91\u8DEF\u7531[uuid:{0}]\u672A\u627E\u5230

# at: src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java:963
# args: vo.getApplianceVmType()
can\ not\ find\ service\ factory\ for\ virtual\ router\ type[%s] = \u672A\u627E\u5230\u4E91\u8DEF\u7531\u7C7B\u578B\u4E3A[{0}]\u7684\u670D\u52A1\u5DE5\u5382

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:54
# args: msg.getMirrorNetworkUuid()
Invalid\ parameter\ [%s],\ make\ sure\ it's\ PortMirror\ Network = \u53C2\u6570[{0}]\u65E0\u6548\uFF0C\u8BF7\u786E\u4FDD\u5B83\u662FPortMirror\u7F51\u7EDC

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:62
# args: msg.getMirrorNetworkUuid()
The\ network[%s]\ has\ been\ attached\ with\ a\ PortMirror\ service = \u7F51\u7EDC[{0}]\u5DF2\u9644\u52A0PortMirror\u670D\u52A1

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:70
# args: msg.getUuid()
The\ PortMirror\ service[%s]\ has\ not\ been\ created = \u5C1A\u672A\u521B\u5EFAPortMirror\u670D\u52A1[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:86
# args: msg.getSrcEndPoint(),msg.getDstEndPoint(),mirror.getUuid()
The\ nic[%s,\ %s]\ has\ been\ mirrored\ by\ service[%s] = NIC[{0}\uFF0C{1}]\u5DF2\u7531\u670D\u52A1[{2}]\u955C\u50CF

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:92
# args: msg.getSrcEndPoint(),mirror.getUuid()
The\ nic[%s]\ can't\ been\ mirrored\ for\ service[%s]\ using = \u65E0\u6CD5\u4F7F\u7528\u4E3A\u670D\u52A1[{1}]\u955C\u50CFNIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:109
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ doesn't\ support\ to\ mirror\ the\ nic[%s] = PortMirror\u670D\u52A1\u4E0D\u652F\u6301\u955C\u50CF\u7F51\u5361[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:114
# args: msg.getDstEndPoint()
The\ PortMirror\ service\ doesn't\ support\ the\ nic[%s]\ because\ of\ its\ hypervisor\ type = \u7531\u4E8E\u5176\u4E91\u4E3B\u673A\u76D1\u63A7\u7A0B\u5E8F\u7C7B\u578B\uFF0CPortMirror\u670D\u52A1\u4E0D\u652F\u6301NIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:121
# args: msg.getDstEndPoint()
The\ PortMirror\ service\ can't\ mirror\ to\ the\ nic[%s]\ that\ is\ not\ a\ non-default\ interface\ of\ a\ vm = PortMirror\u670D\u52A1\u65E0\u6CD5\u955C\u50CF\u5230\u4E0D\u662FVM\u7684\u975E\u9ED8\u8BA4\u63A5\u53E3\u7684NIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:128
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ that\ is\ not\ an\ interface\ of\ any\ vm = PortMirror\u670D\u52A1\u65E0\u6CD5\u955C\u50CF\u4E0D\u662F\u4EFB\u4F55VM\u63A5\u53E3\u7684NIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:138
# args: msg.getSrcEndPoint(),msg.getDstEndPoint(),vo.getMirrorNetworkUuid()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ \ to\ nic[%s]\ because\ the\ mirror\ network[%s]\ can't\ setup\ the\ mirror\ tunnel = PortMirror\u670D\u52A1\u65E0\u6CD5\u5C06NIC[{0}]\u955C\u50CF\u5230NIC[{1}]\uFF0C\u56E0\u4E3A\u955C\u50CF\u7F51\u7EDC[{2}]\u65E0\u6CD5\u8BBE\u7F6E\u955C\u50CF\u96A7\u9053

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:144
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ to\ itself = PortMirror\u670D\u52A1\u65E0\u6CD5\u5C06NIC[{0}]\u955C\u50CF\u5230\u5176\u81EA\u8EAB

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:153
# args: 
The\ PortMirror\ service\ can't\ work\ at\ the\ nic\ with\ configured\ Qos = PortMirror\u670D\u52A1\u65E0\u6CD5\u5728\u914D\u7F6E\u4E86QoS\u7684NIC\u4E0A\u5DE5\u4F5C

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:761
# args: sessionVO.getUuid(),errorCode.getDetails()
failed\ to\ delete\ portMirror\ session[%s]\ from\ hypervisor,\ detail\:\ %s = \u65E0\u6CD5\u4ECE\u4E91\u4E3B\u673A\u76D1\u63A7\u7A0B\u5E8F\u4E2D\u5220\u9664PortMirror\u4F1A\u8BDD[{0}]\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{1}

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:794
# args: sessionVO.getUuid(),errorCode.getDetails()
failed\ to\ release\ portMirror\ session[%s]\ from\ hypervisor,\ detail\:\ %s = \u65E0\u6CD5\u4ECE\u4E91\u4E3B\u673A\u76D1\u63A7\u7A0B\u5E8F\u91CA\u653EPortMirror\u4F1A\u8BDD[{0}]\uFF0C\u8BE6\u7EC6\u4FE1\u606F\uFF1A{1}

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:912
# args: vo.getUuid()
cannot\ find\ internal\ id\ of\ the\ session[uuid\:%s],\ are\ there\ too\ many\ sessions\ in\ a\ host??? = \u627E\u4E0D\u5230\u4F1A\u8BDD[uuid\uFF1A{0}]\u7684\u5185\u90E8ID\uFF0C\u7269\u7406\u673A\u4E2D\u662F\u5426\u6709\u592A\u591A\u4F1A\u8BDD\uFF1F\uFF1F

# at: src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java:276
# args: cmsg.getResourceUuid()
resourceUuid[%s]\ is\ not\ a\ valid\ uuid.\ A\ valid\ uuid\ is\ a\ uuid(v4\ recommended)\ with\ '-'\ stripped.\ see\ http\://en.wikipedia.org/wiki/Universally_unique_identifier\ for\ format\ of\ uuid,\ the\ regular\ expression\ uses\ to\ validate\ a\ uuid\ is\ '[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}' = Resourceuuid[{0}]\u4E0D\u662F\u6709\u6548\u7684uuid\u3002\u6709\u6548\u7684uuid\u662F\u53BB\u9664\u4E86\u201C-\u201D\u7684uuid\uFF08\u5EFA\u8BAE\u4F7F\u7528v4\uFF09\u3002a.\u8BF7\u53C2\u9605http\uFF1A//en.wikipediorg/wiki/Universally_unique_identifier for format of uuid\uFF0C\u7528\u4E8E\u9A8C\u8BC1uuid\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u662F\u201C[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9A-f\uFF09{3}[89ab][O-9A-F]{3}[O-9A-F]{12}\u201D

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java:122
# args: method
non\ support\ method\:\ %s = \u4E0D\u652F\u6301\u65B9\u6CD5\uFF1A{0}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java:134
# args: statusCode,response.getStatusLine().getReasonPhrase()
http\ request\ error!\ status_code\:\ %s,\ error\:\ %s = HTTP\u8BF7\u6C42\u9519\u8BEF\uFF01\u72B6\u6001_\u4EE3\u7801\uFF1A{0}\uFF0C\u9519\u8BEF\uFF1A{1}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDB.java:24
# args: r.getStderr()
sqlite3\ execute\ failed,\ because\:\ %s = SQLite3\u6267\u884C\u5931\u8D25\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDashboard.java:34
# args: GrafanaDB.folderTitle
cannot\ find\ folder\:\ %s\ in\ dashboard = \u5728\u4EEA\u8868\u677F\u4E2D\u627E\u4E0D\u5230\u6587\u4EF6\u5939\uFF1A{0}

# at: src/main/java/org/zstack/premium/externalservice/loki/LokiFactory.java:84
# args: src.getAbsolutePath(),dst.getAbsolutePath(),rst.getStderr()
cannot\ copy\ %s\ to\ %s,\ caused\:\ %s = \u65E0\u6CD5\u5C06{0}\u590D\u5236\u5230{1}\uFF0C\u539F\u56E0\uFF1A{2}

# at: src/main/java/org/zstack/premium/externalservice/loki/PromtailFactory.java:103
# args: 
ssh\ failed = SSH\u5931\u8D25

# at: src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java:124
# args: v.getClass().getSimpleName(),k
unknown\ value\ type\ %s,\ key\ \=\ %s = \u672A\u77E5\u7684\u503C\u7C7B\u578B{0}\uFF0C\u952E={1}

# at: src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java:153
# args: 
failed\ to\ HTTP\ call\ all\ prometheus\ instances = \u65E0\u6CD5\u5BF9\u6240\u6709Prometheus\u5B9E\u4F8B\u8FDB\u884CHTTP\u8C03\u7528

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java:48
# args: rbacEntity.getApiMessage().getSession().getUserUuid()
the\ operation\ is\ not\ permitted\ by\ white\ list\ of\ virtual-id[uuid\:%s] = \u65E0\u6CD5\u64CD\u4F5C\uFF0C\u64CD\u4F5C\u4E0D\u5B58\u5728\u7528\u6237[uuid:{0}]\u767D\u540D\u5355\u4E2D

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java:60
# args: rbacEntity.getApiMessage().getSession().getUserUuid()
the\ operation\ is\ denied\ by\ black\ list\ of\ virtual-id[uuid\:%s] = \u65E0\u6CD5\u64CD\u4F5C\uFF0C\u64CD\u4F5C\u88AB\u7528\u6237[uuid:{0}]\u9ED1\u540D\u5355\u62D2\u7EDD

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:199
# args: unmatchedApis,identity.toString()
action\:\ %s,\ is\ not\ supported\ for\ role\ identity\:\ %s = \u89D2\u8272\u6807\u8BC6{1}\u4E0D\u652F\u6301\u64CD\u4F5C{0}

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:372
# args: msg.getName()
%s\ is\ a\ reserved\ name,\ please\ use\ another\ name = {0}\u662F\u4FDD\u7559\u540D\u79F0\uFF0C\u8BF7\u4F7F\u7528\u5176\u4ED6\u540D\u79F0

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:370
# args: 
the\ name\ of\ initial\ user\ can\ not\ be\ updated = \u65E0\u6CD5\u66F4\u65B0\u521D\u59CB\u7528\u6237\u7684\u540D\u79F0

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:407
# args: 
cannot\ remove\ builtin\ system\ admin\ role\ from\ builtin\ system\ admin. = \u65E0\u6CD5\u4ECE\u5185\u7F6E\u7CFB\u7EDF\u7BA1\u7406\u5458\u4E2D\u5220\u9664\u5185\u7F6E\u7CFB\u7EDF\u7BA1\u7406\u5458\u89D2\u8272\u3002

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:405
# args: 
cannot\ remove\ builtin\ security\ admin\ role\ from\ builtin\ security\ admin. = \u65E0\u6CD5\u4ECE\u5185\u7F6E\u5B89\u5168\u7BA1\u7406\u5458\u4E2D\u5220\u9664\u5185\u7F6E\u5B89\u5168\u7BA1\u7406\u5458\u89D2\u8272\u3002

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:403
# args: 
cannot\ remove\ builtin\ audit\ admin\ role\ from\ builtin\ audit\ admin. = \u65E0\u6CD5\u4ECE\u5185\u7F6E\u5BA1\u6838\u7BA1\u7406\u5458\u4E2D\u5220\u9664\u5185\u7F6E\u5BA1\u6838\u7BA1\u7406\u5458\u89D2\u8272\u3002

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:417
# args: 
cannot\ delete\ builtin\ system\ admin. = \u65E0\u6CD5\u5220\u9664\u5185\u7F6E\u7CFB\u7EDF\u7BA1\u7406\u5458\u3002

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:415
# args: 
cannot\ delete\ builtin\ security\ admin. = \u65E0\u6CD5\u5220\u9664\u5185\u7F6E\u5B89\u5168\u7BA1\u7406\u5458\u3002

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:413
# args: 
cannot\ delete\ builtin\ audit\ admin. = \u65E0\u6CD5\u5220\u9664\u5185\u7F6E\u5BA1\u6838\u7BA1\u7406\u5458\u3002

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:430
# args: 
Confirm\ the\ roles\ you\ want\ to\ add\ have\ same\ identity = \u786E\u8BA4\u8981\u6DFB\u52A0\u7684\u89D2\u8272\u5177\u6709\u76F8\u540C\u7684\u8EAB\u4EFD

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:444
# args: msg.getRoleUuids(),identitySet,msg.getVirtualIDUuid()
Cannot\ add\ role\:\ %s\ with\ identity\:\ %s\ to\ virtualID[uuid\:%s] = \u65E0\u6CD5\u5C06\u6807\u8BC6\u4E3A{1}\u7684\u89D2\u8272{0}\u6DFB\u52A0\u5230VirtualID[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:456
# args: String.join(",", privilegeAdminUuids),msg.getProjectUuid()
can\ not\ add\ privilege\ admin[uuids\:%s]\ to\ project[uuid\:%s] = \u65E0\u6CD5\u5C06\u7279\u6B8A\u7BA1\u7406\u5458\u7528\u6237[uuids:{0}]\u52A0\u5165\u5230\u9879\u76EE\u4E2D\u53BB

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:432
# args: attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ no\ such\ field\ on\ inventory\ class[%s] = \u6761\u4EF6\u540D[{0}]\u975E\u6CD5\uFF0C\u5728\u6E05\u5355\u7C7B\u91CC\u9762\u6CA1\u6709\u8FD9\u4E2A\u9608

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:437
# args: attr,attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ field[%s]\ of\ inventory[%s]\ is\ annotated\ as\ @Unqueryable\ field = \u6761\u4EF6\u540D[{0}]\u975E\u6CD5\uFF0C\u6E05\u5355[{2}]\u7684\u503C[{1}]\u4E0D\u662F\u88AB\u6807\u8BB0\u4E3A@Unqueryable\u7684\u503C

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:448
# args: info.jpaMetaClass.getName(),attr
entity\ meta\ class[%s]\ has\ no\ field[%s] = \u5B9E\u4F53\u5143\u7C7B[{0}]\u4E2D\u6CA1\u6709\u503C[{1}]

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:1000
# args: f,info.inventoryClass.getSimpleName(),info.premitiveFieldNames
field[%s]\ is\ not\ a\ primitive\ of\ the\ inventory\ %s;\ you\ cannot\ specify\ it\ in\ the\ parameter\ 'fields';valid\ fields\ are\ %s = \u503C[{0}]\u4E0D\u662F\u6E05\u5355{1}\u7684\u539F\u8BED\uFF1B\u4F60\u4E0D\u80FD\u5728\u53C2\u6570'\u57DF'\u4E2D\u6307\u5B9A\u8BE5\u53C2\u6570\uFF1B\u975E\u6CD5\u7684\u57DF{2}

# at: src/main/java/org/zstack/query/QueryFacadeImpl.java:519
# args: 
filterName\ must\ be\ formatted\ as\ [filterType\:condition(s)] = FilterName\u7684\u683C\u5F0F\u5FC5\u987B\u4E3A[filterType\uFF1A\u6761\u4EF6]

# at: src/main/java/org/zstack/query/QueryFacadeImpl.java:659
# args: JSONObjectUtil.toJsonString(cond)
'value'\ of\ query\ condition\ %s\ cannot\ be\ null = \u67E5\u8BE2\u6761\u4EF6\u4E2D{0}\u7684'\u503C'\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:273
# args: typeByResourceUuids.toString()
resources\ has\ inconsistent\ resourceTypes.\ Details\:\ %s = \u8D44\u6E90\u5177\u6709\u4E0D\u4E00\u81F4\u7684\u8D44\u6E90\u7C7B\u578B\u3002\u8BE6\u7EC6\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:433
# args: resourceUuid
cannot\ find\ resource[uuid\:\ %s] = \u627E\u4E0D\u5230\u8D44\u6E90[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:437
# args: globalConfig.getCategory(),globalConfig.getName(),resourceType
ResourceConfig\ [category\:%s,\ name\:%s]\ cannot\ bind\ to\ resourceType\:\ %s = ResourceConfig[\u7C7B\u522B\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u65E0\u6CD5\u7ED1\u5B9A\u5230\u8D44\u6E90\u7C7B\u578B\uFF1A{2}

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:85
# args: msg.getCategory(),identity
no\ global\ config[category\:%s,\ name\:%s]\ found = \u627E\u4E0D\u5230\u5168\u5C40\u914D\u7F6E[\u7C7B\u522B\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:91
# args: msg.getCategory(),identity
global\ config[category\:%s,\ name\:%s]\ cannot\ bind\ resource = \u5168\u5C40\u914D\u7F6E[\u7C7B\u522B\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u65E0\u6CD5\u7ED1\u5B9A\u8D44\u6E90

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:114
# args: msg.getResourceUuid()
account\ has\ no\ access\ to\ the\ resource[uuid\:\ %s] = \u8D26\u53F7\u6CA1\u6709\u8BBF\u95EE\u8D44\u6E90[uuid:{0}]\u7684\u6743\u9650

# at: src/main/java/org/zstack/rest/TypeVerifier.java:22
# args: f.getName(),source
[%s]\ field\ is\ excepted\ an\ int\ or\ long,\ but\ was\ [%s]. = [{0}] \u5C5E\u6027\u671F\u671B\u662F\u4E00\u4E2A\u6574\u6570\uFF0C\u4F46\u662F\u5F97\u5230\u7684\u662F [{1}]

# at: src/main/java/org/zstack/rest/TypeVerifier.java:31
# args: f.getName(),source
Invalid\ value\ for\ boolean\ field\ [%s],\ [%s]\ is\ not\ a\ valid\ boolean\ string[true,\ false]. = boolean\u5C5E\u6027\u5B57\u6BB5[{0}]\u65E0\u6548\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684boolean\u5B57\u7B26\u4E32[true, false]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:141
# args: msg.getvRouterUuid()
All\ the\ networks\ should\ be\ in\ the\ virtual\ router[%s] = \u6240\u6709\u7F51\u7EDC\u90FD\u5E94\u4F4D\u4E8E\u865A\u62DF\u8DEF\u7531\u5668[{0}]\u4E2D

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:69
# args: msg.getAreaId()
[%s]\ is\ not\ formatted\ as\ IPv4\ address = [{0}]\u7684\u683C\u5F0F\u4E0D\u662FIPv4\u5730\u5740

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:108
# args: msg.getAreaAuth()
KeyID\ &\ password\ must\ be\ not\ null\ when\ authentication\ type\ is\ %s = \u5F53\u8EAB\u4EFD\u9A8C\u8BC1\u7C7B\u578B\u4E3A{0}\u65F6\uFF0C\u5BC6\u94A5ID\u548C\u5BC6\u7801\u4E0D\u80FD\u4E3ANull

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:114
# args: msg.getAreaAuth()
password\ must\ be\ not\ null\ when\ authentication\ type\ is\ %s = \u5F53\u8EAB\u4EFD\u9A8C\u8BC1\u7C7B\u578B\u4E3A{0}\u65F6\uFF0C\u5BC6\u7801\u4E0D\u80FD\u4E3Anull

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:118
# args: msg.getAreaAuth()
the\ length\ of\ password\ is\ at\ most\ than\ 8Bytes\ when\ authentication\ type\ is\ %s = \u5F53\u8EAB\u4EFD\u9A8C\u8BC1\u7C7B\u578B\u4E3A{0}\u65F6\uFF0C\u5BC6\u7801\u957F\u5EA6\u4E0D\u8D85\u8FC78\u4E2A\u5B57\u8282

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:127
# args: vo.getAreaId(),RouterAreaType.Standard.toString()
AreaId[%s]\ type\ must\ be\ %s = AreaID[{0}]\u7C7B\u578B\u5FC5\u987B\u4E3A{1}

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:97
# args: msg.getAreaId()
AreaId[%s]\ has\ been\ created = \u5DF2\u521B\u5EFAArea ID[{0}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:158
# args: vo.getL3NetworkUuid(),haUuid
The\ network[%s]\ have\ been\ added\ into\ the\ haGroup[%s] = \u7F51\u7EDC[{0}]\u5DF2\u6DFB\u52A0\u5230HAG\u7EC4[{1}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:150
# args: vo.getL3NetworkUuid(),vo.getRouterAreaUuid()
The\ network[%s]\ have\ been\ added\ into\ the\ virtual\ routerArea[%s] = \u7F51\u7EDC[{0}]\u5DF2\u6DFB\u52A0\u5230\u865A\u62DF\u8DEF\u7531\u5668\u533A\u57DF[{1}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:181
# args: msg.getRouterId()
Router\ ID[%s]\ is\ not\ formatted\ as\ IPv4\ address = \u8DEF\u7531\u5668ID[{0}]\u7684\u683C\u5F0F\u4E0D\u662FIPv4\u5730\u5740

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:193
# args: msg.getRouterId()
Router\ ID[%s]\ is\ not\ unique\ in\ this\ system = \u8DEF\u7531\u5668ID[{0}]\u5728\u6B64\u7CFB\u7EDF\u4E2D\u4E0D\u552F\u4E00

# at: src/main/java/org/zstack/scheduler/AbstractSchedulerJob.java:235
# args: 
the\ last\ job\ is\ not\ completed.\ skip\ this\ job = \u4E0A\u4E00\u4E2A\u4F5C\u4E1A\u672A\u5B8C\u6210\u3002\u8DF3\u8FC7\u8FD9\u4EFD\u5DE5\u4F5C

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:189
# args: 
cron\ must\ be\ set\ when\ use\ cron\ scheduler = \u5F53\u4F7F\u7528\u5B9A\u65F6\u5668\u4EFB\u52A1\u65F6\uFF0C\u5FC5\u987B\u8BBE\u7F6Ecron

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:195
# args: 
cron\ task\ must\ follow\ format\ like\ this\ \:\ \"0\ 0/3\ 17-23\ *\ *\ ?\"\  = \u5B9A\u65F6\u5668\u4EFB\u52A1\u5FC5\u987B\u7B26\u5408\u4EE5\u4E0B\u683C\u5F0F: \"0 0/3 17-23 * * ?\" 

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:198
# args: 
cron\ scheduler\ only\ need\ to\ specify\ cron\ task = \u5B9A\u65F6\u8C03\u5EA6\u5668\uFF08Cron Scheduler\uFF09\u4EC5\u9700\u8981\u6307\u5B9A\u5B9A\u65F6\u4EFB\u52A1\uFF08Cron Task\uFF09

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:207
# args: 
startTime\ out\ of\ range = \u5F00\u59CB\u65F6\u95F4\u8D85\u51FA\u8303\u56F4

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:203
# args: 
startTime\ must\ be\ positive\ integer\ or\ 0 = \u5F00\u59CB\u65F6\u95F4\u5FC5\u987B\u662F\u6B63\u6574\u6570\u6216\u80050

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:184
# args: 
stopTime\ has\ been\ passed = \u622A\u6B62\u65F6\u95F4\u5DF2\u7ECF\u8FC7\u53BB\u4E86

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:182
# args: 
stopTime\ out\ of\ mysql\ timestamp\ range = \u5B9A\u65F6\u4EFB\u52A1\u505C\u6B62\u65F6\u95F4\u8D85\u51FAmysql\u7684timestamp\u7684\u8303\u56F4

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:180
# args: 
duration\ time\ out\ of\ range = \u4EFB\u52A1\u9700\u8981\u7684\u65F6\u95F4\u8D85\u51FA\u8303\u56F4

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:99
# args: 
interval\ must\ be\ set\ when\ use\ simple\ scheduler\ when\ repeat\ more\ than\ once = \u5F53\u7B80\u5355\u5B9A\u65F6\u4EFB\u52A1\u6267\u884C\u8D85\u8FC7\u4E00\u6B21\u65F6\uFF0C\u5FC5\u987B\u8BBE\u7F6E\u95F4\u9694\u65F6\u95F4

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:134
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ twice\ to\ the\ same\ trigger[uuid\:%s] = \u4E0D\u80FD\u4E24\u6B21\u6DFB\u52A0\u4EFB\u52A1[uuid:{0}]\u5230\u76F8\u540C\u7684\u89E6\u53D1\u5668[uuid:{1}]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:139
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ to\ a\ out\ of\ time\ trigger[uuid\:%s] = \u4E0D\u80FD\u6DFB\u52A0\u4EFB\u52A1[uuid:{0}]\u5230\u4E00\u4E2A\u5DF2\u7ECF\u8FC7\u65F6\u7684\u89E6\u53D1\u5668[uuid:{1}]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:147
# args: count,msg.getSchedulerJobUuid()
There\ are\ [%d]\ triggers\ added\ to\ job[uuid\:%s],\ cannot\ add\ any\ more. = \u6709[{0}]\u4E2A\u89E6\u53D1\u5668\u5DF2\u6DFB\u52A0\u5230\u4F5C\u4E1A[uuid\uFF1A{1}]\uFF0C\u65E0\u6CD5\u518D\u6DFB\u52A0\u66F4\u591A\u89E6\u53D1\u5668\u3002

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:162
# args: count,msg.getSchedulerJobGroupUuid()
There\ are\ [%d]\ triggers\ added\ to\ job\ group[uuid\:%s],\ cannot\ add\ any\ more. = \u6709[{0}]\u4E2A\u89E6\u53D1\u5668\u5DF2\u6DFB\u52A0\u5230\u4F5C\u4E1A\u7EC4[uuid\uFF1A{1}]\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u66F4\u591A\u89E6\u53D1\u5668\u3002

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:192
# args: 
invalid\ cron\ expression = \u65E0\u6548\u7684cron\u8868\u8FBE\u5F0F

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:172
# args: 
startTime\ must\ be\ set\ for\ simple\ scheduler = simple\u7C7B\u578B\u7684\u5B9A\u65F6\u4EFB\u52A1\u5FC5\u987B\u8BBE\u7F6E\u5F00\u59CB\u65F6\u95F4[startTime]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:176
# args: 
schedulerInterval\ must\ be\ set\ for\ simple\ scheduler = simple\u7C7B\u578B\u7684\u5B9A\u65F6\u4EFB\u52A1\u5FC5\u987B\u8BBE\u7F6E\u6267\u884C\u95F4\u9694[schedulerInterval]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:226
# args: msg.getType()
No\ SchedulerJobFactory\ of\ type[%s]\ found = \u672A\u627E\u5230\u7C7B\u578B\u4E3A[{0}]\u7684SchedulerJobFactory

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:253
# args: n
%d\ jobs\ have\ different\ job\ type\ with\ job\ group = {0}\u4E2A\u4F5C\u4E1A\u7684\u4F5C\u4E1A\u7C7B\u578B\u4E0E\u4F5C\u4E1A\u7EC4\u4E0D\u540C

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:262
# args: count,limit - count
job\ group\ has\ contained\ %d\ job,\ only\ %d\ seats\ left = \u4F5C\u4E1A\u7EC4\u5DF2\u5305\u542B{0}\u4E2A\u4F5C\u4E1A\uFF0C\u53EA\u5269\u4E0B{1}\u4E2A\u5E2D\u4F4D

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:794
# args: timeUnitInStr
invalid\ time\ unit\:\ %s = \u65E0\u6548\u65F6\u95F4\u5355\u4F4D\uFF1A{0}

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:921
# args: jobUuid,e.getMessage()
trigger\ job[uuid\:\ %s]\ failed,\ because\ %s = \u89E6\u53D1\u5668\u4F5C\u4E1A[uuid\uFF1A{0}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/scheduler/SchedulerJobParamCascadeUpdater.java:86
# args: field.getName()
field[%s]\ cannot\ be\ empty = \u5B57\u6BB5[{0}]\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:54
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ is\ not\ available.\ check\ if\ the\ volume\ exists. = \u5377[{0}]\u4E0D\u53EF\u7528\u3002\u68C0\u67E5\u5377\u662F\u5426\u5B58\u5728\u3002

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:58
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ is\ not\ root\ volume = \u5377[{0}]\u4E0D\u662F\u6839\u5377

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:63
# args: msg.getTargetResourceUuid()
the\ vm\ of\ the\ root\ volume[%s]\ is\ not\ available.\ check\ if\ the\ vm\ exists. = \u6839\u5377[{0}]\u7684VM\u4E0D\u53EF\u7528\u3002\u68C0\u67E5\u4E91\u4E3B\u673A\u662F\u5426\u5B58\u5728\u3002

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:70
# args: 
The\ primary\ storage\ of\ volumes\ don\ not\ support\ create\ volume\ snapshot\ group\ job. = \u5377\u7684\u4E3B\u5B58\u50A8\u4E0D\u652F\u6301\u521B\u5EFA\u5377\u5FEB\u7167\u7EC4\u4F5C\u4E1A\u3002

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:77
# args: msg.getParameters().get(SchedulerJobParameters.snapshotGroupMax),e.getMessage()
snapshotGroupMaxNumber\ \:\ %s\ format\ error\ because\ %s = SnapshotGroupMaxNumber\uFF1A{0}\u683C\u5F0F\u9519\u8BEF\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java:58
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ does\ not\ support\ snapshots\ retention = \u5377[{0}]\u4E0D\u652F\u6301\u5FEB\u7167\u4FDD\u7559

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java:70
# args: msg.getParameters().get(SchedulerJobParameters.snapshotMax),e.getMessage()
snapshotMaxNumber\ \:\ %s\ format\ error\ because\ %s = snapshotMaxNumber : {0} \u8F6C\u6362\u7C7B\u578B\u5931\u8D25\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java:125
# args: getTargetResourceUuid()
the\ vm\ of\ the\ root\ volume[%s]\ state\ in\ Destroyed.\ job\ state\ change\ is\ not\ allowed = \u6839\u5377[{0}]\u7684VM\u5904\u4E8E\u5DF2\u9500\u6BC1\u72B6\u6001\u3002\u4E0D\u5141\u8BB8\u66F4\u6539\u4F5C\u4E1A\u72B6\u6001

# at: src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java:189
# args: 
The\ primary\ storage\ of\ volumes\ don\ not\ support\ create\ volume\ snapshot\ group\ job = \u5377\u7684\u4E3B\u5B58\u50A8\u4E0D\u652F\u6301\u521B\u5EFA\u5377\u5FEB\u7167\u7EC4\u4F5C\u4E1A

# at: src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java:83
# args: getTargetResourceUuid()
vm[uuid\:%s]\ is\ destroyed,\ state\ change\ is\ not\ allowed = VM[uuid\uFF1A{0}]\u5DF2\u9500\u6BC1\uFF0C\u4E0D\u5141\u8BB8\u66F4\u6539\u72B6\u6001

# at: src/main/java/org/zstack/sdnController/SdnControllerApiInterceptor.java:75
# args: msg.getVendorType(),SdnControllerType.getAllTypeNames()
Sdn\ controller\ type\:\ %s\ in\ not\ in\ the\ supported\ list\:\ %s\  = SDN\u63A7\u5236\u5668\u7C7B\u578B\uFF1A{0}\u4E0D\u5728\u652F\u6301\u7684\u5217\u8868\u4E2D\uFF1A{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:102
# args: msg.getL2NetworkUuid()
unable\ create\ vni\ range,\ because\ l2\ uuid[%s]\ is\ not\ vxlan\ network\ pool = \u65E0\u6CD5\u521B\u5EFAVNI\u8303\u56F4\uFF0C\u56E0\u4E3AL2 uuid[{0}]\u4E0D\u662FVXLAN\u7F51\u7EDC\u6C60

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:117
# args: msg.getStartVni(),msg.getEndVni()
the\ vni\ range\:[%s.%s}\ is\ illegal,\ because\ h3c's\ controller\ uses\ vni\ as\ vlan\ id = VNI\u8303\u56F4[{0}.{1}}\u975E\u6CD5\uFF0C\u56E0\u4E3AH3C\u7684\u63A7\u5236\u5668\u4F7F\u7528VNI\u4F5C\u4E3AVLAN ID

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:132
# args: userVniRange.startVni,userVniRange.endVni
the\ vni\ range\:[%s.%s}\ is\ illegal,\ must\ covered\ by\ a\ sdn's\ vniRange = VNI\u8303\u56F4[{0}.{1}}\u975E\u6CD5\uFF0C\u5FC5\u987B\u7531SDN\u7684VNI\u8303\u56F4\u8986\u76D6

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:178
# args: 
H3C\ VCFC\ controller\ must\ include\ systemTags\ vdsUuid\:\:{%s} = H3C VCFC\u63A7\u5236\u5668\u5FC5\u987B\u5305\u542B\u7CFB\u7EDF\u6807\u7B7EVDSuuid\uFF1A:'{{0}'}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:116
# args: self.getIp(),e.getLocalizedMessage()
get\ sdn\ controller\ [ip\:%s]\ vni\ range\ failed\ because\ %s = \u83B7\u53D6SDN\u63A7\u5236\u5668[IP\uFF1A{0}]VNI\u8303\u56F4\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:86
# args: self.getIp()
get\ vni\ range\ on\ sdn\ controller\ [ip\:%s]\ failed = \u5728SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u4E0A\u83B7\u53D6VNI\u8303\u56F4\u5931\u8D25

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:148
# args: self.getIp()
there\ is\ no\ vni\ range\ on\ sdn\ controller\ [ip\:%s] = SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u4E0A\u6CA1\u6709VNI\u8303\u56F4

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:154
# args: self.getIp()
there\ is\ no\ default\ tenant\ on\ sdn\ controller\ [ip\:%s] = SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u4E0A\u6CA1\u6709\u9ED8\u8BA4\u79DF\u6237

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:299
# args: self.getIp(),e.getMessage()
create\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = \u5728SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u4E0A\u521B\u5EFAVXLAN\u7F51\u7EDC\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:283
# args: self.getIp()
create\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed = \u5728SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u4E0A\u521B\u5EFAVXLAN\u7F51\u7EDC\u5931\u8D25

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:383
# args: self.getIp(),e.getMessage()
delete\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = \u5220\u9664SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u4E0A\u7684VXLAN\u7F51\u7EDC\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:377
# args: self.getIp()
delete\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed = \u5220\u9664SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u4E0A\u7684VXLAN\u7F51\u7EDC\u5931\u8D25

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:468
# args: self.getIp(),e.getMessage()
get\ token\ of\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = \u83B7\u53D6SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u7684\u4EE4\u724C\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:439
# args: self.getIp()
get\ leader\ of\ sdn\ controller\ [ip\:%s]\ failed = \u83B7\u53D6SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u7684\u9886\u5BFC\u8005\u5931\u8D25

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:460
# args: self.getIp()
get\ token\ of\ sdn\ controller\ [ip\:%s]\ failed = \u83B7\u53D6SDN\u63A7\u5236\u5668[IP\uFF1A{0}]\u7684\u4EE4\u724C\u5931\u8D25

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetwork.java:51
# args: vo.getPoolUuid()
there\ is\ no\ sdn\ controller\ for\ vxlan\ pool\ [uuid\:%s] = VXLAN\u6C60[uuid\uFF1A{0}]\u6CA1\u6709SDN\u63A7\u5236\u5668

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkFactory.java:410
# args: inv.getUuid(),destHostUuid
cannot\ configure\ hardware\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u76EE\u6807\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684VM[uuid\uFF1A{0}]\u914D\u7F6E\u786C\u4EF6VXLAN\u7F51\u7EDC

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:150
# args: msg.getPhysicalInterface()
cannot\ create\ vlan-device\ on\ %s\ because\ it's\ too\ long = \u65E0\u6CD5\u5728{0}\u4E0A\u521B\u5EFAVLAN\u8BBE\u5907\uFF0C\u56E0\u4E3A\u5B83\u592A\u957F

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:112
# args: 
hardware\ vxlan\ network\ pool\ doesn't\ support\ create\ l3\ network = \u786C\u4EF6VXLAN\u7F51\u7EDC\u6C60\u4E0D\u652F\u6301\u521B\u5EFA\u4E09\u5C42\u7F51\u7EDC

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:118
# args: 
hardware\ vxlan\ network\ pool\ must\ configure\ the\ physical\ interface = \u786C\u4EF6VXLAN\u7F51\u7EDC\u6C60\u5FC5\u987B\u914D\u7F6E\u7269\u7406\u63A5\u53E3

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:126
# args: 
ONLY\ hardware\ vxlan\ network\ can\ be\ created\ in\ hardware\ vxlan\ pool = \u5728\u786C\u4EF6VXLAN\u6C60\u4E2D\u53EA\u80FD\u521B\u5EFA\u786C\u4EF6VXLAN\u7F51\u7EDC

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:131
# args: 
hardware\ vxlan\ network\ can\ ONLY\ be\ created\ in\ hardware\ vxlan\ pool = \u786C\u4EF6VXLAN\u7F51\u7EDC\u53EA\u80FD\u5728\u786C\u4EF6VXLAN\u6C60\u4E2D\u521B\u5EFA

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java:86
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),finalVlanId,hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ hardwareVxlan[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{4}]\u4E0A\u4E3AHardwareVXLAN[uuid\uFF1A{1}\uFF0C\u7C7B\u578B\uFF1A{2}\uFF0CVLAN\uFF1A{3}]\u521B\u5EFA\u7F51\u6865[{0}]\uFF0C\u56E0\u4E3A{5}

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java:144
# args: cmd.getBridgeName(),vxlan.getUuid(),vxlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ hardwareVxlan[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{3}]\u4E0A\u68C0\u67E5\u786C\u4EF6VXLAN[uuid\uFF1A{1}\uFF0C\u540D\u79F0\uFF1A{2}]\u7684\u7F51\u6865[{0}]\uFF0C{4}

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanPoolNetworkBackend.java:64
# args: l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ physical\ interface\ for\ HardwareVxlanPool[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = \u65E0\u6CD5\u68C0\u67E5KVM\u7269\u7406\u673A[uuid\uFF1A{2}]\u4E0A\u7684\u786C\u4EF6vxlanpool[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u7684\u7269\u7406\u63A5\u53E3\uFF0C{3}

# at: src/main/java/org/zstack/simulator/SimulatorHost.java:92
# args: 
set\ to\ disconnected = \u8BBE\u7F6E\u4E3A\u65AD\u5F00\u8FDE\u63A5

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:97
# args: number
invalid\ phone\ number[%s],\ sms\ number\ is\ like\ +86-18654321234 = \u7535\u8BDD\u53F7\u7801[{0}]\u65E0\u6548\uFF0C\u77ED\u4FE1\u53F7\u7801\u7C7B\u4F3C\u4E8E+86-18654321234

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:64
# args: msg.getApplicationEndpointUuid()
can\ not\ add\ same\ email\ address\ to\ endpoint[uuid\:%s] = \u65E0\u6CD5\u5C06\u540C\u4E00\u7535\u5B50\u90AE\u4EF6\u5730\u5740\u6DFB\u52A0\u5230\u7EC8\u7ED3\u70B9[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:165
# args: errorEmails
invalid\ email\ address[%s] = \u65E0\u6548\u7684email\u5730\u5740[{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:77
# args: msg.getEmailAddress(),msg.getApplicationEndpointUuid()
cannot\ update\ email\ address\ to\ %s,\ which\ is\ already\ exists\ in\ endpoint[uuid\:%s] = \u65E0\u6CD5\u5C06\u7535\u5B50\u90AE\u4EF6\u5730\u5740\u66F4\u65B0\u4E3A{0}\uFF0C\u8BE5\u5730\u5740\u5DF2\u5B58\u5728\u4E8E\u7EC8\u7ED3\u70B9[uuid\uFF1A{1}]\u4E2D

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:91
# args: msg.getPhoneNumber()
phone\ number\ [%s]\ already\ exists = \u7535\u8BDD\u53F7\u7801[{0}]\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:106
# args: msg.getPhoneNumber()
phone\ number[%s]\ already\ exists = \u624B\u673A\u53F7\u7801[{0}]\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:115
# args: url
invalid\ url[%s] = \u65E0\u6548\u7684url[{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:121
# args: host
[%s]\ is\ not\ a\ legal\ ip = [{0}]\u4E0D\u662F\u5408\u6CD5\u7684IP

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:127
# args: n
invalid\ phone\ number[%s],\ the\ DingDing\ phone\ number\ is\ like\ +86-12388889999 = \u65E0\u6548\u7684\u624B\u673A\u53F7\u7801[{0}], \u9489\u9489\u624B\u673A\u53F7\u7801\u683C\u5F0F\u5E94\u5F53\u4E3A +86-12388889999

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:144
# args: 
username\ and\ password\ must\ either\ absent\ at\ all\ or\ present\ with\ each\ other = \u7528\u6237\u540D\u548C\u5BC6\u7801\u8981\u4E48\u540C\u65F6\u4E3A\u7A7A\u8981\u4E48\u540C\u65F6\u4E0D\u4E3A\u7A7A

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:152
# args: 
can\ not\ create\ sns\ email\ endpoint\ without\ any\ email\ address = \u65E0\u6CD5\u5728\u6CA1\u6709\u4EFB\u4F55\u7535\u5B50\u90AE\u4EF6\u5730\u5740\u7684\u60C5\u51B5\u4E0B\u521B\u5EFASNS\u7535\u5B50\u90AE\u4EF6\u7AEF\u70B9

# at: src/main/java/org/zstack/sns/SNSApplicationPlatformBase.java:118
# args: 
the\ operation\ is\ not\ permitted\ for\ the\ system\ application\ platform = \u7981\u6B62\u5BF9\u8BE5\u5E94\u7528\u5E73\u53F0\u8FDB\u884C\u5F53\u524D\u64CD\u4F5C

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:67
# args: msg.getTopicUuid()
cannot\ find\ the\ SNSTopic[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230SNS\u4E3B\u9898[uuid:{0}], \u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:85
# args: msg.getApplicationPlatformUuid()
cannot\ find\ SNSApplicationPlatform[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230SNS\u5E94\u7528\u5E73\u53F0[uuid:{0}], \u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:95
# args: msg.getApplicationEndpointUuid()
cannot\ find\ SNSApplicationEndpoint[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230SNS\u5E94\u7528\u63A5\u6536\u7EC8\u7AEF[uuid:{0}], \u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:128
# args: 
the\ topic\ is\ not\ subscribed\ by\ any\ endpoints = \u5F53\u524D\u4E3B\u9898\u5E76\u672A\u88AB\u4EFB\u4F55\u5E94\u7528\u7EC8\u7AEF\u8BA2\u9605

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:154
# args: 
application\ platform\ is\ disabled = \u5E94\u7528\u5E73\u53F0\u88AB\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:224
# args: 
application\ endpoint\ is\ disabled = \u5E94\u7528\u63A5\u6536\u7AEF\u88AB\u7981\u7528

# at: src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsApiInterceptor.java:44
# args: msg.getAccessKeyUuid()
Aliyun\ account[uuid\:%s]\ not\ exists = \u963F\u91CC\u4E91\u8D26\u53F7[uuid\uFF1A{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsEndpoint.java:83
# args: SysErrors.RESOURCE_NOT_FOUND
Aliyun\ sms\ event\ text\ template\ not\ found. = \u672A\u627E\u5230\u963F\u91CC\u4E91\u77ED\u4FE1\u4E8B\u4EF6\u6587\u672C\u6A21\u677F\u3002

# at: src/main/java/org/zstack/sns/platform/dingtalk/SNSDingTalkEndpoint.java:130
# args: rsp.getStatusCode(),rsp.getBody()
failed\ to\ send\ messages\ to\ DingTalk.\ status\:\ %s,\ body\:\ %s = \u5411DingTalk\u53D1\u9001\u6D88\u606F\u5931\u8D25\u3002\u72B6\u6001\uFF1A{0}\uFF0C\u6B63\u6587\uFF1A{1}

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:72
# args: getSelf().getSmtpServer(),getSelf().getSmtpPort()
cannot\ connect\ SMTP\ server[server\:\ %s,\ port\:\ %s]\ in\ 15\ seconds = \u572815\u79D2\u5185\u65E0\u6CD5\u8FDE\u63A5\u5230SMTP\u670D\u52A1\u5668[server: {0}, port: {1}]

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:88
# args: e.getMessage()
SMTP\ server\ validation\ error\:\ %s = SMTP\u670D\u52A1\u5668\u9A8C\u8BC1\u9519\u8BEF: {0}

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:130
# args: 
the\ endpoint\ is\ disabled = \u901A\u77E5\u7EC8\u7AEF\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:158
# args: 
no\ subject = \u6CA1\u6709\u4E3B\u9898

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:66
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ email\ permission\ denied = \u5BFC\u81F4\u64CD\u4F5C\u5931\u8D25\u7684\u539F\u56E0\u53EF\u80FD\u662F\u4E0D\u6B63\u786E\u7684\u7528\u6237\u540D\u3001\u5BC6\u7801\u6216\u90AE\u4EF6\u8BBF\u95EE\u6743\u9650\u4E0D\u8DB3

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:68
# args: smtpServer,smtpPort
Couldn't\ connect\ to\ host,\ port\:\ %s,\ %d.\ The\ problem\ may\ be\ caused\ by\ an\ incorrect\ smtpServer\ or\ smtpPort = \u8FDE\u63A5{0}:{1}\u8D85\u65F6\uFF0C\u5BFC\u81F4\u539F\u56E0\u53EF\u80FD\u662F\u4E0D\u6B63\u786E\u7684\u90AE\u4EF6\u670D\u52A1\u5668\u548C\u90AE\u4EF6\u670D\u52A1\u5668\u7AEF\u53E3

# at: src/main/java/org/zstack/sns/platform/http/SNSHttpEndpoint.java:67
# args: rsp.getStatusCode(),rsp.getBody()
HTTP\ POST\ failure.\ status\:\ %s,\ body\:\ %s = HTTP POST\u5931\u8D25\uFF0C\u72B6\u6001\u7801: {0}, body: {1}

# at: src/main/java/org/zstack/sns/platform/microsoftteams/SNSMicrosoftTeamsEndpoint.java:69
# args: rsp.getStatusCode(),rsp.getBody()
failed\ to\ send\ messages\ to\ Microsoft\ Teams.\ status\:\ %s,\ body\:\ %s = \u672A\u80FD\u5C06\u6D88\u606F\u53D1\u9001\u5230Microsoft Teams\u3002\u72B6\u6001\uFF1A{0}\uFF0C\u6B63\u6587\uFF1A{1}

# at: src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:172
# args: endpoint.getType()
only\ HTTP\ endpoint\ can\ subscribe\ API\ topic,\ the\ endpoint[type\:%s]\ is\ not\ a\ HTTP\ endpoint = \u4EC5HTTP\u901A\u77E5\u7EC8\u7AEF\u53EF\u4EE5\u8BA2\u9605API\u901A\u77E5\u4E3B\u9898\uFF0C\u5F53\u524D\u901A\u77E5\u7EC8\u7AEF[type:{0}]\u4E0D\u662F\u4E00\u4E2AHTTP\u901A\u77E5\u7EC8\u7AEF

# at: src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:191
# args: 
API\ topic\ cannot\ be\ deleted = API\u901A\u77E5\u4E3B\u9898\u65E0\u6CD5\u88AB\u5220\u9664

# at: src/main/java/org/zstack/sns/system/SNSSystemAlarmTopicManagerImpl.java:78
# args: 
system\ alarm\ topic\ cannot\ be\ deleted = \u7CFB\u7EDF\u8B66\u62A5\u901A\u77E5\u4E3B\u9898\u4E0D\u80FD\u88AB\u5220\u9664

# at: src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java:53
# args: 
url\ is\ error,\ clientUuid\ is\ miss = URL\u9519\u8BEF\uFF0C\u7F3A\u5C11Clientuuid

# at: src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java:58
# args: 
\ missing\ cas\ client,\ please\ create\ cas\ client\ before\ sso = \u7F3A\u5C11CAS\u5BA2\u6237\u7AEF\uFF0C\u8BF7\u5728SSO\u4E4B\u524D\u521B\u5EFACAS\u5BA2\u6237\u7AEF

# at: src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java:62
# args: login.getClass().getName(),old.getClass().getName(),login.getLoginType()
duplicate\ casLogin[%s,\ %s]\ for\ type[%s] = \u7C7B\u578B[{2}]\u7684CASLogin[{0}\uFF0C{1}]\u91CD\u590D

# at: src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java:73
# args: type
Cannot\ find\ CasLogin\ for\ type(%s) = \u627E\u4E0D\u5230\u7C7B\u578B\uFF08{0}\uFF09\u7684CASlogin

# at: src/main/java/org/zstack/sso/cas/service/CasLoginIAM2.java:67
# args: userName
iam2\ has\ a\ user\ with\ the\ same\ name[%s] = IAM2\u5177\u6709\u540C\u540D[{0}]\u7684\u7528\u6237

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM1.java:71
# args: userName
\ local\ user\ has\ a\ user\ with\ the\ same\ name[%s] = \u672C\u5730\u7528\u6237\u5177\u6709\u540C\u540D[{0}]\u7684\u7528\u6237

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:57
# args: ssoUseAsLoginName
fail\ to\ get\ params[%s] = \u65E0\u6CD5\u83B7\u53D6\u53C2\u6570[{0}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:61
# args: 
get\ user\ name\ is\ null = \u83B7\u53D6\u7528\u6237\u540D\u4E3A\u7A7A

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:66
# args: userName
\ iam2\ has\ a\ user\ with\ the\ same\ name[%s] = IAM2\u5177\u6709\u540C\u540D[{0}]\u7684\u7528\u6237

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:375
# args: rsp.getStatusCode(),rsp.getBody()
HTTP\ ERROR,\ status\ code\:\ %s,\ body\:\ %s = HTTP\u9519\u8BEF\uFF0C\u72B6\u6001\u4EE3\u7801\uFF1A{0}\uFF0C\u6B63\u6587\uFF1A{1}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:382
# args: HttpMethod.POST,url,e.getStatusCode(),e.getResponseBodyAsString()
failed\ to\ %s\ to\ %s,\ status\ code\:\ %s,\ response\ body\:\ %s = \u8BBF\u95EE{1}\u65F6\u6267\u884C{0}\u65B9\u6CD5\u5931\u8D25\uFF0C\u72B6\u6001\u7801: {2}\uFF0C\u54CD\u5E94\u4F53: {3}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:386
# args: HttpMethod.POST,url,e.getMessage()
failed\ to\ %s\ to\ %s,\ IO\ Error\:\ %s = \u8BBF\u95EE{1}\u65F6\u6267\u884C{0}\u65B9\u6CD5\u5931\u8D25\uFF0CIO\u9519\u8BEF: {2}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:201
# args: e
response\ has\ error\ \:\ %s = \u54CD\u5E94\u51FA\u73B0\u9519\u8BEF\uFF1A{0}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:101
# args: login.getClass().getName(),old.getClass().getName(),login.getLoginType()
duplicate\ OAuth2Login[%s,\ %s]\ for\ type[%s] = \u7C7B\u578B[{2}]\u7684\u91CD\u590DOAuth2Login[{0}\uFF0C{1}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:113
# args: type
Cannot\ find\ OAuth2Login\ for\ type(%s) = \u627E\u4E0D\u5230\u7C7B\u578B\uFF08{0}\uFF09\u7684OAuth2Login

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:190
# args: 
there\ was\ an\ error,\ reason\:\ \ token\ response\ is\ null = \u51FA\u73B0\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A\u4EE4\u724C\u54CD\u5E94\u4E3A\u7A7A

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:194
# args: AuthGolabalProperty.OAUTH2_GET_TOKEN_USERINFO
there\ was\ an\ error,\ reason\:\ \ %s\ is\ null = \u51FA\u73B0\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A{0}\u4E3A\u7A7A

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:300
# args: e
get\ code\ response\ has\ error\ \:\ %s = \u83B7\u53D6\u4EE3\u7801\u54CD\u5E94\u51FA\u73B0\u9519\u8BEF\uFF1A{0}

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:65
# args: name
%s\ should\ not\ be\ null = {0} \u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:88
# args: 
zoneUuids,\ backupStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, backupStorageUuids \u81F3\u5C11\u6709\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\uFF0C\u6216\u8005all\u88AB\u8BBE\u7F6E\u4E3A\u771F 

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:118
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ zone[uuid\:%s] = \u955C\u50CF\u670D\u52A1\u5668[uuid:{0}]\u6CA1\u6709\u88AB\u52A0\u8F7D\u5230zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:127
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ been\ attached\ to\ zone[uuid\:%s] = \u955C\u50CF\u670D\u52A1\u5668[uuid:{0}]\u5DF2\u7ECF\u88AB\u52A0\u8F7D\u5230zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:148
# args: url,e.toString()
failed\ to\ get\ header\ of\ image\ url\ %s\:\ %s = \u83B7\u53D6\u94FE\u63A5 {0} \u7684Header\u4FE1\u606F\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:152
# args: url
failed\ to\ get\ header\ of\ image\ url\ %s = \u83B7\u53D6\u94FE\u63A5 {0} \u7684Header\u4FE1\u606F\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:175
# args: self.getUuid(),self.getName(),url,size,self.getAvailableCapacity()
the\ backup\ storage[uuid\:%s,\ name\:%s]\ has\ not\ enough\ capacity\ to\ download\ the\ image[%s].Required\ size\:%s,\ available\ size\:%s = \u955C\u50CF\u670D\u52A1\u5668[uuid:{0}, name:{1}]\u6CA1\u6709\u8DB3\u591F\u7684\u5BB9\u91CF\u53EF\u4F9B\u4E0B\u8F7D\u955C\u50CF[{2}]\u3002\u9700\u8981\u7684\u5927\u5C0F: {3}\uFF0C\u53EF\u7528\u7684\u5927\u5C0F: {4}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:172
# args: url,size
the\ image\ size\ get\ from\ url\ %s\ is\ %d\ bytes,\ it's\ too\ small\ for\ an\ image,\ please\ check\ the\ url\ again. = \u4ECE\u94FE\u63A5 {0} \u83B7\u53D6\u5230\u7684\u955C\u50CF\u5927\u5C0F\u4E3A{1}\u5B57\u8282\uFF0C\u5BF9\u4E00\u4E2A\u6B63\u5E38\u7684\u955C\u50CF\u6765\u8BF4\u592A\u5C0F\u4E86\uFF0C\u8BF7\u68C0\u67E5\u8BE5\u94FE\u63A5\u662F\u5426\u5408\u6CD5

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:190
# args: msg.getClass().getName(),self.getStatus()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ status\ is\ %s = \u955C\u50CF\u670D\u52A1\u5668\u65E0\u6CD5\u5904\u7406\u6D88\u606F[{0}]\u56E0\u4E3A\u5B83\u7684\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:196
# args: msg.getClass().getName(),self.getState()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ state\ is\ %s = \u955C\u50CF\u670D\u52A1\u5668\u65E0\u6CD5\u5904\u7406\u6D88\u606F[{0}]\u56E0\u4E3A\u5B83\u7684\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java:139
# args: size,backupStorageUuid,capacityVO.getAvailableCapacity()
cannot\ reserve\ %s\ on\ the\ backup\ storage[uuid\:%s],\ it\ only\ has\ %s\ available = \u65E0\u6CD5\u5728\u955C\u50CF\u670D\u52A1\u5668{1}\u4FDD\u7559{0}\uFF0C\u5B83\u4EC5\u6709{2}\u53EF\u7528\u5BB9\u91CF

# at: src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:276
# args: 
capacity\ reservation\ on\ all\ backup\ storage\ failed = \u5728\u6240\u6709\u955C\u50CF\u670D\u52A1\u5668\u4E0A\u4FDD\u7559\u5BB9\u91CF\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:320
# args: backupStorageDataNetworkTags.size()
only\ one\ backup\ storage\ data\ network\ system\ tag\ is\ allowed,\ but\ %s\ got = \u53EA\u5141\u8BB8\u4E00\u4E2A\u5907\u4EFD\u5B58\u50A8\u6570\u636E\u7F51\u7EDC\u7CFB\u7EDF\u6807\u8BB0\uFF0C\u4F46{0}\u5DF2\u83B7\u5F97

# at: src/main/java/org/zstack/storage/backup/BackupStoragePrimaryStorageAllocatorFlow.java:46
# args: spec.getRequiredPrimaryStorageUuid(),psTypeName
required\ primary\ storage[uuid\:%s,\ type\:%s]\ could\ not\ support\ any\ backup\ storage. = \u6240\u9700\u7684\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]\u65E0\u6CD5\u652F\u6301\u4EFB\u4F55\u5907\u4EFD\u5B58\u50A8\u3002

# at: src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java:55
# args: spec.getSize()
after\ subtracting\ reserved\ capacity,\ no\ backup\ storage\ has\ required\ capacity[%s\ bytes] = \u51CF\u53BB\u4FDD\u7559\u5BB9\u91CF\u540E\uFF0C\u6CA1\u6709\u5907\u4EFD\u5B58\u50A8\u5177\u6709\u6240\u9700\u5BB9\u91CF[{0}\u5B57\u8282]

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:328
# args: 
missing\ 'retentionType'\ in\ job\ parameters = parameters\u4E2D\u7F3A\u5C11retentionType\u53C2\u6570

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:332
# args: 
missing\ 'retentionValue'\ in\ job\ parameters = parameter\u4E2D\u7F3A\u5C11retentionValue\u53C2\u6570

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:336
# args: 
missing\ 'backupStorageUuids'\ in\ job\ parameters = parameter\u4E2D\u7F3A\u5C11backupStorageUuids\u53C2\u6570

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:340
# args: 
job\ parameter\ 'backupStorageUuids'\ is\ empty = parameter\u4E2DbackupStorageUuids\u4E3A\u7A7A

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:345
# args: bsUuid
unexpected\ backup\ storage\ uuid\:\ %s = \u9519\u8BEF\u7684\u955C\u50CF\u670D\u52A1\u5668uuid: {0}

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:354
# args: 
missing\ 'remoteRetentionValue'\ in\ job\ parameters = \u4F5C\u4E1A\u53C2\u6570\u4E2D\u7F3A\u5C11\u201C RemoteRetentionValue \u201D

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:352
# args: 
missing\ 'remoteRetentionType'\ in\ job\ parameters = \u4F5C\u4E1A\u53C2\u6570\u4E2D\u7F3A\u5C11\u201C RemoteRetentionType \u201D

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:84
# args: 
No\ available\ backup\ storage\ found,\ skip\ this\ job = \u627E\u4E0D\u5230\u53EF\u7528\u7684\u5907\u4EFD\u5B58\u50A8\uFF0C\u8BF7\u8DF3\u8FC7\u6B64\u4F5C\u4E1A

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:578
# args: getTargetResourceUuid()
volume[uuid\:%s]\ is\ deleted,\ state\ change\ is\ not\ allowed = \u5377[uuid\uFF1A{0}]\u5DF2\u5220\u9664\uFF0C\u4E0D\u5141\u8BB8\u66F4\u6539\u72B6\u6001

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:137
# args: 
bandWidth\ must\ be\ a\ positive\ number = \u5E26\u5BBD\u5FC5\u987B\u4E3A\u6B63\u6570

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:217
# args: 
missing\ job\ parameters = \u7F3A\u5C11parameters\u53C2\u6570

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:93
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ not\ been\ exported\ from\ backupStorage[uuid\:%s] = \u6570\u636E\u5E93\u5907\u4EFD[uuid{0}]\u5C1A\u672A\u4ECE\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]\u4E2D\u5BFC\u51FA

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:107
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ been\ exported\ from\ backupStorage[uuid\:%s] = \u6570\u636E\u5E93\u5907\u4EFD[uuid{0}]\u5DF2\u4ECE\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]\u4E2D\u5BFC\u51FA

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:120
# args: 
do\ not\ allow\ cover\ database\ from\ backup = \u4E0D\u5141\u8BB8\u4ECE\u5907\u4EFD\u4E2D\u8986\u76D6\u6570\u636E\u5E93

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:124
# args: 
installPath\ and\ bsUrl\ are\ both\ need = InstallPath\u548CBSURL\u90FD\u662F\u5FC5\u9700

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:133
# args: 
databaseBackup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = DatabaseBackup[uuid\uFF1A{0}]\u672A\u542F\u7528\u4E14\u672A\u5C31\u7EEA

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:142
# args: url
illegal\ url[%s],\ correct\ example\ is\ ssh\://username\:password@hostname[\:sshPort]/path = \u975E\u6CD5URL[{0}]\uFF0C\u6B63\u786E\u793A\u4F8B\u4E3ASSH\uFF1A//username\uFF1Apassword@hostname[\uFF1Asshport]/path

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:80
# args: self.getUuid()
database\ backup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = \u6570\u636E\u5E93\u5907\u4EFD[uuid\uFF1A{0}]\u672A\u542F\u7528\u4E14\u672A\u5C31\u7EEA

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:328
# args: msg.getDatabaseBackupUuid(),msg.getSrcBackupStorageUuid()
database\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = \u672A\u5728\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]\u4E2D\u627E\u5230\u6570\u636E\u5E93\u5907\u4EFD[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:91
# args: msg.getDatabaseBackupUuid()
database\ backup\ [uuid\:%s]\ is\ not\ existed\ yet = \u6570\u636E\u5E93\u5907\u4EFD[uuid\uFF1A{0}]\u5C1A\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:107
# args: 
backup\ storage[uuid\:%s]\ is\ not\ enabled\ and\ connected = \u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u672A\u542F\u7528\u548C\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:603
# args: result.getStderr()
not\ pass\ the\ restore\ security\ check\:\n%s = \u672A\u901A\u8FC7\u8FD8\u539F\u5B89\u5168\u68C0\u67E5\uFF1A\n{0}

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:615
# args: 
cannot\ get\ free\ port\ to\ listen = \u65E0\u6CD5\u83B7\u53D6\u7A7A\u95F2\u7AEF\u53E3\u4EE5\u8FDB\u884C\u4FA6\u542C

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:643
# args: version,dbf.getDbVersion()
database\ backup\ version[%s]\ is\ not\ match\ currently\ version[%s] = \u6570\u636E\u5E93\u5907\u4EFD\u7248\u672C[{0}]\u4E0E\u5F53\u524D\u7248\u672C[{1}]\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/storage/backup/MultiDatabaseRecoverChecker.java:26
# args: 
cannot\ ssh\ peer\ node\ via\ sshkey,\ please\ check\ connection = \u65E0\u6CD5\u901A\u8FC7SSHKEY\u8FDB\u884CSSH\u5BF9\u7B49\u8282\u70B9\uFF0C\u8BF7\u68C0\u67E5\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/backup/SingleDatabaseRecoverChecker.java:19
# args: 
please\ stop\ other\ node\ first! = \u8BF7\u5148\u505C\u6B62\u5176\u4ED6\u8282\u70B9\uFF01

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:355
# args: 
could\ not\ create\ vm,\ because\ at\ least\ one\ of\ field\ (l3NetworkUuids,zoneUuid,clusterUuid,hostUuid)\ should\ be\ set = \u65E0\u6CD5\u521B\u5EFAVM\uFF0C\u56E0\u4E3A\u81F3\u5C11\u5E94\u8BBE\u7F6E\u5B57\u6BB5\uFF08l3NetworkUuids\u3001zoneUuid\u3001clusterUuid\u3001hostUuid\uFF09\u4E2D\u7684\u4E00\u4E2A

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:91
# args: currentState,msgName,checker.getStatesForOperation(msgName)
current\ backup\ storage\ state[%s]\ doesn't\ allow\ to\ proceed\ message[%s],\ allowed\ states\ are\ %s = \u5F53\u524D\u955C\u50CF\u670D\u52A1\u5668\u72B6\u6001[{0}]\u4E0D\u80FD\u5904\u7406\u6D88\u606F[{1}]\uFF0C\u4EC5\u5F53\u955C\u50CF\u670D\u52A1\u5668\u5904\u4E8E{2}\u65F6\u624D\u80FD\u5904\u7406\u8BE5\u6D88\u606F

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:231
# args: bsType,bsUuid
Unexpected\ backup\ storage[type\:%s,uuid\:%s] = \u9519\u8BEF\u7684\u955C\u50CF\u670D\u52A1\u5668[type:{0}, uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:252
# args: msg.getVolumeUuid()
Can\ not\ create\ volume\ backup\ for\ shareable\ volume[uuid\:%s] = \u65E0\u6CD5\u7ED9\u5171\u4EAB\u4E91\u76D8[uuid:{0}]\u521B\u5EFA\u4E91\u76D8\u5907\u4EFD

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:256
# args: msg.getVolumeUuid()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ it\ is\ not\ attached\ to\ any\ vm = \u65E0\u6CD5\u7ED9\u4E91\u76D8[uuid:{0}]\u521B\u5EFA\u4E91\u76D8\u5907\u4EFD\uFF0C\u56E0\u4E3A\u5B83\u672A\u52A0\u8F7D\u5230\u4E91\u4E3B\u673A\u4E0A

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:265
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ its\ attached\ volume\ is\ not\ in\ state[%s,\ %s] = \u65E0\u6CD5\u7ED9\u4E91\u76D8[uuid:{0}]\u521B\u5EFA\u4E91\u76D8\u5907\u4EFD\uFF0C\u56E0\u4E3A\u52A0\u8F7D\u5230\u7684\u4E91\u4E3B\u673A\u5E76\u4E0D\u5904\u4E8E\u4EE5\u4E0B\u72B6\u6001[{1}, {2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:262
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ the\ vm\ is\ not\ in\ state[%s,\ %s] = \u65E0\u6CD5\u7ED9\u4E91\u76D8[uuid:{0}]\u521B\u5EFA\u4E91\u76D8\u5907\u4EFD\uFF0C\u56E0\u4E3A\u52A0\u8F7D\u5230\u7684\u4E91\u4E3B\u673A\u5E76\u4E0D\u5904\u4E8E\u4EE5\u4E0B\u72B6\u6001[{1}, {2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:292
# args: msg.getVolumeUuid()
The\ resource[uuid\:\ %s]\ has\ already\ created\ a\ cdp\ task,\ cannot\ create\ the\ backup\ job\ at\ the\ same\ time. = \u8D44\u6E90[uuid\uFF1A{0}]\u5DF2\u521B\u5EFACDP\u4EFB\u52A1\uFF0C\u65E0\u6CD5\u540C\u65F6\u521B\u5EFA\u5907\u4EFD\u4F5C\u4E1A\u3002

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:280
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ root\ volume = \u5377[uuid\uFF1A{0}]\u4E0D\u662F\u6839\u5377

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:287
# args: t.get(0),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ backups\ for\ VM[uuid\:%s],\ because\ it\ is\ not\ in\ state[%s,\ %s] = \u65E0\u6CD5\u4E3AVM[uuid\uFF1A{0}]\u521B\u5EFA\u5907\u4EFD\uFF0C\u56E0\u4E3A\u5B83\u672A\u5904\u4E8E\u72B6\u6001[{1}\uFF0C{2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:305
# args: groupUuid
No\ volume\ backup\ found\ for\ group\ uuid\:\ %s = \u672A\u627E\u5230\u7EC4uuid\u4E3A{0}\u7684\u5377\u5907\u4EFD

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:311
# args: groupUuid
root\ volume\ backup\ of\ group[uuid\:%s]\ not\ found = \u672A\u627E\u5230\u7EC4[uuid\uFF1A{0}]\u7684\u6839\u5377\u5907\u4EFD

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:315
# args: expectVmUuid,rootVolumeInfo.get(0),rootVolumeInfo.get(1)
Current\ vm[uuid\:\ %s]\ of\ the\ volume[uuid\:\ %s]\ is\ no\ longer\ the\ vm[uuid\:\ %s]\ that\ was\ used\ for\ backup = \u5377[uuid\uFF1A{1}]\u7684\u5F53\u524D\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u4E0D\u518D\u662F\u7528\u4E8E\u5907\u4EFD\u7684\u4E91\u4E3B\u673A[UuId\uFF1A{2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:348
# args: 
cannot\ specify\ primary\ storage\ which\ attached\ different\ cluster. = \u65E0\u6CD5\u6307\u5B9A\u8FDE\u63A5\u5230\u5176\u4ED6\u96C6\u7FA4\u7684\u4E3B\u5B58\u50A8\u3002

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:378
# args: backupUuid,state
volume\ backup[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = \u4E91\u76D8\u5907\u4EFD[uuid:{0}]\u5904\u4E8E{1}\u72B6\u6001\uFF0C\u65E0\u6CD5\u7528\u4E8E\u6062\u590D\u4E91\u76D8

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:388
# args: backupUuid
original\ volume\ for\ backup[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = \u4E91\u76D8\u5907\u4EFD[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664\uFF0C\u65E0\u6CD5\u7528\u4E8E\u6062\u590D\u4E91\u76D8

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:392
# args: volUuid,backupUuid,expectVmUuid
original\ volume[uuid\:%s]\ for\ backup[uuid\:%s]\ is\ no\ longer\ attached\ to\ vm[uuid\:%s] = \u539F\u59CB\u5377[uuid\uFF1A{0}]\uFF08\u7528\u4E8E\u5907\u4EFD[uuid\uFF1A{1}]\uFF09\u4E0D\u518D\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:402
# args: backupUuid
VM\ not\ found\ with\ volume\ backup[uuid\:%s] = \u627E\u4E0D\u5230\u548C\u4E91\u76D8\u5907\u4EFD[uuid:{0}]\u5BF9\u5E94\u7684\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:406
# args: vmState
VM\ is\ not\ in\ stopped\ state\:\ %s = \u5F53\u524D\u4E91\u4E3B\u673A\u72B6\u6001\u5E76\u4E0D\u662F\u505C\u6B62\u72B6\u6001\uFF1A{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:423
# args: 
No\ available\ backup\ storage\ found = \u6CA1\u6709\u53EF\u7528\u7684\u955C\u50CF\u670D\u52A1\u5668

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:518
# args: 
The\ vm\ is\ creating\ a\ backup\ job,\ cannot\ enable\ the\ cdp\ task\ at\ the\ same\ time. = \u4E91\u4E3B\u673A\u6B63\u5728\u521B\u5EFA\u5907\u4EFD\u4F5C\u4E1A\uFF0C\u65E0\u6CD5\u540C\u65F6\u542F\u7528CDP\u4EFB\u52A1\u3002

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:191
# args: 
Operation\ not\ supported\ on\ shared\ volume = \u5171\u4EAB\u4E91\u76D8\u4E0D\u652F\u6301\u8BE5\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:196
# args: volumeVO.getUuid()
No\ VM\ found\ for\ volume[uuid\:%s] = \u627E\u4E0D\u5230\u548C\u4E91\u76D8[uuid:{0}]\u5BF9\u5E94\u7684\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:380
# args: msg.getRootVolumeUuid()
No\ VM\ found\ with\ root\ volume\ uuid\:\ %s = \u627E\u4E0D\u5230\u6839\u5377uuid\u4E3A{0}\u7684\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1974
# args: cidr,fmtCidr
[%s]\ is\ not\ a\ standard\ cidr,\ do\ you\ mean\ [%s]? = [{0}]\u4E0D\u662F\u4E00\u4E2A\u6807\u51C6\u7684cidr, \u662F\u5426\u6307\u5B9A\u7684\u662F[{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1320
# args: msg.getDstBackupStorageUuid(),msg.getSrcBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuids\:\ %s,\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = \u955C\u50CF\u670D\u52A1\u5668[uuid: {0}]\u5904\u4E8E\u72B6\u6001{1}, \u65E0\u6CD5\u6267\u884C\u540C\u6B65\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:992
# args: 
sync\ task\ failed. = \u540C\u6B65\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:999
# args: reply.getStatus()
unexpected\ task\ status\:\ %s = \u9519\u8BEF\u7684\u4EFB\u52A1\u72B6\u6001{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:293
# args: vos.stream().filter( vo -> !succeedUuids.contains(vo.getUuid())).map(VolumeBackupVO::getUuid).collect(Collectors.toList())
failed\ to\ create\ image\ from\ backup\ %s = \u65E0\u6CD5\u4ECE\u5907\u4EFD{0}\u521B\u5EFA\u955C\u50CF

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:498
# args: msg.getImageStoreUuid(),e.getMessage()
sync\ volume\ backup\ metadata\ file\ in\ image\ store[uuid\:%s]\ meet\ I/O\ error\:\ %s = \u540C\u6B65\u5377\u5907\u4EFD\u5143\u6570\u636E\u6587\u4EF6\uFF08\u4F4D\u4E8E\u955C\u50CF\u5B58\u50A8[uuid\uFF1A{0}]\u4E2D\uFF09\u9047\u5230I/O\u9519\u8BEF\uFF1A{1}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:535
# args: volumeVmUuid,backupUuid,backupVmUuid
Current\ vm[uuid\:\ %s]\ of\ the\ backup\ volume\ is\ no\ longer\ the\ vm[uuid\:\ %s]\ that\ was\ used\ for\ backup = \u5907\u4EFD\u5377\u7684\u5F53\u524D\u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u4E0D\u518D\u662F\u7528\u4E8E\u5907\u4EFD\u7684\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:544
# args: hypervisorType
No\ VolumeBackupFactory\ of\ type[%s]\ found = \u672A\u627E\u5230\u7C7B\u578B\u4E3A[{0}]\u7684VolumeBackupFactory

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:561
# args: msg.getBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuid\:\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = \u955C\u50CF\u670D\u52A1\u5668[uuid: {0}]\u5904\u4E8E\u72B6\u6001{1}, \u65E0\u6CD5\u6267\u884C\u540C\u6B65\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:738
# args: struct.getBackupUuid(),struct.getBackupStorageUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ backup\ storage[uuid\:%s] = \u5728\u955C\u50CF\u670D\u52A1\u5668[uuid:{1}]\u4E0A\u627E\u4E0D\u5230\u4E91\u76D8\u5907\u4EFD[uuid:{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1187
# args: backupUuid,srcBackupStorageUuid
volume\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = \u5728\u955C\u50CF\u670D\u52A1\u5668[uuid:{1}]\u4E0A\u627E\u4E0D\u5230\u4E91\u76D8\u5907\u4EFD[uuid:{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1399
# args: groupUuid
No\ volume\ backups\ found\ with\ group\ uuid\:\ %s = \u672A\u627E\u5230\u7EC4uuid\u4E3A{0}\u7684\u5377\u5907\u4EFD

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1406
# args: groupUuid
Root\ volume\ missing\ within\ group\ uuid\:\ %s = \u7EC4uuid\u4E2D\u7F3A\u5C11\u6839\u5377\uFF1A{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1412
# args: groupUuid
Multiple\ root\ volumes\ found\ within\ group\ uuid\:\ %s = \u5728\u7EC4uuid\u4E2D\u627E\u5230\u591A\u4E2A\u6839\u5377\uFF1A{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1424
# args: groupUuid
No\ permission\ to\ volume\ backups\ within\ group\ uuid\:\ %s = \u5BF9\u7EC4uuid{0}\u4E2D\u7684\u5377\u5907\u4EFD\u6CA1\u6709\u6743\u9650

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1564
# args: vo.getUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ any\ backup\ storage = \u672A\u5728\u4EFB\u4F55\u5907\u4EFD\u5B58\u50A8\u4E0A\u627E\u5230\u5377\u5907\u4EFD[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2001
# args: degree
degree\ [%s]\ should\ be\ a\ positive\ number = \u5EA6[{0}]\u5E94\u4E3A\u6B63\u6570

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2035
# args: type
invalid\ type[%s],\ should\ be\ [nfs,\ sshfs,\ nbd] = \u7C7B\u578B[{0}]\u65E0\u6548\uFF0C\u5E94\u4E3A[NFS\uFF0Csshfs\uFF0CNBD]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2045
# args: url
invalid\ url[%s],\ should\ be\ hostname\:/path = URL[{0}]\u65E0\u6548\uFF0C\u5E94\u4E3Ahostname\uFF1A/path

# at: src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java:177
# args: inv.getUuid(),e.getMessage()
generate\ volume\ backup\ metadata\ file\ on\ image\ store[uuid\:%s]\ failure,\ because\ IO\ error\:\ %s = \u5728\u955C\u50CF\u5B58\u50A8[uuid\uFF1A{0}]\u4E0A\u751F\u6210\u5377\u5907\u4EFD\u5143\u6570\u636E\u6587\u4EF6\u5931\u8D25\uFF0C\u56E0\u4E3AIO\u9519\u8BEF\uFF1A{1}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java:505
# args: rsp.getError()
volume\ backup\ metadata\ operation\ failure,\ because\ %s = \u5377\u5907\u4EFD\u5143\u6570\u636E\u64CD\u4F5C\u5931\u8D25\uFF0C\u539F\u56E0\u662F{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:586
# args: cmd.imgurl,cmd.uuid,ret.getError()
failed\ to\ download\ image[url\:\ %s]\ on\ backup\ storage[uuid\:\ %s],\ because\:\ %s = \u65E0\u6CD5\u4E0B\u8F7D\u955C\u50CF[URL\uFF1A{0}]\uFF08\u5728\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]\u4E0A\uFF09\uFF0C\u539F\u56E0\u662F\uFF1A{2}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:277
# args: url,rsp.getError()
unable\ to\ connect\ to\ SimpleHttpBackupStorage[url\:%s],\ because\ %s = \u65E0\u6CD5\u8FDE\u63A5\u5230SimpleHttpBackupStorage[url:{0}]\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:507
# args: iinv.getName()
Missing\ cert\ file\ for\ downloading\ image\:\ %s = \u4E0B\u8F7D\u955C\u50CF\u65F6\u8BC1\u4E66\u6587\u4EF6\u4E22\u5931

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:831
# args: 
No\ response = \u65E0\u54CD\u5E94

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:907
# args: ret.getError()
reclaim\ imagestore\ error,\ because\:%s = \u6536\u56DEimagestore\u9519\u8BEF\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:994
# args: self.getUuid(),ret.getError()
failed\ to\ set\ max\ capacity\ on\ image\ store[uuid\:%s],\ because\:\ %s = \u65E0\u6CD5\u8BBE\u7F6E\u955C\u50CF\u5B58\u50A8[uuid\uFF1A{0}]\u7684\u6700\u5927\u5BB9\u91CF\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1223
# args: msg.getImageUuid(),self.getUuid()
image[%s]\ not\ found\ on\ backup\ storage[%s] = \u5728\u5907\u4EFD\u5B58\u50A8[{1}]\u4E0A\u627E\u4E0D\u5230\u955C\u50CF[{0}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1134
# args: ret.getError()
failed\ to\ delete\ image\ package,\ because\:\ %s = \u65E0\u6CD5\u5220\u9664\u955C\u50CF\u5305\uFF0C\u56E0\u4E3A\uFF1A{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1158
# args: StringUtils.join(notOnBsImageUuids, ','),msg.getBackupStorageUuid()
some\ images\ [%s]\ are\ not\ exported\ on\ the\ backup\ storage[uuid\:\ %s] = \u67D0\u4E9B\u955C\u50CF[{0}]\u672A\u5728\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]\u4E0A\u5BFC\u51FA

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1192
# args: ret.getError()
failed\ to\ package\ exported\ images,\ because\ %s = \u65E0\u6CD5\u6253\u5305\u5BFC\u51FA\u7684\u955C\u50CF\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1234
# args: self.getUuid(),actualSize
the\ backup\ storage[uuid\:%s]\ has\ not\ enough\ capacity[%s]\ to\ export = \u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u6CA1\u6709\u8DB3\u591F\u7684\u5BB9\u91CF[{1}]\u7528\u4E8E\u5BFC\u51FA

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1393
# args: 
image\ store\ [%s]\ cannot\ add\ image,\ because\ it\ is\ used\ for\ backup\ remote = ImageStore[{0}]\u4E0D\u80FD\u6DFB\u52A0\u955C\u50CF\uFF0C\u56E0\u4E3A\u5B83\u5DF2\u7ECF\u88AB\u8FDC\u7A0B\u955C\u50CF\u4F7F\u7528

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1591
# args: 
commercial\ license\ is\ required\ to\ use\ ImageStore = \u4F7F\u7528ImageStore\u9700\u8981\u5546\u4E1A\u8BB8\u53EF\u8BC1

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1712
# args: self.getUuid(),resp.getUuid()
the\ uuid\ of\ imagestoreBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = \u955C\u50CF\u955C\u50CF\u670D\u52A1\u5668\u7684\u4EE3\u7406\u7684uuid\u53D1\u751F\u4E86\u6539\u53D8[\u671F\u671B: {0}\uFF0C\u5B9E\u9645: {1}]\uFF0C\u5F88\u6709\u53EF\u80FD\u4EE3\u7406\u88AB\u624B\u52A8\u91CD\u542F\u4E86\uFF0C\u9700\u8981\u91CD\u8FDE\u540C\u6B65\u72B6\u6001

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:125
# args: msg.getHostname()
hostname[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = \u7269\u7406\u673A\u540D[{0}]\u4E0D\u662F\u4E00\u4E2AIPv4\u7684\u5730\u5740\uFF0C\u800C\u662F\u4E00\u4E2A\u975E\u6CD5\u7684\u7269\u7406\u673A\u540D

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:60
# args: bsUuid,imageUuid
target\ backup\ storage[uuid\:%s]\ already\ contains\ the\ image\ [uuid\:%s] = \u76EE\u6807\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u5DF2\u5305\u542B\u955C\u50CF[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:79
# args: msg.getSrcBackupStorageUuid(),msg.getUuid()
source\ backup\ storage[%s]\ doesn't\ contain\ image[%s] = \u6E90\u955C\u50CF\u670D\u52A1\u5668[{0}]\u4E0D\u5305\u542B\u8BE5\u955C\u50CF[{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:94
# args: msg.getSrcBackupStorageUuid(),msg.getUuid()
src\ backupstorage[%s]\ doesn't\ contain\ image[%s] = SRC BackupStorage[{0}]\u4E0D\u5305\u542B\u955C\u50CF[{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:142
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ an\ image\ store\ backup\ storage[hostname\:%s] = \u91CD\u590D\u7684\u955C\u50CF\u670D\u52A1\u5668\u3002\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u955C\u50CF\u670D\u52A1\u5668[\u7269\u7406\u673A\u540D: {0}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:147
# args: 
file\ path\ needed = \u9700\u8981\u6587\u4EF6\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:151
# args: dir
absolute\ file\ path\ required\:\ %s = \u9700\u8981\u6587\u4EF6\u7684\u7EDD\u5BF9\u8DEF\u5F84\uFF1B{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:154
# args: 
the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = URL\u5305\u542B\u4E86\u4E00\u4E2A\u65E0\u6548\u7684\u76EE\u5F55[/dev or /proc or /sys]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:162
# args: dir
file\ path\ contains\ invalid\ character\:\ %s = \u6587\u4EF6\u8DEF\u5F84\u5305\u542B\u975E\u6CD5\u5B57\u7B26: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageExtension.java:193
# args: ps.getUuid()
cannot\ find\ a\ connected\ host\ in\ cluster\ to\ which\ PS\ [uuid\:\ %s]\ attached = \u5728PS[uuid\uFF1A{0}]\u8FDE\u63A5\u5230\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u5DF2\u8FDE\u63A5\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:108
# args: amsg.getUrl()
invalid\ url[%s],\ the\ url\ must\ be\ an\ absolute\ path\ starting\ with\ '/' = \u65E0\u6548\u7684url[{0}]\uFF0Curl\u5FC5\u987B\u662F\u4EE5'/'\u5F00\u5934\u7684\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:117
# args: hostname
existing\ SimpleHttpBackupStorage\ with\ hostname[%s]\ found = \u5B58\u5728\u7269\u7406\u673A\u540D\u4E3A[{0}]\u7684\u7B80\u5355http\u955C\u50CF\u670D\u52A1\u5668

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:228
# args: 
sync\ status\ failed. = \u540C\u6B65\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:343
# args: 
failed\ to\ get\ task\ reply! = \u83B7\u53D6\u4EFB\u52A1\u56DE\u590D\u5931\u8D25\uFF01

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:841
# args: rsp.getError()
delete\ image\ metadata\ file\ failed\:\ %s = \u5220\u9664\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\u5931\u8D25: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:397
# args: bsUuid
AddImage\ is\ forbidden\ in\ Disaster\ BS\:\ [%s] = \u5728Disaster\u955C\u50CF\u670D\u52A1\u5668\u4E2D\u6DFB\u52A0\u955C\u50CF\u662F\u88AB\u7981\u6B62\u7684

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:770
# args: rsp.getBackupStorageMetaFileName()
Check\ image\ metadata\ file\:\ %s\ failed = \u68C0\u67E5\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6: {0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:594
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ \:\ %s\ failed = \u521B\u5EFA\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6: {0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:569
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ sync\ \:\ %s\ failed = \u540C\u6B65\u521B\u5EFA\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6{0}\u5931\u8D25\u4E86

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreImageStruct.java:80
# args: e.getMessage()
parse\ create\ time\ error\:\ %s = \u89E3\u6790\u521B\u5EFA\u65F6\u95F4\u51FA\u9519: {0}

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:111
# args: scheme,url
SftpBackupStorage\ doesn't\ support\ scheme[%s]\ in\ url[%s] = Sftp\u955C\u50CF\u670D\u52A1\u5668\u4E0D\u652F\u6301\u5728url[{1}]\u91CC\u5305\u542Bscheme[{0}]

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:242
# args: rsp.getError()
fail\ to\ cancel\ download\ image,\ because\ %s = \u65E0\u6CD5\u53D6\u6D88\u4E0B\u8F7D\u955C\u50CF\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:316
# args: self.getUuid(),ret.getUuid()
the\ uuid\ of\ sftpBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = Sftp\u955C\u50CF\u955C\u50CF\u670D\u52A1\u5668\u7684\u4EE3\u7406\u7684uuid\u53D1\u751F\u4E86\u6539\u53D8[\u671F\u671B: {0}\uFF0C\u5B9E\u9645: {1}]\uFF0C\u5F88\u6709\u53EF\u80FD\u4EE3\u7406\u88AB\u624B\u52A8\u91CD\u542F\u4E86\uFF0C\u9700\u8981\u91CD\u8FDE\u540C\u6B65\u72B6\u6001

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:70
# args: bsUuid
Please\ stop\ the\ vm\ before\ create\ volume\ template\ to\ sftp\ backup\ storage\ %s = \u8BF7\u5728\u521B\u5EFASFTP\u5907\u4EFD\u5B58\u50A8{0}\u7684\u5377\u6A21\u677F\u4E4B\u524D\u505C\u6B62\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:106
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ a\ sftp\ backup\ storage[hostname\:%s]\ existing = \u91CD\u590D\u7684\u955C\u50CF\u670D\u52A1\u5668\u3002\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u955C\u50CF\u670D\u52A1\u5668[\u7269\u7406\u673A\u540D: {0}]

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:554
# args: rsp.getBackupStorageMetaFileName()
check\ image\ metadata\ file\:\ %s\ failed = \u68C0\u67E5\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6: {0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:399
# args: rsp.getBackupStorageMetaFileName()
create\ image\ metadata\ file\ \:\ %s\ failed = \u521B\u5EFA\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6: {0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:559
# args: rsp.getBackupStorageMetaFileName()
image\ metadata\ file\:\ %s\ is\ not\ exist = \u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6: {0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:321
# args: vmUuid
host\ not\ found\ for\ VM\:\ %s = \u627E\u4E0D\u5230VM\u7684\u7269\u7406\u673A\uFF1A{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:241
# args: vmUuid
query-mirror\:\ host\ not\ found\ for\ VM[uuid\:%s] = \u67E5\u8BE2\u955C\u50CF\uFF1A\u627E\u4E0D\u5230VM[uuid\uFF1A{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:328
# args: hostUuid
libvirt\ on\ the\ host[uuid\:\ %s]\ not\ support\ to\ create\ cdp\ task,\ please\ check\ the\ version\ of\ libvirt. = \u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u7684libvirt\u4E0D\u652F\u6301\u521B\u5EFACDP\u4EFB\u52A1\uFF0C\u8BF7\u68C0\u67E5libvirt\u7684\u7248\u672C\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:334
# args: hostUuid
qemu\ on\ the\ host[uuid\:\ %s]\ not\ support\ to\ create\ cdp\ task,\ please\ check\ the\ version\ of\ qemu. = \u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u7684QEMU\u4E0D\u652F\u6301\u521B\u5EFACDP\u4EFB\u52A1\uFF0C\u8BF7\u68C0\u67E5QEMU\u7684\u7248\u672C\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:366
# args: vmUuid
The\ QEMU\ version\ running\ on\ the\ VM[uuid\:%s]\ does\ not\ support\ mirrorBitmap. = \u5728VM[uuid\uFF1A{0}]\u4E0A\u8FD0\u884C\u7684QEMU\u7248\u672C\u4E0D\u652F\u6301MirrorBitMap\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:458
# args: vol.getUuid(),reply.getError()
cannot\ ask\ primary\ storage[uuid\:%s]\ for\ volume\ snapshot\ capability,\ see\ detail\ [%s] = \u65E0\u6CD5\u5411\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\u8BF7\u6C42\u5377\u5FEB\u7167\u529F\u80FD\uFF0C\u8BF7\u53C2\u9605\u8BE6\u7EC6\u4FE1\u606F[{1}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:320
# args: msg.getTaskType()
unexpected\ task\ type\:\ %s = \u610F\u5916\u7684\u4EFB\u52A1\u7C7B\u578B\uFF1A{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:127
# args: 
CDP\ task\ is\ still\ enabled = CDP\u4EFB\u52A1\u4ECD\u5904\u4E8E\u542F\u7528\u72B6\u6001

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:152
# args: s,OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS)
invalid\ time\ string\:\ %s,\ should\ be\ in\ ISO\ offset\ format,\ for\ example\:\ %s = \u65E0\u6548\u7684\u65F6\u95F4\u5B57\u7B26\u4E32\uFF1A{0}\uFF0C\u5E94\u4E3AISO\u504F\u79FB\u683C\u5F0F\uFF0C\u4F8B\u5982\uFF1A{1}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:189
# args: state
VM\ is\ not\ stopped,\ current\ state\:\ %s = \u4E91\u4E3B\u673A\u672A\u505C\u6B62\uFF0C\u5F53\u524D\u72B6\u6001\uFF1A{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:233
# args: volumeUuid,msg.getVmInstanceUuid()
Shared\ volume[%s]\ from\ VM[uuid]\ is\ still\ used\ by\ other\ VMs. = \u4E91\u4E3B\u673A[uuid]\u4E2D\u7684\u5171\u4EAB\u4E91\u76D8[{0}]\u4ECD\u7531\u5176\u4ED6\u4E91\u4E3B\u673A\u4F7F\u7528\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:243
# args: msg.getUuid()
Task\ not\ found[uuid\:\ %s] = \u672A\u627E\u5230\u4EFB\u52A1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:248
# args: msg.getUuid(),taskVO.getTaskType()
Unexpected\ task\ type[uuid\:\ %s,\ type\:\ %s] = \u610F\u5916\u7684\u4EFB\u52A1\u7C7B\u578B[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:261
# args: refVO.getResourceUuid()
VM[uuid\:\ %s]\ already\ deleted = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u5DF2\u5220\u9664

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:275
# args: state
Unexpected\ VM\ state\:\ %s = \u610F\u5916\u7684VM\u72B6\u6001\uFF1A{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:283
# args: taskVO.getBackupStorageUuid()
Backup\ storage\ not\ found[uuid\:\ %s] = \u672A\u627E\u5230\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:288
# args: taskVO.getBackupStorageUuid()
Backup\ storage[uuid\:\ %s]\ is\ disabled = \u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:293
# args: taskVO.getBackupStorageUuid()
Backup\ storage[uuid\:\ %s]\ is\ not\ connected = \u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{0}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:309
# args: refVO.getResourceUuid()
The\ vm[uuid\:\ %s]\ has\ already\ created\ a\ backup\ job,\ cannot\ enable\ the\ cdp\ task\ at\ the\ same\ time. = VM[uuid\uFF1A{0}]\u5DF2\u521B\u5EFA\u5907\u4EFD\u4F5C\u4E1A\uFF0C\u65E0\u6CD5\u540C\u65F6\u542F\u7528CDP\u4EFB\u52A1\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:334
# args: s2,v2,s1,v1
'%s'(%d)\ should\ be\ larger\ than\ '%s'(%d) = \u201C{0}\u201D\uFF08{1}\uFF09\u5E94\u5927\u4E8E\u201C{2}\u201D\uFF08{3}\uFF09

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:340
# args: "hourlyRpSinceDay"
mandatory\ args\ missing\:\ %s = \u7F3A\u5C11\u5FC5\u9700\u7684\u53C2\u6570\uFF1A{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:376
# args: vmUuids.size()
expected\ one\ VM\ uuid,\ but\ given\ %d = \u5E94\u4E3A\u4E00\u4E2AVM uuid\uFF0C\u4F46\u7ED9\u5B9A\u4E86{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:380
# args: vmUuids.get(0)
resource\ [uuid\:\ %s]\ is\ not\ VM = \u8D44\u6E90[uuid\uFF1A{0}]\u4E0D\u662FVM

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:402
# args: msg.getTargetResourceUuid()
The\ vm[uuid\:\ %s]\ has\ already\ created\ a\ cdp\ task,\ cannot\ create\ the\ backup\ job\ at\ the\ same\ time. = VM[uuid\uFF1A{0}]\u5DF2\u521B\u5EFACDP\u4EFB\u52A1\uFF0C\u65E0\u6CD5\u540C\u65F6\u521B\u5EFA\u5907\u4EFD\u4F5C\u4E1A\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java:243
# args: groupId
No\ recovery\ point\ found\ with\ grpId\ %d = \u627E\u4E0D\u5230\u5177\u6709grpid{0}\u7684\u6062\u590D\u70B9

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java:717
# args: backupStorageUuid
hostname\ not\ found\ for\ backup\ storage[uuid\:\ %s] = \u672A\u627E\u5230\u5907\u4EFD\u5B58\u50A8\u7684\u7269\u7406\u673A\u540D[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1921
# args: msg.getUuid()
CDP\ task[uuid\:\ %s]\ not\ found = \u672A\u627E\u5230CDP\u4EFB\u52A1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:179
# args: msg.getMaxCapacity(),oldUsedCapacity
Invalid\ max\ capacity[%d],\ current\ usage\ is\ %d = \u6700\u5927\u5BB9\u91CF[{0}]\u65E0\u6548\uFF0C\u5F53\u524D\u4F7F\u7528\u91CF\u4E3A{1}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:269
# args: vmUuid,tasks.get(0)
VM\ [uuid\:\ %s]\ have\ been\ protected\ by\ task\:\ %s = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u5DF2\u53D7\u4EFB\u52A1{1}\u4FDD\u62A4

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:715
# args: 
revert\ job\ cancelled = \u5DF2\u53D6\u6D88\u8FD8\u539F\u4F5C\u4E1A

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:781
# args: 
create-vm\ job\ cancelled = \u521B\u5EFA\u4E91\u4E3B\u673A\u4F5C\u4E1A\u5DF2\u53D6\u6D88

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1181
# args: taskVO.getUuid()
CDP\ task[uuid\:\ %s]\ has\ no\ VM\ attached = CDP\u4EFB\u52A1[uuid\uFF1A{0}]\u672A\u8FDE\u63A5VM

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1215
# args: taskVO.getUuid()
task[uuid\:%s]\ have\ been\ deleted = \u4EFB\u52A1[uuid\uFF1A{0}]\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1279
# args: taskUuid,maxCapacity,usedCapacity
CDP\ task[uuid\:%s]\ exceeded\ storage\ usage\:\ maximum\ %d,\ used\ %d. = CDP\u4EFB\u52A1[uuid\uFF1A{0}]\u8D85\u51FA\u4E86\u5B58\u50A8\u4F7F\u7528\u7387\uFF1A\u6700\u5927\u503C{1}\uFF0C\u5DF2\u4F7F\u7528{2}\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1728
# args: vmUuid
No\ CDP\ task\ found\ for\ VM\:\ %s = \u672A\u627E\u5230VM{0}\u7684CDP\u4EFB\u52A1

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1736
# args: vmUuid
No\ CDP\ backup\ storage\ found\ for\ VM\:\ %s = \u672A\u627E\u5230\u4E91\u4E3B\u673A{0}\u7684CDP\u5907\u4EFD\u5B58\u50A8

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1784
# args: hypervisorType
No\ CdpBackupFactory\ of\ type[%s]\ found = \u672A\u627E\u5230\u7C7B\u578B\u4E3A[{0}]\u7684CDPBackupFactory

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1815
# args: hostUuid
No\ hypervisor\ type\ for\ VM\ %s = \u4E91\u4E3B\u673A{0}\u6CA1\u6709\u4E91\u4E3B\u673A\u7BA1\u7406\u7A0B\u5E8F\u7C7B\u578B

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:2221
# args: msg.getVolume().getUuid()
The\ operation\ has\ volume[uuid\:\ %s]\ that\ will\ take\ chain\ type\ snapshot.\ Therefore,\ you\ could\ not\ do\ this\ operation\ when\ a\ CDP\ task\ is\ running\ on\ the\ VM\ instance. = \u8BE5\u64CD\u4F5C\u5177\u6709\u5C06\u521B\u5EFA\u94FE\u7C7B\u578B\u5FEB\u7167\u7684\u5377[uuid\uFF1A{0}]\u3002\u56E0\u6B64\uFF0C\u5F53CDP\u4EFB\u52A1\u5728VM\u5B9E\u4F8B\u4E0A\u8FD0\u884C\u65F6\uFF0C\u60A8\u65E0\u6CD5\u6267\u884C\u6B64\u64CD\u4F5C\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java:163
# args: 
Could\ not\ attach\ volume.The\ VM\ instance\ is\ running\ a\ CDP\ task.\ After\ the\ volume\ is\ attached,\ the\ capacity\ required\ for\ full\ backup\ will\ exceed\ the\ CDP\ task\ planned\ size.\ Please\ plan\ the\ size\ properly\ and\ try\ again. = \u65E0\u6CD5\u8FDE\u63A5\u5377\u3002VM\u5B9E\u4F8B\u6B63\u5728\u8FD0\u884CCDP\u4EFB\u52A1\u3002\u8FDE\u63A5\u5377\u540E\uFF0C\u5B8C\u6574\u5907\u4EFD\u6240\u9700\u7684\u5BB9\u91CF\u5C06\u8D85\u8FC7CDP\u4EFB\u52A1\u8BA1\u5212\u7684\u5927\u5C0F\u3002\u8BF7\u6B63\u786E\u89C4\u5212\u5927\u5C0F\uFF0C\u7136\u540E\u91CD\u8BD5\u3002

# at: src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java:187
# args: volume.getVmInstanceUuid(),volume.getUuid()
The\ VM[%s]\ for\ volume[%s]\ is\ running\ CDP,\ cannot\ resize\ now. = \u5377[{1}]\u7684VM[{0}]\u6B63\u5728\u8FD0\u884CCDP\uFF0C\u73B0\u5728\u65E0\u6CD5\u8C03\u6574\u5927\u5C0F\u3002

# at: src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java:88
# args: apiMessage.getCdpTaskUuid()
No\ VM\ found\ for\ CDP\ task[uuid\:\ %s] = \u672A\u627E\u5230CDP\u4EFB\u52A1[uuid\uFF1A{0}]\u7684VM

# at: src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java:119
# args: bsUuid
BackupStorage[uuid\:\ %s]\ already\ been\ deleted = BackupStorage[uuid\uFF1A{0}]\u5DF2\u5220\u9664

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:179
# args: 
no\ volume\ records\ found\ from\ VM\ backup = \u672A\u4ECE\u4E91\u4E3B\u673A\u5907\u4EFD\u4E2D\u627E\u5230\u5377\u8BB0\u5F55

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:138
# args: taskUuid
VM\ CDP\ task[uuid\:\ %s]\ not\ found = \u627E\u4E0D\u5230VM CDP\u4EFB\u52A1[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:147
# args: taskUuid
VM\ not\ found\ for\ CDP\ task[uuid\:\ %s] = \u672A\u627E\u5230CDP\u4EFB\u52A1[uuid\uFF1A{0}]\u7684VM

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:236
# args: taskUuid,msg.getGroupId()
multiple\ root\ volumes\ found\ from\ CDP\ backup\ %s\:%d = \u4ECECDP\u5907\u4EFD{0}\u4E2D\u627E\u5230\u591A\u4E2A\u6839\u5377\uFF1A{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:250
# args: taskUuid,msg.getGroupId()
cannot\ find\ root\ volume\ from\ CDP\ backup\ %s\:%d = \u65E0\u6CD5\u4ECECDP\u5907\u4EFD{0}\u4E2D\u627E\u5230\u6839\u5377\uFF1A{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:257
# args: taskUuid,msg.getGroupId()
root\ volume\ not\ found\ from\ CDP\ backup\ %s\:%d = \u672A\u4ECECDP\u5907\u4EFD{0}\u4E2D\u627E\u5230\u6839\u5377\uFF1A{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:118
# args: hostUuid,this.msg.getVmInstanceUuid()
recoverVm\:\ host[uuid\:\ %s]\ not\ found\ for\ VM[uuid\:\ %s] = \u672A\u627E\u5230VM[uuid\uFF1A{1}]\u7684RecoverVM\uFF1A\u7269\u7406\u673A[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:216
# args: uuids
multiple\ root\ volumes\ found\:\ %s = \u627E\u5230\u591A\u4E2A\u6839\u5377\uFF1A{0}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:792
# args: volumeUuid,installPath
volume[uuid\:\ %s]\ has\ unexpected\ path\:\ %s = \u5377[uuid\uFF1A{0}]\u5177\u6709\u610F\u5916\u8DEF\u5F84\uFF1A{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:718
# args: volumeUuid,oldVolumeSize
unexpected\ volume[uuid\:\ %s]\ size\:\ %d = \u610F\u5916\u5377[uuid\uFF1A{0}]\u5927\u5C0F\uFF1A{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:746
# args: volumeUuid,reply.getError().getDetails()
resize\ volume[uuid\:\ %s]\ failed\:\ %s = \u8C03\u6574\u5377[uuid\uFF1A{0}]\u5927\u5C0F\u5931\u8D25\uFF1A{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:377
# args: uuid,msg.getVmInstanceUuid()
volume\ %s\ contains\ in\ backup\ but\ detached\ from\ VM[uuid\:\ %s]\:\ you\ need\ to\ either\ attach\ it\ back\ or\ delete\ it = \u5377{0}\u5305\u542B\u5728\u5907\u4EFD\u4E2D\uFF0C\u4F46\u5DF2\u4ECEVM\u5206\u79BB[uuid\uFF1A{1}]\uFF1A\u60A8\u9700\u8981\u5C06\u5176\u91CD\u65B0\u8FDE\u63A5\u6216\u5C06\u5176\u5220\u9664

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:305
# args: 
no\ root\ volume\ found\ from\ VM\ backup = \u672A\u4ECE\u4E91\u4E3B\u673A\u5907\u4EFD\u4E2D\u627E\u5230\u6839\u5377

# at: src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java:145
# args: 
kvmagent\ restarted = KVMAGENT\u91CD\u65B0\u542F\u52A8

# at: src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java:164
# args: maxFailure
kvmagent\ no\ response\ %d\ times = KVMAgent\u65E0\u54CD\u5E94{0}\u6B21

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:117
# args: apiMessage.getHostUuid(),apiMessage.getBackupStorageUuid()
waiting\ host[uuid\:%s]\ and\ backupStorage[uuid\:%s]\ to\ be\ Connected... = \u6B63\u5728\u7B49\u5F85\u8981\u8FDE\u63A5\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]\u548C\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]..

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:72
# args: apiMessage.getVmInstanceUuid()
recoverVm\:\ host\ uuid\ is\ not\ provided\ and\ original\ host\ is\ not\ found\ for\ VM[uuid\:\ %s] = RecoverVM\uFF1A\u672A\u63D0\u4F9B\u7269\u7406\u673Auuid\uFF0C\u5E76\u4E14\u672A\u627E\u5230VM[uuid\uFF1A{0}]\u7684\u539F\u59CB\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:165
# args: vmUuid
No\ CDP\ task\ found\ for\ VM[uuid\:\ %s] = \u627E\u4E0D\u5230VM[uuid\uFF1A{0}]\u7684CDP\u4EFB\u52A1

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:174
# args: vmUuid,backupStorageUuid
CDP\ task\ for\ VM[uuid\:\ %s]\ is\ not\ found\ on\ BS[uuid\:\ %s] = \u5728BS[uuid\uFF1A{1}]\u4E0A\u627E\u4E0D\u5230VM[uuid\uFF1A{0}]\u7684CDP\u4EFB\u52A1

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:84
# args: msg.getPoolName()
operation\ failure,\ because\ the\ poolName[poolName\:%s]\ can\ not\ include\ unprintable\ ascii\ characters. = \u64CD\u4F5C\u5931\u8D25\uFF0C\u56E0\u4E3Apool\u540D\u79F0[poolName:{0}]\u4E0D\u80FD\u5305\u542B\u4E2D\u6587\u548C\u7279\u6B8A\u5B57\u7B26

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:98
# args: duplicatePoolUuid
Ceph\ pool[uuid\:%s]\ with\ this\ name\ is\ already\ added\ into\ ZStack\ and\ used\ elsewhere,\ cannot\ reuse\ the\ ceph\ pool. = \u6C60\u540D\u79F0\u4E3A\u6B64\u7684\u6269\u5C55\u6C60[uuid:{0}]\u5DF2\u7ECF\u88AB\u6DFB\u52A0\u8FDB ZStack \u4E86\uFF0C\u5DF2\u505A\u5B83\u7528\uFF0C\u4E0D\u80FD\u590D\u7528\u8BE5\u6269\u5C55\u6C60

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:93
# args: msg.getPoolName(),duplicatePoolUuid
creation\ failure,\ duplicate\ poolName[%s].\ There\ has\ been\ a\ pool[uuid\:%s]\ with\ the\ same\ name\ existing. = \u521B\u5EFA\u5931\u8D25\uFF0C\u91CD\u590D\u7684\u6C60\u540D\u79F0[{0}]\u3002\u5DF2\u7ECF\u6709\u4E00\u4E2A\u76F8\u540C\u540D\u79F0\u7684\u6269\u5C55\u6C60[uuid:{1}]\u5B58\u5728

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:126
# args: existing
cannot\ add\ ceph\ primary\ storage,\ there\ has\ been\ some\ ceph\ primary\ storage\ using\ mon[hostnames\:%s] = \u65E0\u6CD5\u6DFB\u52A0\u5206\u5E03\u5F0F\u5B58\u50A8\uFF0C\u4E00\u5B9A\u6709\u67D0\u4E9B\u5206\u5E03\u5F0F\u5B58\u50A8\u4F7F\u7528\u4E86mon[\u7269\u7406\u673A\u540D: {0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:137
# args: uri.getHostname()
Cannot\ add\ same\ host[%s]\ in\ mons = \u5728mon\u4E2D\u65E0\u6CD5\u6DFB\u52A0\u76F8\u540C\u7684\u7269\u7406\u673A[{0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:163
# args: 
Adding\ the\ same\ Mon\ node\ is\ not\ allowed = \u6DFB\u52A0\u76F8\u540C\u7684Mon\u8282\u70B9\u4E0D\u88AB\u5141\u8BB8

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:202
# args: monUrl,MON_URL_FORMAT
invalid\ monUrl[%s].\ A\ valid\ url\ is\ in\ format\ of\ %s = \u65E0\u6548\u7684monURL[{0}]\u3002\u6709\u6548URL\u7684\u683C\u5F0F\u4E3A{1}

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:209
# args: 
dataVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = DataVolumePoolName\u53EF\u4EE5\u4E3A\u7A7A\uFF0C\u4F46\u4E0D\u80FD\u4E3A\u7A7A\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:214
# args: 
rootVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = RootVolumePoolName\u53EF\u4EE5\u4E3A\u7A7A\uFF0C\u4F46\u4E0D\u80FD\u4E3A\u7A7A\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:219
# args: 
imageCachePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = ImageCachePoolName\u53EF\u4EE5\u4E3A\u7A7A\uFF0C\u4F46\u4E0D\u80FD\u4E3A\u7A7A\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:242
# args: existing
cannot\ add\ ceph\ backup\ storage,\ there\ has\ been\ some\ ceph\ backup\ storage\ using\ mon[hostnames\:%s] = \u65E0\u6CD5\u6DFB\u52A0Ceph\u955C\u50CF\u670D\u52A1\u5668\u76D1\u63A7\u8282\u70B9\uFF0C\u5DF2\u7ECF\u6709\u67D0\u4E2ACeph\u955C\u50CF\u670D\u52A1\u5668\u76D1\u63A7\u8282\u70B9\u4F7F\u7528mon[\u7269\u7406\u673A\u540D: {0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:250
# args: 
poolName\ is\ required\ when\ importImages\ is\ true = \u5F53importImages\u4E3A\u771F\u7684\u65F6\u5019\u5FC5\u987B\u586B\u5199\u6C60\u540D

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:248
# args: 
poolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = PoolName\u53EF\u4EE5\u4E3A\u7A7A\uFF0C\u4F46\u4E0D\u80FD\u4E3A\u7A7A\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:269
# args: 
Third-party\ ceph\ cannot\ mixed\ with\ other\ primary\ storage. = \u7B2C\u4E09\u65B9Ceph\u4E0D\u80FD\u4E0E\u5176\u4ED6\u4E3B\u5B58\u50A8\u6DF7\u5408\u3002

# at: src/main/java/org/zstack/storage/ceph/CephMonBase.java:66
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ SSH\ port\ or\ unstable\ network\ environment = \u8BE5\u95EE\u9898\u53EF\u80FD\u662F\u7531\u4E0D\u6B63\u786E\u7684\u7528\u6237\u540D\u3001\u5BC6\u7801\u3001SSH\u7AEF\u53E3\u6216\u8005\u4E0D\u7A33\u5B9A\u7684\u7F51\u7EDC\u73AF\u5883\u5F15\u8D77\u7684

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:768
# args: path
all\ monitors\ cannot\ execute\ http\ call[%s] = \u6240\u6709\u7684\u76D1\u63A7\u8282\u70B9\u90FD\u65E0\u6CD5\u6267\u884Chttp call[{0}]

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:866
# args: msg.getHostname(),msg.getBackupStorageUuid()
CephMon[hostname\:%s]\ not\ found\ on\ backup\ storage[uuid\:%s] = \u5728\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]\u4E0A\u627E\u4E0D\u5230cephmon[\u7269\u7406\u673A\u540D\uFF1A{0}]

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1386
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ backup\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ backup\ storage = \u6709\u53E6\u5916\u4E00\u4E2ACeph\u955C\u50CF\u670D\u52A1\u5668\u76D1\u63A7\u8282\u70B9[name:{0}, uuid:{1}]\u6709\u76F8\u540C\u7684FSID[{2}]\uFF0C\u4F60\u4E0D\u80FD\u6DFB\u52A0\u540C\u6837\u7684CEPH\u4E3A\u4E24\u4E2A\u4E0D\u540C\u7684\u955C\u50CF\u670D\u52A1\u5668

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1756
# args: msg.getImageUuid(),self.getUuid(),self.getName()
image[uuid\:\ %s]\ is\ not\ on\ backup\ storage[uuid\:%s,\ name\:%s] = \u955C\u50CF[uuid\uFF1A{0}]\u4E0D\u5728\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}\uFF0C\u540D\u79F0\uFF1A{2}]\u4E0A

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:97
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ backup\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = \u65E0\u6CD5\u66F4\u65B0Ceph\u955C\u50CF\u670D\u52A1\u5668\u76D1\u63A7\u8282\u70B9\u76D1\u63A7\u8282\u70B9[uuid:{0}]\uFF0C\u4ED6\u5DF2\u7ECF\u88AB\u5220\u9664\u3002\u8FD9\u4E2A\u9519\u8BEF\u53EF\u4EE5\u88AB\u5FFD\u7565

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:463
# args: getSelf().getBackupStorageUuid()
Ceph\ bs[uuid\=%s]\ pool\ name\ not\ found = \u627E\u4E0D\u5230Ceph BS[uuid={0}]\u6C60\u540D\u79F0

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4126
# args: base.getSelf().getHostname(),fsid,getSelf().getFsid()
the\ mon[ip\:%s]\ returns\ a\ fsid[%s]\ different\ from\ the\ current\ fsid[%s]\ of\ the\ cep\ cluster,are\ you\ adding\ a\ mon\ not\ belonging\ to\ current\ cluster\ mistakenly? = MON[IP\uFF1A{0}]\u8FD4\u56DE\u7684FSID[{1}]\u4E0ECEP\u96C6\u7FA4\u7684\u5F53\u524DFSID[{2}]\u4E0D\u540C\uFF0C\u60A8\u662F\u5426\u9519\u8BEF\u5730\u6DFB\u52A0\u4E86\u4E0D\u5C5E\u4E8E\u5F53\u524D\u96C6\u7FA4\u7684MON\uFF1F

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1520
# args: backupStorage.getUuid(),backupStorage.getName(),bsFsid,self.getUuid(),self.getName(),getSelf().getFsid()
the\ backup\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s]\ is\ not\ in\ the\ same\ ceph\ cluster\ with\ the\ primary\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s] = \u955C\u50CF\u670D\u52A1\u5668[uuid:{0}, name:{1}, fsid:{2}]\u548C\u4E3B\u5B58\u50A8[uuid:{3}, name:{4}, fsid:{5}]\u4E0D\u5728\u540C\u4E00\u4E2Aceph\u96C6\u7FA4\u4E2D

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2588
# args: psUuid,bsUuid
fsid\ is\ not\ same\ between\ ps[%s]\ and\ bs[%s],\ create\ template\ is\ forbidden. = \u5728\u4E3B\u5B58\u50A8\u548C\u955C\u50CF\u670D\u52A1\u5668\u4E2Dfsid\u4E0D\u662F\u4E00\u6837\u7684\uFF0C\u7981\u6B62\u521B\u5EFA\u6A21\u7248\u3002

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3410
# args: self.getUuid()
ceph\ primary\ storage[uuid\:%s]\ may\ have\ been\ deleted. = \u5206\u5E03\u5F0F\u5B58\u50A8[uuid:{0}]\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3394
# args: self.getUuid()
unable\ to\ connect\ to\ the\ ceph\ primary\ storage[uuid\:%s],\ failed\ to\ connect\ all\ ceph\ monitors. = \u65E0\u6CD5\u8FDE\u63A5\u5230\u5206\u5E03\u5F0F\u5B58\u50A8[uuid:{0}]\uFF0C\u6240\u6709\u76D1\u63A7\u8282\u70B9\u5747\u8FDE\u63A5\u5931\u8D25

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3507
# args: 
the\ fsid\ returned\ by\ mons\ are\ mismatching,\ it\ seems\ the\ mons\ belong\ to\ different\ ceph\ clusters\:\n = \u76D1\u63A7\u8282\u70B9\u8FD4\u56DE\u7684fsid\u4E0D\u5339\u914D\uFF0C\u4F3C\u4E4E\u76D1\u63A7\u8282\u70B9\u5C5E\u4E8E\u4E0D\u540C\u7684ceph\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3525
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ primary\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ primary\ storage = \u6709\u53E6\u5916\u4E00\u4E2A\u5206\u5E03\u5F0F\u5B58\u50A8[name:{0}, uuid:{1}] \u6709\u76F8\u540C\u7684 FSID[{2}]\uFF0C\u4F60\u4E0D\u80FD\u6DFB\u52A0\u76F8\u540C\u7684CEPH\u8BBE\u7F6E\u5230\u4E24\u4E2A\u4E0D\u540C\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3783
# args: self.getUuid(),self.getName(),mon.getSelf().getUuid(),res.error
the\ ceph\ primary\ storage[uuid\:%s,\ name\:%s]\ is\ down,\ as\ one\ mon[uuid\:%s]\ reports\ an\ operation\ failure[%s] = \u5206\u5E03\u5F0F\u5B58\u50A8[uuid:{0}, name:{1}]\u5173\u95ED\uFF0C\u56E0\u4E3A\u4E00\u4E2Amon[uuid:{2}]\u62A5\u544A\u4E86\u4E00\u4E2A\u64CD\u4F5C\u5931\u8D25[{3}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4697
# args: 
operation\ error,\ because\:\ failed\ to\ get\ response = \u64CD\u4F5C\u9519\u8BEF\uFF0C\u539F\u56E0\uFF1A\u65E0\u6CD5\u83B7\u53D6\u54CD\u5E94

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4744
# args: 
backing\ up\ snapshots\ to\ backup\ storage\ is\ a\ depreciated\ feature,\ which\ will\ be\ removed\ in\ future\ version = \u5C06\u5FEB\u7167\u5907\u4EFD\u5230\u5907\u4EFD\u5B58\u50A8\u662F\u4E00\u9879\u8FC7\u65F6\u7684\u529F\u80FD\uFF0C\u5728\u672A\u6765\u7248\u672C\u4E2D\u5C06\u88AB\u5220\u9664

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4915
# args: volume.getUuid(),volume.getRootImageUuid()
cannot\ reinit\ rootvolume\ [%s]\ because\ image\ [%s]\ has\ been\ deleted\ and\ imagecache\ cannot\ be\ found = \u65E0\u6CD5\u91CD\u65B0\u521D\u59CB\u5316RootVolume[{0}]\uFF0C\u56E0\u4E3A\u955C\u50CF[{1}]\u5DF2\u88AB\u5220\u9664\u5E76\u4E14\u627E\u4E0D\u5230ImageCache

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4950
# args: ImageStatus.Ready.toString()
Because\ image\ status\ is\ not\ %s = \u56E0\u4E3A\u955C\u50CF\u72B6\u6001\u4E0D\u662F{0}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4947
# args: 
Because\ the\ image\ is\ currently\ inaccessible,\ possibly\ due\ to\ a\ previous\ volume\ storage\ migration = \u56E0\u4E3A\u955C\u50CF\u5F53\u524D\u4E0D\u53EF\u8BBF\u95EE\uFF0C\u53EF\u80FD\u662F\u7531\u4E8E\u4E4B\u524D\u7684\u5377\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4953
# args: volume.getRootImageUuid(),getSelf().getUuid(),cause
cannot\ find\ backupstorage\ to\ download\ image\ [%s]\ to\ primarystorage\ [%s].\ %s = \u627E\u4E0D\u5230\u7528\u4E8E\u5C06\u955C\u50CF[{0}]\u4E0B\u8F7D\u5230\u4E3B\u5B58\u50A8[{1}]\u7684\u5907\u4EFD\u5B58\u50A8\u3002{2}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:5653
# args: 
allocated\ url\ not\ found = \u672A\u627E\u5230\u5206\u914D\u7684URL

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:5658
# args: allocatedUrl
invalid\ allocated\ url\:%s = \u5206\u914D\u7684URL\u65E0\u6548\uFF1A{0}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:396
# args: vol.getPrimaryStorageUuid()
cannot\ find\ any\ Connected\ ceph\ mon\ for\ the\ primary\ storage[uuid\:%s] = \u65E0\u6CD5\u4E3A\u5206\u5E03\u5F0F\u5B58\u50A8[uuid:{0}]\u627E\u5230\u4E00\u53F0\u5904\u4E8EConnected\u72B6\u6001\u7684\u7684\u76D1\u63A7\u8282\u70B9

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:838
# args: targetCephPoolName,cephPoolName
ceph\ pool\ conflict,\ the\ ceph\ pool\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ ceph\ pool\ specified\ in\ the\ creation\ parameter\ is\ %s = Ceph\u6C60\u51B2\u7A81\uFF0C\u7531\u5B9E\u4F8B\u63D0\u4F9B\u7684Ceph\u6C60\u6307\u5B9A\u4E3A{0}\uFF0C\u800C\u5728\u521B\u5EFA\u53C2\u6570\u4E2D\u6307\u5B9A\u7684Ceph\u6C60\u4E3A{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:964
# args: targetCephPoolName,cephPoolName
ceph\ pool\ conflict,\ the\ ceph\ pool\ specified\ by\ the\ disk\ offering\ is\ %s,\ and\ the\ ceph\ pool\ specified\ in\ the\ creation\ parameter\ is\ %s = Ceph\u6C60\u51B2\u7A81\uFF0C\u78C1\u76D8\u4EA7\u54C1\u6307\u5B9A\u7684Ceph\u6C60\u4E3A{0}\uFF0C\u800C\u521B\u5EFA\u53C2\u6570\u4E2D\u6307\u5B9A\u7684Ceph\u6C60\u4E3A{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1217
# args: rootVolume.getInstallPath(),reply.getError().getDetails()
get\ rootVolume[%s]\ rbd\ image\ watchers\ fail,\ %s = \u67E5\u8BE2\u4E91\u76D8[{0}] rbd image watchers\u5931\u8D25\uFF0C{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1233
# args: msg.getVolumeUuid(),installPath
rootVolume[%s]\ is\ already\ in\ use(ceph\ rbd\ image[%s]\ already\ has\ watchers),\ in\ order\ to\ prevent\ brain\ splitting,\ Starting\ VM\ is\ prohibited. = \u4E91\u76D8[{0}]\u6B63\u5728\u4F7F\u7528\u4E2D(ceph rbd \u955C\u50CF[{1}]\u5B58\u5728watchers)\uFF0C\u4E3A\u4E86\u9632\u6B62\u4E91\u4E3B\u673A\u8111\u88C2\uFF0C\u7981\u6B62\u542F\u52A8\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1341
# args: poolName
cannot\ find\ cephPrimaryStorage\ pool[poolName\=%s] = \u627E\u4E0D\u5230CephPrimaryStorage\u6C60[PoolName={0}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1351
# args: poolName,volumeSize
cephPrimaryStorage\ pool[poolName\=%s]\ available\ virtual\ capacity\ not\ enough\ for\ size\ %s = CephPrimary\u5B58\u50A8\u6C60[PoolName={0}]\u53EF\u7528\u865A\u62DF\u5BB9\u91CF\u4E0D\u8DB3\uFF0C\u65E0\u6CD5\u6EE1\u8DB3\u5927\u5C0F{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1399
# args: psUuid,purpose
cannot\ allocate\ pool\ for\ primaryStorage[%s],\ purpose\:\ %s = \u65E0\u6CD5\u4E3A\u4E3B\u5B58\u50A8[{0}]\u5206\u914D\u6C60\uFF0C\u76EE\u7684\uFF1A{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:93
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ primary\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = \u4E0D\u80FD\u66F4\u65B0\u4E00\u53F0\u5DF2\u7ECF\u88AB\u5220\u9664\u7684Ceph\u4E3B\u5B58\u50A8\u76D1\u63A7\u8282\u70B9[uuid:{0}]\uFF0C\u8FD9\u4E2A\u9519\u8BEF\u53EF\u88AB\u5FFD\u7565

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:471
# args: primaryStorageUuid
Ceph\ ps[uuid\=%s]\ root\ pool\ name\ not\ found = \u627E\u4E0D\u5230Ceph PS[uuid={0}]\u6839\u6C60\u540D\u79F0

# at: src/main/java/org/zstack/storage/ceph/primary/CephRequiredUrlParser.java:32
# args: 
invalid\ uri,\ correct\ example\ is\ ceph\://$POOLNAME/$VOLUMEuuid\ or\ volume\://$VOLUMEuuid = URI\u65E0\u6548\uFF0C\u6B63\u786E\u793A\u4F8B\u4E3Aceph\uFF1A//$poolName/$volumeUuid\u6216volume\uFF1A//$volumeUuid

# at: src/main/java/org/zstack/storage/ceph/primary/CephStorageAttachKvmClusterMetric.java:19
# args: 
Can\ not\ attach\ third-party\ ceph\ with\ token\ into\ kvm\ cluster. = \u65E0\u6CD5\u4F7F\u7528\u4EE4\u724C\u5C06\u7B2C\u4E09\u65B9Ceph\u8FDE\u63A5\u5230KVM\u96C6\u7FA4\u3002

# at: src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java:168
# args: poolUuid,size,originAvailableCapacity
required\ ceph\ pool[uuid\:%s]\ cannot\ satisfy\ conditions\ [availableSize\ >\ %s\ bytes],\ current\ available\ size\ %s = \u6240\u9700\u7684Ceph\u6C60[uuid\uFF1A{0}]\u65E0\u6CD5\u6EE1\u8DB3\u6761\u4EF6[AvailableSize>{1}\u5B57\u8282]\uFF0C\u5F53\u524D\u53EF\u7528\u5927\u5C0F{2}

# at: src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java:196
# args: poolUuid
cannot\ find\ ceph\ pool\ [%s]\ related\ osdgroup = \u627E\u4E0D\u5230Ceph\u6C60[{0}]\u76F8\u5173\u7684OSDGroup

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:95
# args: 
no\ candidate\ host\ with\ the\ scsi\ lun\ with\ enough\ cpu\ /\ memory\ or\ Enabled/Connected\ status = \u9700\u8981\u7684lun\u6240\u5728\u7684\u7269\u7406\u673A\u90FD\u4E0D\u6EE1\u8DB3cpu / memory \u4EE5\u53CA\u7269\u7406\u673A\u72B6\u6001\u7684\u6761\u4EF6

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:54
# args: firstScsiLunVO.getUuid(),scsiLunVO.getUuid()
scsi\ lun[uuid\:\ %s]\ and\ [uuid\:\ %s]\ does\ not\ has\ a\ common\ host = SCSI Lun[uuid\uFF1A{0}]\u548C[uuid\uFF1A{1}]\u6CA1\u6709\u5171\u540C\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:59
# args: scsiLunVO.getUuid()
scsi\ lun[uuid\:\ %s]\ is\ in\ disabled\ state = SCSI Lun[uuid\uFF1A{0}]\u5904\u4E8E\u7981\u7528\u72B6\u6001

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:150
# args: scsiLunVO.getWwid(),refVO.getVmInstanceUuid()
scsi\ lun[wwid\:\ %s]\ has\ been\ attached\ to\ vm\ instance\ %s = SCSI Lun[WWID\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230VM\u5B9E\u4F8B{1}

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:86
# args: msg.getIp(),msg.getPort()
iSCSI\ server[ip\:\ %s,\ port\:\ %s]\ already\ exists = iSCSI\u670D\u52A1\u5668[IP\uFF1A{0}\uFF0C\u7AEF\u53E3\uFF1A{1}]\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:91
# args: msg.getIp()
iSCSI\ server\ ip\:\ %s\ is\ not\ valid = iSCSI\u670D\u52A1\u5668IP\uFF1A{0}\u65E0\u6548

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:100
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ already\ attached\ to\ cluster[uuid\:\ %s] = iSCSI\u670D\u52A1\u5668[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u96C6\u7FA4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:110
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ not\ attached\ to\ cluster[uuid\:\ %s] = iSCSI\u670D\u52A1\u5668[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230\u96C6\u7FA4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:121
# args: msg.getUuid(),clusterUuid
iSCSI\ server[uuid\:\ %s]\ still\ attached\ to\ cluster[uuid\:\ %s] = iSCSI\u670D\u52A1\u5668[uuid\uFF1A{0}]\u4ECD\u8FDE\u63A5\u5230\u96C6\u7FA4[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:171
# args: VmInstanceUuid
please\ umount\ all\ block\ devices\ of\ the\ vm[%s]\ and\ try\ again = \u8BF7\u5378\u8F7D\u4E91\u4E3B\u673A[{0}]\u7684\u6240\u6709\u5757\u8BBE\u5907\uFF0C\u7136\u540E\u91CD\u8BD5

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1501
# args: lunVO.getWwid(),msg.getVmInstanceUuid()
scsi\ lun[wwid\:%s]\ has\ been\ attached\ into\ the\ vm[%s] = SCSI Lun[WWID\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1508
# args: msg.getUuid(),vmInstanceVO.getState(),allowedVmOperationStates
vm\ instance[%s]\ state\ [%s]\ not\ in\ allowed\ state[%s]\ for\ operation = VM\u5B9E\u4F8B[{0}]\u72B6\u6001[{1}]\u4E0D\u5904\u4E8E\u64CD\u4F5C\u7684\u5141\u8BB8\u72B6\u6001[{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1517
# args: msg.getUuid(),vmInstanceVO.getHostUuid(),msg.getUuid()
vm\ instance[uuid\:\ %s]\ host[uuid\:\ %s]\ not\ attached\ scsi\ lun[uuid\:\ %s] = \u4E91\u4E3B\u673A\u5B9E\u4F8B[uuid\uFF1A{0}]\u7269\u7406\u673A[uuid\uFF1A{1}]\u672A\u8FDE\u63A5scsi lun[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1576
# args: msg.getVmInstanceUuid(),vmInstanceVO.getState(),allowedVmOperationStates
vm\ instance[%s]\ state[%s]\ not\ in\ allowed\ state[%s]\ for\ operation = VM\u5B9E\u4F8B[{0}]\u72B6\u6001[{1}]\u4E0D\u5904\u4E8E\u64CD\u4F5C\u7684\u5141\u8BB8\u72B6\u6001[{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1585
# args: msg.getVmInstanceUuid(),hostVO.getUuid(),msg.getUuid()
vm\ instance[%s]\ host[uuid\:\ %s]\ not\ attached\ scsi\ lun[uuid\:\ %s] = \u4E91\u4E3B\u673A\u5B9E\u4F8B[{0}]\u7269\u7406\u673A[uuid\uFF1A{1}]\u672A\u8FDE\u63A5SCSI Lun[uuid\uFF1A{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1738
# args: msg.getUuid(),vmUuids
SCSI\ LUN[%s]\ is\ attached\ to\ VM\ [%s] = SCSI Lun[{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1748
# args: msg.getUuid(),msg.getHostUuid()
SCSI\ LUN[%s]\ record\ not\ found\ on\ host\ [%s] = \u5728\u7269\u7406\u673A[{1}]\u4E0A\u672A\u627E\u5230SCSI Lun[{0}]\u8BB0\u5F55

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1760
# args: hvType,msg.getHostUuid()
unexpected\ hypervisor\ type[%s]\ for\ host\ [%s] = \u7269\u7406\u673A[{1}]\u7684\u610F\u5916\u4E91\u4E3B\u673A\u76D1\u63A7\u7A0B\u5E8F\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:2024
# args: serial
different\ disk\ types\ are\ found\ in\ different\ hosts\ for\ lun[serial\:%s],\ unable\ to\ attach\ it\ to\ cluster = \u5728\u4E0D\u540C\u7684\u7269\u7406\u673A\u4E2D\u4E3ALun[serial\uFF1A{0}]\u627E\u5230\u4E0D\u540C\u7684\u78C1\u76D8\u7C7B\u578B\uFF0C\u65E0\u6CD5\u5C06\u5176\u8FDE\u63A5\u5230\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1975
# args: scannedServer.getKey(),JSONObjectUtil.toJsonString(scannedTargets),hostVO.getUuid(),JSONObjectUtil.toJsonString(returnValue.getIscsiTargets())
different\ iscsi\ configuration\ were\ found\ on\ host[uuid\:%s,\ targets\:%s]and\ host[uuid\:%s,\ targets\:%s] = \u5728\u7269\u7406\u673A[uuid\uFF1A{0}\uFF0C\u76EE\u6807\uFF1A{1}]\u548C\u7269\u7406\u673A[uuid\uFF1A{2}\uFF0C\u76EE\u6807\uFF1A{3}]\u4E0A\u627E\u5230\u4E0D\u540C\u7684iSCSI\u914D\u7F6E

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:2661
# args: refVO.getScsiLunUuid()
specified\ scsi\ lun[wwid\:\ %s]\ not\ exists\ or\ disabled = \u6307\u5B9A\u7684SCSI Lun[WWID\uFF1A{0}]\u4E0D\u5B58\u5728\u6216\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:60
# args: msg.getVolumeUuid()
the\ vm\ where\ the\ data\ volume\ [%s]\ is\ located\ has\ a\ memory\ snapshot,\ can't\ delete = \u6570\u636E\u4E91\u76D8[{0}]\u6240\u5728\u7684\u4E91\u4E3B\u673A\u5177\u6709\u5185\u5B58\u5FEB\u7167\uFF0C\u65E0\u6CD5\u5220\u9664

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:71
# args: msg.getVolumeUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ volume\ %s\ to\ vmInstance\ %s\ with\ memory\ snapshot\ group = \u65E0\u6CD5\u4F7F\u7528\u5185\u5B58\u5FEB\u7167\u7EC4\u5C06\u5377{0}\u9644\u52A0\u5230VMInstance{1}

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:78
# args: msg.getVolumeUuid()
the\ vm\ where\ the\ data\ volume\ [%s]\ is\ located\ has\ a\ memory\ snapshot,\ can't\ detach = \u6570\u636E\u4E91\u76D8[{0}]\u6240\u5728\u7684VM\u5177\u6709\u5185\u5B58\u5FEB\u7167\uFF0C\u65E0\u6CD5\u5206\u79BB

# at: src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java:60
# args: 
defaultL3NetworkUuid\ not\ exist = defaultL3NetworkUuid\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java:432
# args: l3Uuid,String.join("','", memorySnapshotGroupUuidList)
nic\ with\ l3\ network[uuid\:\ %s]\ is\ referenced\ by\ VolumeSnapshotGroup[uuid\:\ %s],\ delete\ this\ VolumeSnapshotGroup\ before\ deleting\ this\ l3\ network. = \u5177\u6709\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u7684NIC\u7531\u5377SnapshotGroup[uuid\uFF1A{1}]\u5F15\u7528\uFF0C\u8BF7\u5728\u5220\u9664\u6B64\u4E09\u5C42\u7F51\u7EDC\u4E4B\u524D\u5220\u9664\u6B64\u5377SnapshotGroup\u3002

# at: src/main/java/org/zstack/storage/memorySnapshot/VolumeMemorySnapshotGroupExtension.java:155
# args: archiveVolume.getResourceUuid()
the\ volume\ %s\ does\ not\ exist = \u5377{0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java:161
# args: rsp.getError()
vm\ block\ migrate\ failed\:\ %s = VM\u5757\u8FC1\u79FB\u5931\u8D25\uFF1A{0}

# at: src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java:188
# args: 
target\ primary\ storage\ does\ not\ support\ migration\ for\ current\ host = \u76EE\u6807\u4E3B\u5B58\u50A8\u4E0D\u652F\u6301\u5F53\u524D\u7269\u7406\u673A\u7684\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/KvmMigrateVmWithStorageWorkFlow.java:116
# args: 
No\ host\ available\ for\ block\ live\ migration = \u6CA1\u6709\u53EF\u7528\u4E8E\u6570\u636E\u5757\u5B9E\u65F6\u8FC1\u79FB\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:121
# args: 
do\ not\ support\ storage\ migration\ with\ iso\ in\ ceph\ backup\ storage\ attached = \u4E0D\u652F\u6301Ceph\u5907\u4EFD\u5B58\u50A8\u4E2D\u9644\u52A0ISO\u7684\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:289
# args: srcVm.getUuid(),srcVm.getName()
do\ not\ support\ storage\ migration\ of\ vm[uuid\:%s,\ name\:\ %s]\ while\ shared\ volume\ attached = \u8FDE\u63A5\u5171\u4EAB\u4E91\u76D8\u65F6\uFF0C\u4E0D\u652F\u6301VM[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u7684\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:173
# args: srcPsType,dstPsType
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ data\ volume = \u4E0D\u652F\u6301\u4ECE[{0}]\u5230[{1}]\u7684\u5E26\u6570\u636E\u76D8\u7684\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:178
# args: srcPsType,dstPsType
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ snapshot = \u4E0D\u652F\u6301\u4ECE[{0}]\u5230[{1}]\u7684\u5B58\u5728\u4E91\u76D8\u5FEB\u7167\u7684\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:185
# args: primaryStorageVO.getType(),dstPrimaryStorageVO.getType()
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s] = \u4E0D\u652F\u6301\u4ECE[{0}]\u5230[{1}]\u7684\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:191
# args: vmInstanceVO.getUuid()
VM[uuid\:%s]\ is\ running\ but\ host\ uuid\ is\ missing = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u6B63\u5728\u8FD0\u884C\uFF0C\u4F46\u7F3A\u5C11\u7269\u7406\u673Auuid

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:202
# args: 
Source\ BS\ and\ Destination\ BS\ cannot\ be\ the\ same. = \u6E90\u955C\u50CF\u670D\u52A1\u5668\u548C\u76EE\u6807\u955C\u50CF\u670D\u52A1\u5668\u4E0D\u80FD\u76F8\u540C

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:210
# args: 
Source\ BS\ and\ Destination\ BS\ must\ not\ be\ Disabled. = \u6E90\u955C\u50CF\u670D\u52A1\u5668\u548C\u76EE\u6807\u955C\u50CF\u670D\u52A1\u5668\u5FC5\u987B\u4E0D\u662F\u4E0D\u53EF\u7528\u3002

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:217
# args: msg.getImageUuid()
Image[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = \u955C\u50CF[uuid:{0}]\u7684\u72B6\u6001\u4E0D\u662F\u5DF2\u51C6\u5907\uFF0C\u4E0D\u80FD\u8FC1\u79FB\u5B83

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:228
# args: msg.getImageUuid(),msg.getSrcBackupStorageUuid()
Image[uuid\:%s]\ is\ not\ in\ source\ backup\ storage[uuid\:%s] = \u955C\u50CF[uuid:{0}]\u6CA1\u6709\u5728\u6E90\u955C\u50CF\u670D\u52A1\u5668[uuid:{1}]

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:237
# args: srcBS.getType(),dstBS.getType()
Cannot\ migrate\ image\ from\ %s\ to\ %s. = \u4E0D\u80FD\u4ECE{0}\u8FC1\u79FB\u955C\u50CF\u5230{1}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:256
# args: msg.getVolumeUuid(),msg.getDstPrimaryStorageUuid()
Volume[uuid\:%s]\ is\ already\ in\ PS[uuid\:%s],\ cannot\ migrate. = \u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u5728\u4E3B\u5B58\u50A8[uuid:{1}]\u91CC\uFF0C\u4E0D\u80FD\u8FC1\u79FB\u3002

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:264
# args: 
Source\ PS\ and\ Destination\ PS\ must\ not\ be\ Disabled\ or\ Maintenance\ state. = \u6E90\u4E3B\u5B58\u50A8\u548C\u76EE\u6807\u4E3B\u5B58\u50A8\u5FC5\u987B\u4E0D\u662F\u4E0D\u53EF\u7528\u6216\u8005\u7EF4\u62A4\u72B6\u6001\u3002

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:271
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = \u4E91\u76D8[uuid:{0}]\u72B6\u6001\u4E0D\u662F\u5DF2\u51C6\u5907\uFF0C\u4E0D\u80FD\u8FDB\u884C\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:333
# args: msg.getVolumeUuid(),srcVolume.getVmInstanceUuid()
cannot\ migrate\ data\ volume[uuid\:%s]\ bewteen\ sharedblock\ primary\ storages\ when\ vm[vmuuid\:%s]\ instance\ is\ not\ stopped. = VM[vmuuid\uFF1A{1}]\u5B9E\u4F8B\u672A\u505C\u6B62\u65F6\uFF0C\u65E0\u6CD5\u5728SharedBlock\u4E3B\u5B58\u50A8\u4E4B\u95F4\u8FC1\u79FB\u6570\u636E\u4E91\u76D8[uuid\uFF1A{0}]\u3002

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:328
# args: msg.getVolumeUuid(),srcVolume.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ still\ attached\ on\ vm[uuid\:%s],\ please\ detach\ it\ before\ migration. = \u4E91\u76D8[uuid:{0}]\u4E00\u76F4\u8FDE\u63A5\u5728\u4E91\u4E3B\u673A[uuid:{1}]\uFF0C\u5728\u8FC1\u79FB\u4E4B\u524D\u8BF7\u5148\u65AD\u5F00\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:341
# args: srcVolume.getUuid(),srcVolume.getName()
do\ not\ support\ storage\ migration\ while\ shared\ volume[uuid\:\ %s,\ name\:\ %s]\ attached = \u52A0\u8F7D\u4E86\u5171\u4EAB\u4E91\u76D8[uuid:{0}, name:{1}]\u4E0D\u652F\u6301\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:284
# args: 
Cannot\ migrate\ root\ volume\ when\ vm\ instance\ is\ not\ stopped. = \u5F53\u4E91\u4E3B\u673A\u4E0D\u662F\u5DF2\u505C\u6B62\uFF0C\u4E0D\u80FD\u8FC1\u79FB\u4E91\u76D8\u3002

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:301
# args: 
Cannot\ migrate\ root\ volume\ when\ there\ are\ data\ volumes\ attached\ to\ the\ vm\ instance. = \u5F53\u4E91\u76D8\u8FDE\u63A5\u5728\u4E91\u4E3B\u673A\u4E0A\u65F6\uFF0C\u4E0D\u80FD\u8FC1\u79FB\u4E91\u76D8

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:320
# args: 
The\ destination\ primary\ storage\ is\ not\ attached\ to\ any\ cluster\ that\ has\ the\ same\ L2\ networks\ as\ source\ cluster. = \u76EE\u6807\u4E3B\u5B58\u50A8\u4E0D\u80FD\u8FDE\u63A5\u4EFB\u4F55\u548C\u6E90\u96C6\u7FA4\u4E00\u6837\u7684\u4E8C\u5C42\u7F51\u7EDC\u7684\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:351
# args: srcPS.getType(),dstPS.getType()
Cannot\ migrate\ volume\ from\ %s\ to\ %s. = \u4E0D\u80FD\u4ECE{0}\u8FC1\u79FB\u4E91\u76D8\u5230{1}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:372
# args: msg.getVolumeUuid()
can\ not\ migrate\ volume[%s],\ because\ volume\ state\ is\ Disabled = \u65E0\u6CD5\u8FC1\u79FB\u5377[{0}]\uFF0C\u56E0\u4E3A\u5377\u72B6\u6001\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:510
# args: vmInstanceVO.getState()
not\ support\ vm\ state[%s]\ to\ do\ storage\ migration = \u4E91\u4E3B\u673A\u72B6\u6001\u4E3A[{0}],\u65E0\u6CD5\u8FDB\u884C\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:448
# args: msg.getVmInstanceUuid(),size,dstPrimaryStorageVO.getCapacity().getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ vm[uuid\:\ %s]\ storage\ migration,\ required\ capacity(include\ image\ cache)\:\ %s,\ current\ available\ physical\ capacity\:\ %s = \u5BF9\u4E91\u4E3B\u673A[uuid: {0}]\u5B58\u50A8\u8FC1\u79FB\u9700\u8981\u76EE\u6807\u4E3B\u5B58\u50A8\u5177\u6709\u81F3\u5C11{1}\u7684\u7A7A\u4F59\u5BB9\u91CF\uFF08\u5BB9\u91CF\u8BA1\u7B97\u5305\u542B\u955C\u50CFcache\uFF09\uFF0C\u4F46\u73B0\u5728\u53EA\u6709{2}\u7684\u7A7A\u4F59\u5BB9\u91CF

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1125
# args: msg.getVmInstanceUuid()
VM[uuid\:\ %s]\ not\ found = \u627E\u4E0D\u5230VM[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:846
# args: srcPs.getType(),dstPs.getType()
unsupported\ storage\ migration\ type\:\ from\ %s\ to\ %s = \u4E0D\u652F\u6301\u7684\u5B58\u50A8\u8FC1\u79FB\u7C7B\u578B\uFF1A\u4ECE{0}\u5230{1}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1094
# args: msg.getType()
not\ support\ to\ cancel\ %s = \u4E0D\u652F\u6301\u53D6\u6D88{0}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1194
# args: vmInstanceVO.getState()
not\ support\ vm\ state[%s]\ to\ do\ cancellation\ of\ storage\ migration = \u4E0D\u652F\u6301\u4E91\u4E3B\u673A\u72B6\u6001[{0}]\u53D6\u6D88\u5B58\u50A8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1514
# args: 
failed\ to\ get\ host\ candidates\ for\ vm\ migration = \u65E0\u6CD5\u83B7\u53D6\u4E91\u4E3B\u673A\u8FC1\u79FB\u7684\u5019\u9009\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:114
# args: dstBsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ backup\ storage[uuid\:%s] = \u6240\u6709\u5728Ceph\u955C\u50CF\u670D\u52A1\u5668\u76D1\u63A7\u8282\u70B9[uuid:{0}]\u7684\u76D1\u63A7\u8282\u70B9\u90FD\u5904\u4E8E\u5931\u8054\u72B6\u6001

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:187
# args: imageUuid,srcBsUuid,dstBsUuid,errCode.getDetails()
Failed\ to\ migrate\ Image\ %s\ from\ BS\ %s\ to\ BS\ %s.\ cause\:\ %s = \u65E0\u6CD5\u5C06\u955C\u50CF{0}\u4ECEBS{1}\u8FC1\u79FB\u5230BS{2}\u3002\u539F\u56E0\uFF1A{3}

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:143
# args: reply1.getTrashId(),dstBsUuid,dstImageInstallPath,reply1.getResourceUuid()
found\ trashId(%s)\ in\ BackupStorage\ [%s]\ for\ the\ migrate\ installPath[%s].\ Please\ clean\ it\ first\ by\ 'APICleanUpTrashOnBackupStorageMsg'\ if\ you\ insist\ to\ migrate\ the\ image[%s] = \u5728\u5907\u4EFD\u5B58\u50A8[{1}]\u7684\u56DE\u6536\u6570\u636E({0})\u4E2D\u5DF1\u5B58\u5728\u8981\u8FC1\u79FB\u7684\u76EE\u6807\u8DEF\u5F84[{2}]\uFF0C\u5982\u679C\u8981\u7EE7\u7EED\u8FC1\u79FB\u955C\u50CF[{3}]\uFF0C\u8BF7\u5148\u8C03\u7528'APICleanUpTrashOnBackupStorageMsg'\u6765\u624B\u52A8\u6E05\u7406\u8BE5\u56DE\u6536\u6570\u636E

# at: src/main/java/org/zstack/storage/migration/primary/PrimaryStorageMigrateVmJob.java:141
# args: amsg.getVmInstanceUuid(),job.getUuid()
vm[uuid\:%s]\ storage\ migration\ long\ job[uuid\:%s]\ failed\ because\ management\ node\ was\ restarted = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u5B58\u50A8\u8FC1\u79FB\u957F\u4F5C\u4E1A[uuid\uFF1A{1}]\u5931\u8D25\uFF0C\u56E0\u4E3A\u7BA1\u7406\u8282\u70B9\u5DF2\u91CD\u65B0\u542F\u52A8

# at: src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:584
# args: volume.getType()
The\ type\ [%s]\ of\ volume\ is\ invalid. = \u5377\u7684\u7C7B\u578B[{0}]\u65E0\u6548\u3002

# at: src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:122
# args: dstPsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ primary\ storage[uuid\:%s] = \u6240\u6709Ceph MON\u90FD\u5728\u5206\u5E03\u5F0F\u5B58\u50A8[uuid\uFF1A{0}]\u4E2D\u65AD\u5F00\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:89
# args: 
cannot\ find\ any\ connected\ host\ to\ perform\ the\ storage\ migration\ operation = \u4E3A\u4E86\u6267\u884C\u5B58\u50A8\u8FC1\u79FB\u64CD\u4F5C\uFF0C\u672A\u627E\u5230\u8FDE\u63A5\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:194
# args: imageUuid
both\ image\ %s\ and\ its\ cache\ is\ missing = \u7F3A\u5C11\u955C\u50CF{0}\u53CA\u5176\u7F13\u5B58

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:203
# args: 
'resourceUuid'\ and\ 'resourceType'\ must\ be\ set\ both\ or\ neither! = \u201C resourceUuid \u201D\u548C\u201C resourceType \u201D\u5FC5\u987B\u540C\u65F6\u8BBE\u7F6E\u6216\u90FD\u4E0D\u8BBE\u7F6E\uFF01

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:92
# args: 
zoneUuids,\ clusterUuids,\ primaryStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids\u3001clusterUuids\u3001primaryStorageUuids\u4E2D\u5FC5\u987B\u81F3\u5C11\u6709\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\u5217\u8868\uFF0C\u9664\u975E\u5C06\u5B57\u6BB5 all \u8BBE\u4E3A true

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:114
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ cluster[uuid\:%s]\ yet = \u4E3B\u5B58\u50A8[uuid:{0}]\u8FD8\u672A\u52A0\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:131
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ been\ attached\ to\ cluster[uuid\:%s] = \u4E3B\u5B58\u50A8[uuid:{0}]\u5DF2\u88AB\u52A0\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:146
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ and\ cluster[uuid\:%s]\ are\ not\ in\ the\ same\ zone = \u4E3B\u5B58\u50A8[uuid:{0}]\u548C\u96C6\u7FA4[uuid:{1}]\u4E0D\u5728\u540C\u4E00\u4E2A\u533A\u57DF\u5185

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:168
# args: url
url[%s]\ has\ been\ occupied,\ it\ cannot\ be\ duplicate\ in\ same\ cluster = url[{0}]\u5DF2\u7ECF\u88AB\u5360\u7528\uFF0C\u5728\u76F8\u540C\u7684\u96C6\u7FA4\u91CC\u5B83\u4E0D\u80FD\u518D\u6B21\u4F7F\u7528

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:220
# args: psUuids
primary\ storage(s)\ [uuid\:\ %s]\ where\ volume(s)\ locate\ is\ not\ Enabled\ or\ Connected = \u5377\u6240\u5728\u7684\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\u672A\u542F\u7528\u6216\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java:50
# args: spec.getAvoidPrimaryStorageUuids()
after\ removing\ primary\ storage%s\ to\ avoid,\ there\ is\ no\ candidate\ primary\ storage\ anymore.\ please\ check\ primary\ storage\ status\ and\ state\ in\ the\ cluster. = \u628A\u4E3B\u5B58\u50A8{0}\u79FB\u5230\u6392\u9664\u5217\u8868\u540E\uFF0C\u5C31\u6CA1\u6709\u53EF\u7528\u7684\u4E3B\u5B58\u50A8\u4E86\uFF0C\u8BF7\u786E\u8BA4\u96C6\u7FA4\u4E2D\u4E3B\u5B58\u50A8\u7684\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:239
# args: self.getUuid()
cannot\ attach\ ISO\ to\ a\ primary\ storage[uuid\:%s]\ which\ is\ disabled = \u65E0\u6CD5\u5C06ISO\u9644\u52A0\u5230\u5DF2\u7981\u7528\u7684\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:769
# args: bsUuid,self.getZoneUuid(),self.getUuid()
backup\ storage[uuid\:%s]\ is\ not\ attached\ to\ zone[uuid\:%s]\ the\ primary\ storage[uuid\:%s]\ belongs\ to = \u955C\u50CF\u670D\u52A1\u5668[uuid:{0}]\u6CA1\u6709\u52A0\u8F7D\u5230\u4E3B\u5B58\u50A8[uuid:{2}]\u6240\u5728\u7684\u533A\u57DF[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:789
# args: volUuid,vmState
volume[uuid\:%s]\ has\ been\ attached\ a\ %s\ VM.\ VM\ should\ be\ Stopped. = \u5377[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230{1}\u4E91\u4E3B\u673A\u3002\u5E94\u505C\u6B62\u4E91\u4E3B\u673A\u3002

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1602
# args: self.getUuid(),clusterUuidsString
primary\ storage[uuid\:%s]\ cannot\ be\ deleted\ for\ still\ being\ attached\ to\ cluster[uuid\:%s]. = \u4E0D\u80FD\u5220\u9664\u4E3B\u5B58\u50A8[uuid:{0}]\uFF0C\u56E0\u4E3A\u5B83\u8FD8\u88AB\u52A0\u8F7D\u5728\u96C6\u7FA4[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1749
# args: volumeUuid
cannot\ attach\ volume[uuid\:%s]\ whose\ primary\ storage\ is\ Maintenance = \u65E0\u6CD5\u6302\u8F7D\u4E91\u76D8[uuid:{0}]\uFF0C\u5176\u4E3B\u5B58\u50A8\u5904\u4E8E\u7EF4\u62A4\u6A21\u5F0F

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java:283
# args: size,capacityVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ primary\ storage[uuid\:%s],\ it's\ short\ of\ available\ capacity = \u65E0\u6CD5\u5728\u4E3B\u5B58\u50A8[uuid:{1}]\u4E0A\u4FDD\u7559{0}\u5B57\u8282\uFF0C\u53EF\u7528\u5BB9\u91CF\u4E0D\u8DB3

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageDeleteBitGC.java:45
# args: ps.getUuid(),ps.getStatus().toString()
the\ primary\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = \u4E3B\u5B58\u50A8[uuid:{0}]\u7684\u72B6\u6001\u4E0D\u662F\u5DF2\u8FDE\u63A5\uFF0C\u5F53\u524D\u7684\u72B6\u6001\u662F{1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageMainAllocatorFlow.java:225
# args: spec.getImageUuid()
no\ way\ to\ get\ image\ size\ of\ %s,\ report\ exception. = \u65E0\u6CD5\u83B7\u53D6{0}\u7684\u955C\u50CF\u5927\u5C0F\uFF0C\u62A5\u544A\u5F02\u5E38\u3002

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:106
# args: systemTag,uuid
%s\ is\ invalid.\ %s\ is\ not\ a\ valid\ zstack\ uuid = {0}\u662F\u65E0\u6548\u7684\uFF0C{1}\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684ZStack uuid

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:110
# args: resourceUuid
no\ primary\ storage[uuid\:%s]\ found = \u627E\u4E0D\u5230\u4E3B\u5B58\u50A8[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:138
# args: msg.getUuid()
primaryStorage[uuid\=%s]\ does\ not\ exist = PrimaryStorage[uuid={0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:492
# args: 
please\ specify\ the\ purpose\ before\ allocating\ space = \u8BF7\u5728\u5206\u914D\u7A7A\u95F4\u4E4B\u524D\u6307\u5B9A\u7528\u9014

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:614
# args: errs
cannot\ find\ any\ qualified\ primary\ storage,\ errors\ are\ %s = \u627E\u4E0D\u5230\u53EF\u7528\u7684\u4E3B\u5B58\u50A8\uFF0C\u9519\u8BEF\u4E3A:{0}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:833
# args: cidr
cidr[%s]\ Input\ Format\ Error = CIDR[{0}]\u8F93\u5165\u683C\u5F0F\u9519\u8BEF

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:829
# args: cidrCount
only\ one\ primaryStorage\ cidr\ system\ tag\ is\ allowed,\ but\ %d\ got = \u53EA\u5141\u8BB8\u4E00\u4E2APrimaryStorage CIDR\u7CFB\u7EDF\u6807\u8BB0\uFF0C\u4F46{0}\u83B7\u5F97\u4E86

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:1186
# args: clusterUuid,msg.getClusterUuid()
clusterUuid\ conflict,\ the\ cluster\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ cluster\ specified\ in\ the\ creation\ parameter\ is\ %s = Clusteruuid\u51B2\u7A81\uFF0C\u5B9E\u4F8B\u4EA7\u54C1\u6307\u5B9A\u7684\u96C6\u7FA4\u4E3A{0}\uFF0C\u521B\u5EFA\u53C2\u6570\u4E2D\u6307\u5B9A\u7684\u96C6\u7FA4\u4E3A{1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:1201
# args: psUuid,msg.getPrimaryStorageUuidForRootVolume()
primaryStorageUuid\ conflict,\ the\ primary\ storage\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ primary\ storage\ specified\ in\ the\ creation\ parameter\ is\ %s = PrimaryStorageuuid\u51B2\u7A81\uFF0C\u5B9E\u4F8B\u4EA7\u54C1\u6307\u5B9A\u7684\u4E3B\u5B58\u50A8\u4E3A{0}\uFF0C\u800C\u521B\u5EFA\u53C2\u6570\u4E2D\u6307\u5B9A\u7684\u4E3B\u5B58\u50A8\u4E3A{1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:127
# args: uuid
cannot\ find\ primary\ storage[uuid\:%s],\ the\ uuid\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = \u627E\u4E0D\u5230\u7531\u8BA1\u7B97\u89C4\u683C\u6216\u4E91\u76D8\u89C4\u683C\u6307\u5B9A\u7684\u4E3B\u5B58\u50A8[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:167
# args: tag
cannot\ find\ primary\ storage\ having\ user\ tag[%s].\ The\ user\ tag\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = \u627E\u4E0D\u5230\u5E26\u6709\u6307\u5B9A\u7528\u6237\u6807\u7B7E\u7684\u4E3B\u5B58\u50A8[uuid:{0}]\uFF0C\u8BE5\u6807\u7B7E\u7531\u8BA1\u7B97\u89C4\u683C\u6216\u8005\u4E91\u76D8\u89C4\u683C\u6307\u5B9A

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java:85
# args: extp.getClass().getName()
PrimaryStorageTagAllocatorExtensionPoint[%s]\ returns\ zero\ primary\ storage\ candidate = \u4E3B\u5B58\u50A8\u6807\u7B7E\u5206\u914D\u63D2\u4EF6[{0}]\u627E\u4E0D\u5230\u53EF\u7528\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1825
# args: 
not\ support = \u4E0D\u662F\u652F\u6301

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:471
# args: bsType
cannot\ find\ any\ BackupStorageKvmFactory\ for\ the\ type[%s] = \u627E\u4E0D\u5230\u7C7B\u578B[{0}]\u7684\u4EFB\u4F55BackupStorageKVMFactory

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:670
# args: self.getUuid(),self.getName()
the\ block\ primary\ storage[uuid\:%s,\ name\:%s]\ can\ not\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = \u5757\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5728\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u4E8E\u5B9E\u4F8B\u5316\u5377\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1242
# args: msg.getVolumeInventory().getUuid()
fail\ to\ find\ a\ host\ to\ map\ for\ volume\ %s = \u627E\u4E0D\u5230\u8981\u4E3A\u5377{0}\u6620\u5C04\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1491
# args: 
host\ uuid\ is\ mandatory = \u7269\u7406\u673Auuid\u662F\u5FC5\u9700\u7684

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1612
# args: msg.getDestHostUuid()
Fail\ to\ get\ host\ initiator\ ref,\ please\ reconnect\ this\ host\:%s = \u65E0\u6CD5\u83B7\u53D6\u7269\u7406\u673A\u542F\u52A8\u5668\u5F15\u7528\uFF0C\u8BF7\u91CD\u65B0\u8FDE\u63A5\u6B64\u7269\u7406\u673A\uFF1A{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:2608
# args: msg.getPrimaryStorageUuid()
fail\ to\ find\ cluster\ for\ commit\ volume\ on\ ps\:%s = \u5728PS\uFF1A{0}\u4E0A\u627E\u4E0D\u5230\u63D0\u4EA4\u5377\u7684\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:2617
# args: msg.getVolumeUuid()
fail\ to\ find\ host\ for\ commit\ volume\:%s = \u627E\u4E0D\u5230\u63D0\u4EA4\u5377\u7684\u7269\u7406\u673A\uFF1A{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:1132
# args: 
not\ support\ take\ volumes\ snapshots\ on\ multiple\ ps\ when\ including\ ceph = \u5305\u542BCeph\u65F6\uFF0C\u4E0D\u652F\u6301\u5728\u591A\u4E2APS\u4E0A\u62CD\u6444\u5377\u5FEB\u7167

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:370
# args: context.getInventory().getUuid(),priUuid,reply.getError()
KVM\ host[uuid\:\ %s]\ fails\ to\ be\ added\ into\ local\ primary\ storage[uuid\:\ %s],\ %s = \u672C\u5730\u5B58\u50A8[uuid:{1}]\u6DFB\u52A0\u7269\u7406\u673A[uuid:{0}]\u5931\u8D25\uFF0C{2}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:669
# args: volume.getUuid()
fail\ to\ find\ block\ scsi\ lun\ for\ volume\:\ %s = \u627E\u4E0D\u5230\u5377{0}\u7684\u5757SCSI Lun

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:967
# args: e.getCause().toString()
fail\ to\ exchange\ block\ scsi\ lun\ info\:%s = \u65E0\u6CD5\u4EA4\u6362\u5757SCSI Lun\u4FE1\u606F\uFF1A{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:1560
# args: 
currently\ block\ storage\ only\ support\ full\ mode\ backup = \u5F53\u524D\uFF0C\u6570\u636E\u5757\u5B58\u50A8\u4EC5\u652F\u6301\u5B8C\u6574\u6A21\u5F0F\u5907\u4EFD

# at: src/main/java/org/zstack/storage/primary/block/ImageStoreBackupStorageBlockKvmDownloader.java:143
# args: bsPath,greply.getHostname(),pinv.getUuid(),psPath,rsp.getError()
failed\ to\ download[%s]\ from\ BackupStorage[hostname\:%s]\ to\ block\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = \u65E0\u6CD5\u5C06[{0}]\u4ECE\u5907\u4EFD\u5B58\u50A8[\u7269\u7406\u673A\u540D\uFF1A{1}]\u4E0B\u8F7D\u5230\u5757\u4E3B\u5B58\u50A8[uuid\uFF1A{2}\uFF0C\u8DEF\u5F84\uFF1A{3}]\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:875
# args: accessZoneRsp.getDetail_err_msg()
fail\ to\ sync\ access\ zones\ because\ %s = \u65E0\u6CD5\u540C\u6B65\u8BBF\u95EE\u5206\u533A\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:881
# args: queryAccessZoneSubnetRsp.getDetail_err_msg()
fail\ to\ get\ access\ zone's\ subnet\ because\ %s = \u65E0\u6CD5\u83B7\u53D6\u8BBF\u95EE\u533A\u57DF\u7684\u5B50\u7F51\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:893
# args: queryHostRsp.getDetail_err_msg()
fail\ to\ query\ all\ hosts,\ because\ of\ %s = \u7531\u4E8E{0}\uFF0C\u65E0\u6CD5\u67E5\u8BE2\u6240\u6709\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:908
# args: ids.toString(),queryHostRsp.getDetail_err_msg()
fail\ to\ query\ hosts\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u67E5\u8BE2\u7269\u7406\u673A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:927
# args: String.valueOf(hostId),String.valueOf(hostGroupId),addHostRsp.getDetail_err_msg()
fail\ to\ add\ host\ %s\ into\ hostGroup\ %s,\ because\ of\ %s = \u7531\u4E8E{2}\uFF0C\u65E0\u6CD5\u5C06\u7269\u7406\u673A{0}\u6DFB\u52A0\u5230\u7269\u7406\u673A\u7EC4{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:962
# args: String.valueOf(initiatorId)
host\ id\ is\ mandatory\ but\ get\:%s = \u7269\u7406\u673AID\u662F\u5FC5\u9700\u7684\uFF0C\u4F46\u83B7\u53D6\uFF1A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:943
# args: String.valueOf(hostId),rsp.getDetail_err_msg()
fail\ to\ delete\ host\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u5220\u9664\u7269\u7406\u673A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:955
# args: String.valueOf(hostGroupId),rsp.getDetail_err_msg()
fail\ to\ delete\ host\ group\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u5220\u9664\u7269\u7406\u673A\u7EC4{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:967
# args: String.valueOf(initiatorId),rsp.getDetail_err_msg()
fail\ to\ delete\ initiator\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u5220\u9664\u53D1\u8D77\u7A0B\u5E8F{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:975
# args: queryHostGroupRsp.getDetail_err_msg()
fail\ to\ query\ host\ group,\ because\ of\ %s = \u7531\u4E8E{0}\uFF0C\u65E0\u6CD5\u67E5\u8BE2\u7269\u7406\u673A\u7EC4

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:993
# args: name,addHostGroupRsp.getDetail_err_msg()
fail\ to\ add\ host\ group\:\ %s,\ error\ message\:%s\  = \u65E0\u6CD5\u6DFB\u52A0\u7269\u7406\u673A\u7EC4\uFF1A{0}\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1011
# args: ids.toString(),queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ \:\ %s,\ error\ message\:%s\  = \u65E0\u6CD5\u67E5\u8BE2Lun\uFF1A{0}\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1050
# args: queryPath,queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ by\ path\:\ %s,\ error\ message\:%s\  = \u65E0\u6CD5\u6309\u8DEF\u5F84\u67E5\u8BE2Lun\uFF1A{0}\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1067
# args: name,serverCommonRsp.getDetail_err_msg()
fail\ to\ update\ lun\ name\:\ %s,\ error\ message\:%s\  = \u65E0\u6CD5\u66F4\u65B0Lun\u540D\u79F0\uFF1A{0}\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1178
# args: blockScsiLunVO.getName(),serverRsp.getDetail_err_msg()
fail\ to\ create\ lun\ name\:\ %s,\ error\ message\:%s\  = \u65E0\u6CD5\u521B\u5EFALun\u540D\u79F0\uFF1A{0}\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1115
# args: blockScsiLunVO.getName(),serverRsp.getDetail_err_msg()
fail\ to\ get\ created\ lun[name\:\ %s],\ error\ message\:%s\  = \u65E0\u6CD5\u83B7\u53D6\u5DF2\u521B\u5EFA\u7684Lun[\u540D\u79F0\uFF1A{0}]\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1129
# args: blockScsiLunVO.getName()
fail\ to\ create\ lun\ name\:\ %s,\ can\ not\ find\ root\ cause = \u65E0\u6CD5\u521B\u5EFALun\u540D\u79F0\uFF1A{0}\uFF0C\u627E\u4E0D\u5230\u6839\u672C\u539F\u56E0

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1188
# args: String.valueOf(lunId),queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u67E5\u8BE2Lun{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1204
# args: String.valueOf(lunId),String.valueOf(hostGroupId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ query\ lun\ map\ for\ lun\ %s\ and\ host\ group\ %s,\ because\ of\ %s = \u7531\u4E8E{2}\uFF0C\u65E0\u6CD5\u67E5\u8BE2Lun{0}\u548C\u7269\u7406\u673A\u7EC4{1}\u7684Lun\u6620\u5C04

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1225
# args: String.valueOf(hostGroupId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ query\ lun\ map\ for\ host\ group\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u67E5\u8BE2\u7269\u7406\u673A\u7EC4{0}\u7684Lun\u6620\u5C04

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1236
# args: clusterOverviewRsp.getDetail_err_msg()
fail\ to\ get\ cluster\ info,\ because\ of\ %s = \u7531\u4E8E{0}\uFF0C\u65E0\u6CD5\u83B7\u53D6\u96C6\u7FA4\u4FE1\u606F

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1259
# args: String.valueOf(lunId),String.valueOf(hostGroupId),serverRsp.getDetail_err_msg()
fail\ to\ map\ lun\ %s\ to\ host\ group\ %s,\ because\ of\ %s = \u7531\u4E8E{2}\uFF0C\u65E0\u6CD5\u5C06Lun{0}\u6620\u5C04\u5230\u7269\u7406\u673A\u7EC4{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1267
# args: String.valueOf(lunMapId)
lun\ map\ id\ is\ mandatory\ but\ get\:%s = Lun\u6620\u5C04ID\u662F\u5FC5\u9700\u7684\uFF0C\u4F46\u83B7\u53D6\uFF1A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1273
# args: String.valueOf(lunMapId),serverRsp.getDetail_err_msg()
fail\ to\ delete\ lun\ map\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u5220\u9664Lun\u6620\u5C04{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1279
# args: String.valueOf(lunId)
lun\ id\ is\ mandatory\ but\ get\:%s = Lun ID\u662F\u5FC5\u9700\u7684\uFF0C\u4F46\u83B7\u53D6\uFF1A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1285
# args: String.valueOf(lunId),serverRsp.getDetail_err_msg()
fail\ to\ delete\ lun\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u5220\u9664Lun{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1295
# args: String.valueOf(id),storagePoolRsp.getDetail_err_msg()
fail\ to\ get\ storage\ pool\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u83B7\u53D6\u5B58\u50A8\u6C60{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1308
# args: JSONObjectUtil.toJsonString(blockScsiLunVO),rsp.getDetail_err_msg()
fail\ to\ create\ snapshot\ for\ lun\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u4E3ALun{0}\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1330
# args: ids.toString(),rsp.getDetail_err_msg()
fail\ to\ query\ snapshots\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u67E5\u8BE2\u5FEB\u7167{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1337
# args: String.valueOf(snapshotId)
snapshot\ id\ is\ mandatory\ but\ get\:%s = \u5FEB\u7167ID\u662F\u5FC5\u9700\u7684\uFF0C\u4F46\u83B7\u53D6\uFF1A{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1344
# args: String.valueOf(snapshotId),rsp.getDetail_err_msg()
fail\ to\ delete\ snapshot\ %s,\ because\ of\ %s = \u7531\u4E8E{1}\uFF0C\u65E0\u6CD5\u5220\u9664\u5FEB\u7167{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1355
# args: String.valueOf(snapshotId),serverRsp.getDetail_err_msg()
fail\ to\ revert\ snapshot\:%s,\ because\ of\:\ %s = \u65E0\u6CD5\u6062\u590D\u5FEB\u7167\uFF1A{0}\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1364
# args: String.valueOf(lunId),getLunSessionRsp.getDetail_err_msg()
fail\ to\ check\ lun\ %s\ session\ state\ ,\ because\ of\:\ %s = \u65E0\u6CD5\u68C0\u67E5Lun{0}\u4F1A\u8BDD\u72B6\u6001\uFF0C\u539F\u56E0\u662F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1380
# args: String.valueOf(lunId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ get\ lun\ %s\ maps,\ because\ of\:\ %s = \u65E0\u6CD5\u83B7\u53D6Lun{0}\u6620\u5C04\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1402
# args: String.valueOf(lunId),lunQuantityInfoRsp.getDetail_err_msg()
fail\ to\ get\ lun\ %s\ remain\ created\ lun\ number,\ because\ of\:\ %s = \u65E0\u6CD5\u83B7\u53D6Lun{0}\u4FDD\u6301\u521B\u5EFA\u72B6\u6001\u7684Lun\u7F16\u53F7\uFF0C\u539F\u56E0\u662F\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:161
# args: 
lun\ map\ id\ is\ mandatory\ can\ not\ be\ null,\ neither\ 0 = Lun\u6620\u5C04ID\u662F\u5FC5\u9700\u7684\uFF0C\u4E0D\u80FD\u4E3A\u7A7A\uFF0C\u4E5F\u4E0D\u80FD\u4E3A0

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:194
# args: 
lun\ id\ is\ illegal = Lun ID\u975E\u6CD5

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:527
# args: clusterOverview.getCluster_data_state(),clusterOverview.getCluster_healthy_state(),clusterOverview.getCluster_running_state()
XStor\ cluster\ is\ unhealthy,\ cluster\ info[cluster_\ data_\ state\:\ %s,\ cluster_\ healthy_\ state\:\ %s,\ cluster_\ running_\ state\:\ %s] = xstor\u96C6\u7FA4\u8FD0\u884C\u4E0D\u6B63\u5E38\uFF0C\u96C6\u7FA4\u4FE1\u606F[\u96C6\u7FA4_\u6570\u636E_\u72B6\u6001\uFF1A{0}\uFF0C\u96C6\u7FA4_\u8FD0\u884C\u6B63\u5E38_\u72B6\u6001\uFF1A{1}\uFF0C\u96C6\u7FA4_\u8FD0\u884C_\u72B6\u6001\uFF1A{2}]

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:555
# args: 
illegal\ lun\ id = \u975E\u6CD5Lun ID

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:647
# args: 
fail\ to\ get\ image\ cache\ lun\ info = \u65E0\u6CD5\u83B7\u53D6\u955C\u50CF\u7F13\u5B58Lun\u4FE1\u606F

# at: src/main/java/org/zstack/storage/primary/ceph/CephHostHeartbeatChecker.java:204
# args: targetHostUuid
host\ %s's\ heartbeat\ is\ not\ updated = \u7269\u7406\u673A{0}\u7684\u68C0\u6D4B\u4FE1\u53F7\u672A\u66F4\u65B0

# at: src/main/java/org/zstack/storage/primary/filesystem/AbstractFileSystemHostHeartbeatChecker.java:116
# args: cmd.targetHostUuid
host[uuid\:%s]'s\ heartbeat\ is\ not\ updated = \u7269\u7406\u673A[uuid\uFF1A{0}]\u7684\u68C0\u6D4B\u4FE1\u53F7\u672A\u66F4\u65B0

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:120
# args: vo.getUuid()
all\ ceph\ mons\ of\ primary\ storage[uuid\:%s]\ are\ not\ in\ Connected\ state = \u5206\u5E03\u5F0F\u5B58\u50A8[uuid:{0}]\u6240\u6709\u7684\u76D1\u63A7\u8282\u70B9\u90FD\u4E0D\u662F\u5DF2\u8FDE\u63A5\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:164
# args: param.getPrimaryStorageUuid()
CephPrimaryStorage[%s]\ not\ existed! = Ceph\u955C\u50CF\u670D\u52A1\u5668\u76D1\u63A7\u8282\u70B9[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:201
# args: licMgr.getLicenseType().toString()
current\ license[%s]\ is\ not\ valid\ license\ while\ download\ from\ imagestore\ backupstorage = \u5F53\u4ECEImageStore\u955C\u50CF\u670D\u52A1\u5668\u8FDB\u884C\u4E0B\u8F7D\u64CD\u4F5C\uFF0C\u5F53\u524D\u8BC1\u4E66[{0}]\u662F\u65E0\u6548\u7684\u8BC1\u4E66

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:229
# args: 
System\ can't\ find\ imagestore\ backup\ Storage.\ Please\ do\ not\ set\ imagestore\ backup\ Storage\ server\ IP\ to\ localhost(127.*.*.*), = \u7CFB\u7EDF\u627E\u4E0D\u5230\u955C\u50CF\u4ED3\u5E93\u955C\u50CF\u670D\u52A1\u5668\u3002\u8BF7\u4E0D\u8981\u8BBE\u7F6E\u955C\u50CF\u670D\u52A1\u5668IP\u4E3Alocalhost(127.*.*.*)

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:232
# args: operationSuggestion,greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
%s\ failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = {0}\u4ECE\u955C\u50CF\u4ED3\u5E93\u955C\u50CF\u670D\u52A1\u5668[hostname:{1}, path: {2}]\u5230\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{3}, path: {4}]\u4E0B\u8F7D\u5931\u8D25\uFF0C{5}

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:293
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = \u65E0\u6CD5\u4ECE\u672C\u5730\u5B58\u50A8[uuid:{0}, path:{1}]\u4E0A\u4F20\u6570\u636E\u5230\u955C\u50CF\u4ED3\u5E93[\u7269\u7406\u673A\u540D:{2}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:238
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ nfs\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = \u65E0\u6CD5\u4ECEImageStore\u955C\u50CF\u670D\u52A1\u5668[hostname:{0}, path: {1}]\u4E0B\u8F7D\u6570\u636E\u5230NFS\u4E3B\u5B58\u50A8[uuid:{2}, path: {3}]\uFF0C\u9519\u8BEF\u7EC6\u8282: {4}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:300
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ NFS[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = \u65E0\u6CD5\u4ECENFS\u4E3B\u5B58\u50A8[uuid:{0}, path:{1}]\u4E0A\u4F20\u6570\u636E\u5230\u955C\u50CF\u4ED3\u5E93[\u7269\u7406\u673A\u540D:{2}]\uFF0C\u56E0\u4E3A{3}

# at: src/main/java/org/zstack/storage/primary/imagestore/smp/KvmAgentCommandDispatcher.java:70
# args: this.primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ mount\ point\ storage[uuid\:%s]\ are\ disconnected = \u627E\u4E0D\u5230\u4EFB\u4F55Connected\u7684\u7269\u7406\u673A\u53BB\u6267\u884C\u64CD\u4F5C\uFF0C\u770B\u8D77\u6765\u52A0\u8F7D\u5230shared mount point\u5B58\u50A8\u7684\u96C6\u7FA4\u4E0A\u6240\u6709\u7269\u7406\u673A\u90FD\u5904\u4E8EDisconnected\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:52
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ no\ MonIP\ available = \u65E0\u6CD5\u83B7\u53D6PrimaryStorage[{0}]\u8BB8\u53EF\u8BC1\u4FE1\u606F\uFF0C\u56E0\u4E3A\u6CA1\u6709\u53EF\u7528\u7684monIP

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:62
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ no\ data\ returned = \u65E0\u6CD5\u83B7\u53D6PrimaryStorage[{0}]\u8BB8\u53EF\u8BC1\u4FE1\u606F\uFF0C\u56E0\u4E3A\u672A\u8FD4\u56DE\u4EFB\u4F55\u6570\u636E

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:87
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ the\ returned\ data\ does\ not\ have\ an\ active\ license = \u65E0\u6CD5\u83B7\u53D6PrimaryStorage[{0}]\u8BB8\u53EF\u8BC1\u4FE1\u606F\uFF0C\u56E0\u4E3A\u8FD4\u56DE\u7684\u6570\u636E\u6CA1\u6709\u6D3B\u52A8\u8BB8\u53EF\u8BC1

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:70
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ expired_time\ is\ null = \u65E0\u6CD5\u83B7\u53D6PrimaryStorage[{0}]\u8BB8\u53EF\u8BC1\u4FE1\u606F\uFF0C\u56E0\u4E3A\u8FC7\u671F_\u65F6\u95F4\u4E3A\u7A7A

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:76
# args: license.getExpired_time(),primaryStorageUuid
failed\ to\ parse\ the\ date\ format[%s]\ of\ the\ primaryStorage[%s]\ license\ info = \u65E0\u6CD5\u5206\u6790PrimaryStorage[{1}]\u8BB8\u53EF\u8BC1\u4FE1\u606F\u7684\u65E5\u671F\u683C\u5F0F[{0}]

# at: src/main/java/org/zstack/storage/primary/local/AllocatePrimaryStorageForVmMigrationFlow.java:85
# args: volumeSize,spec.getVmInstance().getUuid()
no\ hosts\ can\ provide\ %s\ bytes\ for\ all\ volumes\ of\ the\ vm[uuid\:%s] = \u6CA1\u6709\u7269\u7406\u673A\u53EF\u4EE5\u4E3AVM[uuid\uFF1A{1}]\u7684\u6240\u6709\u5377\u63D0\u4F9B{0}\u5B57\u8282

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:336
# args: 
localstorage\ allocator\ failed = localstorage\u7C7B\u578B\u7684\u4E3B\u5B58\u50A8\u8FC7\u6EE4\u5931\u8D25

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:356
# args: 
invalid\ uri,\ correct\ example\ is\ file\://$URL;hostUuid\://$HOSTuuid\ or\ volume\://$VOLUMEuuid\  = URI\u65E0\u6548\uFF0C\u6B63\u786E\u793A\u4F8B\u4E3Afile\uFF1A//$URL\uFF1BHOSTuuid\uFF1A//$HOSTuuid\u6216VOLUME\uFF1A//$VOLUMEuuid

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:369
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = \u8981\u5728\u672C\u5730\u4E3B\u5B58\u50A8\u4E0A\u521B\u5EFA\u5377\uFF0C\u5FC5\u987B\u4F7F\u7528\u7CFB\u7EDF\u6807\u8BB0[{0}]\u6307\u5B9A\u8981\u521B\u5EFA\u5377\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:88
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ on\ any\ local\ primary\ storage = \u4E91\u76D8[uuid:{0}]\u4E0D\u5728\u4EFB\u4E00\u672C\u5730\u4E3B\u5B58\u50A8\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:93
# args: msg.getVolumeUuid(),msg.getDestHostUuid()
the\ volume[uuid\:%s]\ is\ already\ on\ the\ host[uuid\:%s] = \u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u5728\u7269\u7406\u673A[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:99
# args: msg.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ not\ found = \u4E3B\u5B58\u50A8[uuid:{0}]\u672A\u627E\u5230

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:103
# args: ref.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ disabled\ or\ maintenance\ cold\ migrate\ is\ not\ allowed = \u4E3B\u5B58\u50A8[uuid:{0}]\u4E3ADisabled\u6216\u7EF4\u62A4\u72B6\u6001\u65F6\u4E0D\u5141\u8BB8\u51B7\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:112
# args: msg.getDestHostUuid(),ref.getPrimaryStorageUuid(),msg.getVolumeUuid()
the\ dest\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s]\ where\ the\ volume[uuid\:%s]\ locates = \u76EE\u6807\u7269\u7406\u673A[uuid:{0}]\u4E0D\u5728\u4E91\u76D8[uuid:{2}]\u4F4D\u4E8E\u7684\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:118
# args: msg.getDestHostUuid(),msg.getPrimaryStorageUuid(),physicalThreshold,refVO.getAvailablePhysicalCapacity()
the\ dest\ host[uuid\:%s]\ doesn't\ have\ enough\ physical\ capacity\ due\ to\ the\ threshold\ of\ primary\ storage[uuid\:%s]\ is\ %f\ but\ available\ physical\ capacity\ is\ %d = \u76EE\u6807\u7269\u7406\u673A[uuid:{0}]\u6CA1\u6709\u8DB3\u591F\u7684\u7269\u7406\u5BB9\u91CF\uFF0C\u56E0\u4E3A\u8BBE\u7F6E\u7684\u4E3B\u5B58\u50A8[uuid:{1}]\u53EF\u7528\u9608\u503C\u4E3A{2}\uFF0C\u4F46\u5B9E\u9645\u53EF\u7528\u7269\u7406\u5BB9\u91CF\u662F{3}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:125
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ Ready,\ cannot\ migrate\ it = \u4E91\u76D8[uuid:{0}]\u7684\u72B6\u6001\u4E0D\u662FReady\uFF0C\u4E0D\u80FD\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:138
# args: vol.getUuid(),vol.getVmInstanceUuid(),vmstate
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ is\ in\ state\ of\ %s,\ please\ stop\ it\ before\ migration = \u4E91\u76D8[uuid:{0}]\u662F\u4E91\u4E3B\u673A[uuid:{1}]\u7684\u4E91\u76D8\u3002\u5F53\u524D\u4E91\u4E3B\u673A\u7684\u72B6\u6001\u4E3A{2}\uFF0C\u8BF7\u505C\u6B62\u540E\u518D\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:146
# args: vol.getUuid(),vol.getVmInstanceUuid(),count
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ %s\ data\ volumes\ attached,\ please\ detach\ them\ before\ migration = \u4E91\u76D8[uuid:{0}]\u662F\u4E91\u4E3B\u673A[uuid:{1}]\u7684\u4E91\u76D8\u3002\u5F53\u524D\u4E91\u4E3B\u673A\u4ECD\u6709\u5DF2\u6302\u8F7D\u7684\u4E91\u76D8\uFF0C\u8BF7\u5378\u8F7D\u540E\u518D\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:151
# args: vol.getUuid(),vol.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ ISO\ attached,\ please\ detach\ it\ before\ migration = \u5377[uuid\uFF1A{0}]\u662F\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\u7684\u6839\u5377\u3002\u5F53\u524D\u4E91\u4E3B\u673A\u4ECD\u8FDE\u63A5\u6709ISO\uFF0C\u8BF7\u5728\u8FC1\u79FB\u524D\u5C06\u5176\u5206\u79BB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:176
# args: originClusterUuid,clusterUuid,vol.getVmInstanceUuid()
The\ two\ clusters[uuid\:%s,uuid\:%s]\ cannot\ access\ each\ other\ in\ l2\ network\ \ when\ migrate\ the\ vm[uuid\:%s]\ to\ another\ cluster = \u4E24\u4E2A\u96C6\u7FA4[uuid:{0},uuid:{1}]\u65E0\u6CD5\u5728\u4E8C\u5C42\u7F51\u7EDC\u4E2D\u4E92\u76F8\u8BBF\u95EE\u5BF9\u65B9\uFF0C\u5F53\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{2}]\u4ECE\u5176\u4E2D\u4E00\u4E2A\u96C6\u7FA4\u5230\u53E6\u4E00\u4E2A\u96C6\u7FA4\u65F6

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:130
# args: vol.getUuid(),vol.getName(),vol.getVmInstanceUuid()
the\ data\ volume[uuid\:%s,\ name\:\ %s]\ is\ still\ attached\ to\ the\ VM[uuid\:%s].\ Please\ detach\ it\ before\ migration = \u4E91\u76D8[uuid:{0}, \u540D\u79F0: {1}]\u4ECD\u7136\u6302\u8F7D\u5728\u4E91\u4E3B\u673A[uuid:{2}]\u4E0A\uFF0C\u8BF7\u5728\u8FC1\u79FB\u524D\u5378\u8F7D

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:190
# args: msg.getUrl()
the\ url[%s]\ is\ not\ an\ absolute\ path\ starting\ with\ '/' = url[{0}]\u4E0D\u662F\u4E00\u4E2A\u4EE5'/'\u5F00\u5934\u7684\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:262
# args: msg.getPrimaryStorageUuid()
The\ primary\ storage[uuid\:%s]\ is\ disabled\ cold\ migrate\ is\ not\ allowed = \u4E3B\u5B58\u50A8[uuid:{0}]Disabled\u65F6\u4E0D\u5141\u8BB8\u51B7\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:540
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ not\ on\ the\ local\ storage\ anymore,it\ may\ have\ been\ deleted = \u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u4E0D\u5728\u672C\u5730\u5B58\u50A8\u4E0A\uFF0C\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1168
# args: msg.getImage().getUuid(),self.getUuid(),JSONObjectUtil.toJsonString(ret.errorCodes)
failed\ to\ download\ image[uuid\:%s]\ to\ all\ hosts\ in\ the\ local\ storage[uuid\:%s].\ %s = \u5728\u6240\u6709\u5C5E\u4E8E\u672C\u5730\u5B58\u50A8[uuid:{1}]\u7684\u7269\u7406\u673A\u4E0A\uFF0C\u5747\u65E0\u6CD5\u4E0B\u8F7D\u955C\u50CF[uuid:{0}]\u3002{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:2326
# args: msg.getVolumeUuid(),self.getUuid()
unable\ to\ create\ the\ data\ volume[uuid\:\ %s]\ on\ a\ local\ primary\ storage[uuid\:%s],\ because\ the\ hostUuid\ is\ not\ specified. = \u4E0D\u80FD\u5728\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{1}]\u4E0A\u521B\u5EFA\u4E91\u76D8[uuid:{0}]\uFF0C\u56E0\u4E3A\u7269\u7406\u673Auuid\u6CA1\u6709\u6307\u5B9A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:2887
# args: 
No\ Host\ state\ is\ Enabled,\ Please\ check\ the\ availability\ of\ the\ host = \u672A\u542F\u7528\u7269\u7406\u673A\u72B6\u6001\uFF0C\u8BF7\u68C0\u67E5\u7269\u7406\u673A\u7684\u53EF\u7528\u6027

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3018
# args: hostUuid,self.getUuid()
host[uuid\:%s]\ cannot\ access\ local\ storage[uuid\:%s],\ maybe\ it\ is\ detached = \u7269\u7406\u673A[uuid\uFF1A{0}]\u65E0\u6CD5\u8BBF\u95EE\u672C\u5730\u5B58\u50A8[uuid\uFF1A{1}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u5206\u79BB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3042
# args: resUuid,resourceType,self.getUuid()
resource[uuid\:%s,\ type\:\ %s]\ is\ not\ on\ the\ local\ primary\ storage[uuid\:%s] = \u8D44\u6E90[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]\u4E0D\u5728\u672C\u5730\u4E3B\u5B58\u50A8[uuid\uFF1A{2}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3047
# args: resUuid,resourceType,self.getUuid(),ret
resource[uuid\:%s,\ type\:\ %s]\ on\ the\ local\ primary\ storage[uuid\:%s]\ maps\ to\ multiple\ hypervisor%s = \u672C\u5730\u4E3B\u5B58\u50A8[uuid\uFF1A{2}]\u4E0A\u7684\u8D44\u6E90[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]\u6620\u5C04\u5230\u591A\u4E2A\u4E91\u4E3B\u673A\u7BA1\u7406\u7A0B\u5E8F{3}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:100
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,clusterUuid
There\ is\ no\ LocalStorage\ primary\ storage[state\=%s,status\=%s]\ on\ the\ cluster[%s],\ when\ the\ cluster\ mounts\ multiple\ primary\ storage,\ the\ system\ uses\ the\ local\ primary\ storage\ by\ default.\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = \u5728\u96C6\u7FA4[{2}]\u91CC\u6CA1\u6709LocalStorage\u4E3B\u5B58\u50A8[state={0},status={1}]\uFF0C\u5F53\u96C6\u7FA4\u6302\u8F7D\u4E86\u591A\u4E2A\u4E3B\u5B58\u50A8\u7684\u65F6\u5019\uFF0C\u7CFB\u7EDF\u9ED8\u8BA4\u7684\u662Flocal\u4E3B\u5B58\u50A8\u3002\u68C0\u67E5\u4E3B\u5B58\u50A8\u7684\u72B6\u6001\u5E76\u786E\u5B9A\u662F\u5426\u8FDE\u63A5\u4E86\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:119
# args: psUuid
the\ type\ of\ primary\ storage[uuid\:%s]\ chosen\ is\ not\ local\ storage,\ check\ if\ the\ resource\ can\ be\ created\ on\ other\ storage\ when\ cluster\ has\ attached\ local\ primary\ storage = \u88AB\u9009\u62E9\u7684\u4E3B\u5B58\u50A8[uuid:{0}]\u7684\u7C7B\u578B\u4E0D\u662F\u672C\u5730\u5B58\u50A8\uFF0C\u68C0\u67E5\u8BE5\u8D44\u6E90\u80FD\u5426\u5728\u5176\u4ED6\u5B58\u50A8\u4E0A\u88AB\u521B\u5EFA\u5F53\u96C6\u7FA4\u5DF2\u7ECF\u6302\u8F7D\u4E86\u672C\u5730\u5B58\u50A8

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:187
# args: requiredPrimaryStorageUuidForDataVolume.getUuid(),requiredPrimaryStorageUuidForDataVolume.getType(),LocalStorageConstants.LOCAL_STORAGE_TYPE
The\ cluster\ mounts\ multiple\ primary\ storage[%s(%s),\ other\ non-LocalStorage\ primary\ storage],\ primaryStorageUuidForDataVolume\ cannot\ be\ specified\ %s = \u96C6\u7FA4\u7ED1\u5B9A\u4E86\u591A\u4E2A\u4E3B\u5B58\u50A8[{0}({1}), \u5176\u4ED6\u7684\u975ELocalStorage\u4E3B\u5B58\u50A8]\uFF0C\u4E3B\u5B58\u50A8\u4E91\u76D8\u672A\u8FDB\u884C\u6307\u5B9A{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:126
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ root\ disk\ is\ located = \u96C6\u7FA4[uuid={0}]\u7ED1\u5B9A\u4E86\u591A\u4E2A\u4E3B\u5B58\u50A8[LocalStorage, \u5176\u4ED6\u975ELocalStorage\u4E3B\u5B58\u50A8]\uFF0C\u9700\u8981\u68C0\u9A8C\u4E0B\u4E91\u76D8\u6240\u5728\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:132
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ data\ disk\ is\ located = \u96C6\u7FA4[uuid={0}]\u7ED1\u5B9A\u4E86\u591A\u4E2A\u4E3B\u5B58\u50A8[LocalStorage, \u5176\u4ED6\u975ELocalStorage\u4E3B\u5B58\u50A8]\uFF0C\u9700\u8981\u68C0\u9A8C\u4E0B\u4E91\u76D8\u6240\u5728\u7684\u4E3B\u5B58\u50A8\u3002

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:404
# args: imageUuid,cachedHostUuids
creation\ rely\ on\ image\ cache[uuid\:%s,\ locate\ host\ uuids\:\ [%s]],\ cannot\ create\ other\ places. = \u521B\u5EFA\u4F9D\u8D56\u4E8E\u955C\u50CF\u7F13\u5B58[uuid\uFF1A{0}\uFF0C\u5B9A\u4F4D\u7269\u7406\u673Auuid\uFF1A[{1}]]\uFF0C\u65E0\u6CD5\u521B\u5EFA\u5176\u4ED6\u4F4D\u7F6E\u3002

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:462
# args: spec.getVmInventory().getHypervisorType()
local\ storage\ doesn't\ support\ live\ migration\ for\ hypervisor[%s] = \u672C\u5730\u5B58\u50A8\u4E0D\u652F\u6301\u5BF9\u865A\u62DF\u5316\u7C7B\u578B[{0}]\u8FDB\u884C\u70ED\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:678
# args: volume.getUuid(),vm.getUuid(),vm.getRootVolumeUuid(),rootHost,volume.getUuid(),dataHost
cannot\ attach\ the\ data\ volume[uuid\:%s]\ to\ the\ vm[uuid\:%s].\ Both\ vm's\ root\ volume\ and\ the\ data\ volume\ are\ on\ local\ primary\ storage,\ but\ they\ are\ on\ different\ hosts.\ The\ root\ volume[uuid\:%s]\ is\ on\ the\ host[uuid\:%s]\ but\ the\ data\ volume[uuid\:\ %s]\ is\ on\ the\ host[uuid\:\ %s] = \u4E0D\u80FD\u52A0\u8F7D\u4E91\u76D8[uuid:{0}]\u5230\u4E91\u4E3B\u673A[uuid:{1}]\u3002\u4E91\u76D8\u548C\u4E91\u76D8\u90FD\u5728\u672C\u5730\u4E3B\u5B58\u50A8\u4E0A\uFF0C\u4F46\u4ED6\u4EEC\u5C5E\u4E8E\u4E0D\u540C\u7684\u7269\u7406\u673A\u3002\u4E91\u76D8[uuid:{2}]\u5728\u7269\u7406\u673A[uuid:{3}]\u4E0A\uFF0C\u4F46\u4E91\u76D8[uuid:{4}]\u5728\u7269\u7406\u673A[uuid:{5}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:896
# args: vol.getName(),vol.getUuid(),vol.getPrimaryStorageUuid()
the\ data\ volume[name\:%s,\ uuid\:%s]\ is\ on\ the\ local\ storage[uuid\:%s];\ however,the\ host\ on\ which\ the\ data\ volume\ is\ has\ been\ deleted.\ Unable\ to\ recover\ this\ volume = \u4E91\u76D8[name:{0}, uuid:{1}]\u5728\u672C\u5730\u5B58\u50A8[uuid:{2}]\u4E0A\uFF1B\u7136\u800C\u7269\u7406\u673A\u5185\u7684\u4E91\u76D8\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:938
# args: vm.getUuid(),vm.getName(),psuuid
unable\ to\ recover\ the\ vm[uuid\:%s,\ name\:%s].\ The\ vm's\ root\ volume\ is\ on\ the\ local\ storage[uuid\:%s];\ however,\ the\ host\ on\ which\ the\ root\ volume\ is\ has\ been\ deleted = \u4E0D\u80FD\u6062\u590D\u4E91\u4E3B\u673A[uuid:{0}, name:{1}]\u3002\u4E91\u4E3B\u673A\u7684\u4E91\u76D8\u5728\u672C\u5730\u5B58\u50A8[uuid:{2}]\u4E0A\uFF1B\u7136\u800C\u7269\u7406\u673A\u5185\u7684\u4E91\u76D8\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:972
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ data\ volumes\ on\ local\ storage.\ Need\ detach\ all\ data\ volumes\ first. = \u65E0\u6CD5\u5728\u672C\u5730\u5B58\u50A8\u4E0A\u70ED\u8FC1\u79FB\u6302\u8F7D\u4E86\u4E91\u76D8\u7684\u4E91\u4E3B\u673A[uuid:{0}]\u3002\u9700\u8981\u5148\u624B\u52A8\u5378\u8F7D\u6240\u6709\u4E91\u76D8

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:977
# args: vm.getUuid(),vm.getPlatform()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ local\ storage.\ Only\ linux\ guest\ is\ supported.\ Current\ platform\ is\ [%s] = \u65E0\u6CD5\u5728\u672C\u5730\u5B58\u50A8\u4E0A\u70ED\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{0}]\u3002\u53EA\u6709Linux\u7C7B\u578B\u7684\u4E91\u4E3B\u673A\u652F\u6301\u8BE5\u64CD\u4F5C\u3002\u5F53\u524D\u7C7B\u578B\u4E3A: [{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:982
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ ISO\ on\ local\ storage.\ Need\ detach\ all\ ISO\ first. = \u65E0\u6CD5\u5728\u672C\u5730\u5B58\u50A8\u4E0A\u5B9E\u65F6\u8FC1\u79FB\u5E26\u6709ISO\u7684VM[uuid\uFF1A{0}]\u3002\u9700\u8981\u5148\u5206\u79BB\u6240\u6709ISO\u3002

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:1058
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ data\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ data\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = \u8981\u5728\u672C\u5730\u4E3B\u5B58\u50A8\u4E0A\u521B\u5EFA\u4E91\u76D8\uFF0C\u5FC5\u987B\u7528\u7CFB\u7EDF\u6807\u7B7E[{0}]\u6307\u5B9A\u521B\u5EFA\u4E91\u76D8\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:1068
# args: hostUuid,msg.getPrimaryStorageUuid()
the\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s] = \u7269\u7406\u673A[uuid:{0}] \u4E0D\u5C5E\u4E8E\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:2083
# args: 
root\ image\ has\ been\ deleted,\ cannot\ reimage\ now = \u7CFB\u7EDF\u955C\u50CF\u5DF2\u7ECF\u88AB\u5220\u9664\uFF0C\u65E0\u6CD5\u91CD\u5236\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3676
# args: makeInitializedFilePath(),hostUuid
cannot\ find\ flag\ file\ [%s]\ on\ host\ [%s],\ it\ might\ not\ mount\ correct\ path = \u5728\u7269\u7406\u673A[{1}]\u4E0A\u627E\u4E0D\u5230\u6807\u8BB0\u6587\u4EF6[{0}]\uFF0C\u53EF\u80FD\u662F\u88C5\u8F7D\u8DEF\u5F84\u4E0D\u6B63\u786E

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3684
# args: makeInitializedFilePath(),hostUuid,errorCode.getCause().getDetails()
cannot\ find\ flag\ file\ [%s]\ on\ host\ [%s],\ because\:\ %s = \u627E\u4E0D\u5230\u6807\u8BB0\u6587\u4EF6[{0}]\uFF08\u5728\u7269\u7406\u673A[{1}]\u4E0A\uFF09\uFF0C\u56E0\u4E3A\uFF1A{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3705
# args: makeInitializedFilePath(),hostUuid,errorCode.getCause().getDetails()
cannot\ create\ flag\ file\ [%s]\ on\ host\ [%s],\ because\:\ %s = \u65E0\u6CD5\u5728\u7269\u7406\u673A[{1}]\u4E0A\u521B\u5EFA\u6807\u5FD7\u6587\u4EF6[{0}]\uFF0C\u56E0\u4E3A\uFF1A{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmMigrateVmFlow.java:1192
# args: p.volume.getUuid(),p.volume.getName(),dstHostUuid
unable\ to\ create\ an\ empty\ volume[uuid\:%s,\ name\:%s]\ on\ the\ kvm\ host[uuid\:%s] = \u4E0D\u80FD\u5728\u7269\u7406\u673A[uuid:{2}]\u4E0A\u521B\u5EFA\u7A7A\u4E91\u76D8[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:204
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = \u4ECESFTP\u955C\u50CF\u670D\u52A1\u5668[hostname:{0}, path: {1}] \u4E0B\u8F7D\u5230\u672C\u5730\u5B58\u50A8[uuid:{2}, path: {3}]\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:253
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:%s],\ %s = \u4ECE\u672C\u5730\u5B58\u50A8[uuid:{0}, path: {1}]\u4E0A\u4F20\u5230SFTP\u955C\u50CF\u670D\u52A1\u5668[hostname:{2}, path:{3}]\u5931\u8D25, {4}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:159
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
no\ local\ primary\ storage\ can\ satisfy\ conditions[state\:\ %s,\ status\:\ %s]\ or\ contain\ hosts\ satisfying\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = \u672C\u5730\u4E3B\u5B58\u50A8\u4E0D\u80FD\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{0}\uFF0C\u72B6\u6001\uFF1A{1}]\u6216\u5305\u542B\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{2}\uFF0C\u72B6\u6001\uFF1A{3}\uFF0C\u5927\u5C0F>{4}\u5B57\u8282]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:134
# args: spec.getRequiredZoneUuid(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
no\ local\ primary\ storage\ in\ zone[uuid\:%s]\ can\ satisfy\ conditions[state\:\ %s,\ status\:\ %s]\ or\ contain\ hosts\ satisfying\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = \u533A\u57DF[uuid\uFF1A{0}]\u4E2D\u7684\u672C\u5730\u4E3B\u5B58\u50A8\u4E0D\u80FD\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{1}\uFF0C\u72B6\u6001\uFF1A{2}]\uFF0C\u4E5F\u4E0D\u5305\u542B\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{3}\uFF0C\u72B6\u6001\uFF1A[4}\uFF0C\u5927\u5C0F>{5}\u5B57\u8282]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:107
# args: spec.getRequiredHostUuid(),HostState.Enabled,HostStatus.Connected,spec.getSize(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected
the\ required\ host[uuid\:%s]\ cannot\ satisfy\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes],\ or\ doesn't\ belong\ to\ a\ local\ primary\ storage\ satisfying\ conditions[state\:\ %s,\ status\:\ %s],\ or\ its\ cluster\ doesn't\ attach\ to\ any\ local\ primary\ storage = \u6240\u9700\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]\u65E0\u6CD5\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{1}\uFF0C\u72B6\u6001\uFF1A{2}\uFF0C\u5927\u5C0F>{3}\u5B57\u8282]\uFF0C\u6216\u8005\u4E0D\u5C5E\u4E8E\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{4}\uFF0C\u72B6\u6001\uFF1A{5}]\u7684\u672C\u5730\u4E3B\u5B58\u50A8\uFF0C\u6216\u8005\u5176\u96C6\u7FA4\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55\u672C\u5730\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:79
# args: spec.getRequiredPrimaryStorageUuid(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
required\ local\ primary\ storage[uuid\:%s]\ cannot\ satisfy\ conditions[state\:\ %s,\ status\:\ %s],\ or\ hosts\ providing\ the\ primary\ storage\ don't\ satisfy\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = \u6240\u9700\u7684\u672C\u5730\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\u65E0\u6CD5\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{1}\uFF0C\u72B6\u6001\uFF1A{2}]\uFF0C\u6216\u8005\u63D0\u4F9B\u4E3B\u5B58\u50A8\u7684\u7269\u7406\u673A\u4E0D\u6EE1\u8DB3\u6761\u4EF6[\u72B6\u6001\uFF1A{3}\uFF0C\u72B6\u6001\uFF1A[4}\uFF0C\u5927\u5C0F>{5}\u5B57\u8282]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:201
# args: ref.getHostUuid(),physicalCapacityMgr.getRatio(ref.getPrimaryStorageUuid())
{the\ physical\ capacity\ usage\ of\ the\ host[uuid\:%s]\ has\ exceeded\ the\ threshold[%s]} = '{\u7269\u7406\u673A[uuid\uFF1A{0}']\u7684\u7269\u7406\u5BB9\u91CF\u4F7F\u7528\u7387\u5DF2\u8D85\u8FC7\u9608\u503C[{1}]}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:207
# args: 
failed\ allocate\ localstorage = \u5206\u914DlocalStorage\u5931\u8D25

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:205
# args: resUuid,uuid
Resource[uuid\:%s]\ can\ only\ be\ operated\ on\ host[uuid\:%s],\ but\ the\ host\ has\ been\ deleted = \u8D44\u6E90[uuid:{0}]\u53EA\u80FD\u5728\u7269\u7406\u673A[uuid:{0}]\u4E0A\u5BF9\u5176\u64CD\u4F5C\uFF0C\u4F46\u662F\u8BE5\u7269\u7406\u673A\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:202
# args: resUuid
cannot\ find\ any\ host\ which\ has\ resource[uuid\:%s] = \u627E\u4E0D\u5230\u4EFB\u4F55\u62E5\u6709\u8D44\u6E90[uuid:{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:135
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ local\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = \u4E3B\u5B58\u50A8[uuid:{1}]\u4E0A\u7684\u7269\u7406\u673A[uuid:{0}]\u6CA1\u6709\u8DB3\u591F\u7684\u5BB9\u91CF[\u73B0\u5728: {2} bytes, \u9700\u8981: {3}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:82
# args: msg.getResourceUuid()
Invalid\ resourceUuid\ %s = \u8D44\u6E90uuid{0}\u65E0\u6548

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:88
# args: 
primary\ storage\ uuid\ cannot\ be\ null. = \u4E3B\u5B58\u50A8uuid\u4E0D\u80FD\u4E3A\u7A7A\u3002

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:105
# args: volume.getUuid(),runningVmUuids.toString()
volume[uuid\:%s]\ has\ been\ attached\ some\ VM(s)[uuid\:%s]\ which\ are\ not\ Stopped\ and\ not\ running\ on\ the\ specific\ host. = \u5377[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u67D0\u4E9B\u672A\u505C\u6B62\u4E14\u672A\u5728\u7279\u5B9A\u7269\u7406\u673A\u4E0A\u8FD0\u884C\u7684\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\u3002

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:124
# args: msg.getResourceUuid()
VM[uuid\:%s]\ are\ not\ Stopped\ and\ not\ running\ on\ the\ specific\ host. = \u4E91\u4E3B\u673A[uuid\uFF1A{0}]\u672A\u505C\u6B62\uFF0C\u4E5F\u672A\u5728\u7279\u5B9A\u7269\u7406\u673A\u4E0A\u8FD0\u884C\u3002

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:191
# args: task,hostUuids
Fail\ to\ %s,\ because\ host(s)[uuid\:%s]\ are\ not\ enable\ and\ not\ in\ connected\ status. = {0}\u5931\u8D25\uFF0C\u56E0\u4E3A\u7269\u7406\u673A[uuid\uFF1A{1}]\u672A\u542F\u7528\u4E14\u672A\u5904\u4E8E\u8FDE\u63A5\u72B6\u6001\u3002

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1549
# args: self.getUuid(),hostUuid
cannot\ reserve\ enough\ space\ for\ primary\ storage[uuid\:\ %s]\ on\ host[uuid\:\ %s],\ not\ enough\ physical\ capacity = \u65E0\u6CD5\u4E3A\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u7684\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\u4FDD\u7559\u8DB3\u591F\u7684\u7A7A\u95F4\uFF0C\u7269\u7406\u5BB9\u91CF\u4E0D\u8DB3

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1449
# args: 
not\ supported = \u4E0D\u652F\u6301

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:216
# args: msg.getResourceType()
ResourceType\ [%s]\ of\ APIRecoverResourceSplitBrainMsg\ is\ invalid. = ApiRecoverResourceSplitBrainMsg\u7684ResourceType[{0}]\u65E0\u6548\u3002

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:360
# args: self.getUuid(),self.getName()
the\ mini\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = \u5C0F\u578B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5728\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u4E8E\u5B9E\u4F8B\u5316\u5377\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:673
# args: 
can\ not\ determine\ which\ host = \u65E0\u6CD5\u786E\u5B9A\u662F\u54EA\u4E2A\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1364
# args: 
no\ connected\ host\ found,\ mini\ storage\ failed = \u672A\u627E\u5230\u8FDE\u63A5\u7684\u7269\u7406\u673A\uFF0C\u5C0F\u578B\u5B58\u50A8\u5931\u8D25

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1563
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ mini\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = \u7269\u7406\u673A[uuid\uFF1A{0}]\uFF08\u5C5E\u4E8E\u5C0F\u578B\u4E3B\u5B58\u50A8[uuid\uFF1A{1}]\uFF09\u7684\u5BB9\u91CF\u4E0D\u8DB3[\u5F53\u524D\uFF1A{2}\u5B57\u8282\uFF0C\u9700\u8981\uFF1A{3}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageDeactivateVolumeGC.java:75
# args: hostUuid
the\ host[uuid\:%s]\ is\ not\ connected = \u7269\u7406\u673A[uuid:{0}]\u4E0D\u662FConnected\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageFactory.java:173
# args: hvType,bsType
no\ LocalStorageBackupStorageMediator\ supporting\ hypervisor[%s]\ and\ backup\ storage\ type[%s]\  = \u6CA1\u6709LocalStorageBackupStorageMediator\u652F\u6301hypervisor[{0}]\u548C\u955C\u50CF\u670D\u52A1\u5668\u7C7B\u578B[{1}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java:332
# args: volume.getRootImageUuid(),volume.getUuid()
no\ backup\ storage\ can\ get\ image[uuid\:%s]\ of\ volume[uuid\:%s] = \u6CA1\u6709\u5907\u4EFD\u5B58\u50A8\u53EF\u4EE5\u83B7\u53D6\u955C\u50CF[uuid\uFF1A{0}]\uFF08\u5C5E\u4E8E\u5377[uuid\uFF1A{1}]\uFF09

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java:343
# args: image.getUuid(),cache.backupStorage.getUuid()
image[uuid\:\ %s]\ has\ no\ image\ ref\ with\ backup\ storage[uuid\:\ %s] = \u955C\u50CF[uuid\uFF1A{0}]\u6CA1\u6709\u5907\u4EFD\u5B58\u50A8[uuid\uFF1A{1}]\u7684\u955C\u50CF\u5F15\u7528

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:832
# args: volume.getUuid(),volume.getPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ resize\ volume[uuid\:\ %s]\ on\ mini\ storage[uuid\:\ %s] = \u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u4E8E\u8C03\u6574\u5C0F\u578B\u5B58\u50A8[uuid\uFF1A{1}]\u4E0A\u5377[uuid\uFF1A{0}]\u5927\u5C0F\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:925
# args: volumeUuid
volume[uuid\:%s]\ replication\ is\ syncing\ data,\ please\ wait\ until\ it\ is\ finished. = \u5377[uuid\uFF1A{0}]\u590D\u5236\u6B63\u5728\u540C\u6B65\u6570\u636E\uFF0C\u8BF7\u7B49\u5F85\u5176\u5B8C\u6210\u3002

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:938
# args: volumeUuid
replication\ network\ status\ of\ volume[uuid\:%s]\ run\ into\ StandAlone,\ but\ host\ are\ all\ Connected,\ please\ recover\ it\ first. = \u5377[uuid\uFF1A{0}]\u7684\u590D\u5236\u7F51\u7EDC\u72B6\u6001\u53D8\u4E3A\u72EC\u7ACB\u8FD0\u884C\uFF0C\u4F46\u7269\u7406\u673A\u5747\u5DF2\u8FDE\u63A5\uFF0C\u8BF7\u5148\u5C06\u5176\u6062\u590D\u3002

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java:73
# args: dir
Invalid\ path\ string\ %s = \u8DEF\u5F84\u5B57\u7B26\u4E32{0}\u65E0\u6548

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java:80
# args: resourceUuid
Still\ cache\ volume\ exists\ on\ ps[uuid\:%s]\ can\ not\ update\ cache\ volume\ url = PS[uuid\uFF1A{0}]\u4E0A\u4ECD\u7136\u5B58\u5728\u7F13\u5B58\u5377\uFF0C\u65E0\u6CD5\u66F4\u65B0\u7F13\u5B58\u5377URL

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePathManagerImpl.java:115
# args: resourceUuid,hostUuid
can\ not\ find\ replication\ of\ volume\ %s\ on\ host\ %s = \u5728\u7269\u7406\u673A{1}\u4E0A\u627E\u4E0D\u5230\u5377{0}\u7684\u590D\u5236

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:141
# args: clusterUuid,msg.getPrimaryStorageUuid(),volume.getUuid()
required\ cluster\ %s\ not\ attached\ to\ primary\ storage\ %s\ for\ volume\ %s\ create = \u521B\u5EFA\u5377{2}\u6240\u9700\u7684\u96C6\u7FA4{0}\u672A\u8FDE\u63A5\u5230\u4E3B\u5B58\u50A8{1}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:148
# args: clusterUuid,volume.getUuid()
can\ not\ find\ avaliable\ host\ on\ required\ cluster\ %s\ for\ volume\ %s\ create = \u5728\u521B\u5EFA\u5377{1}\u6240\u9700\u7684\u96C6\u7FA4{0}\u4E0A\u627E\u4E0D\u5230\u53EF\u7528\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:445
# args: primaryStorageUuid
cannot\ find\ an\ available\ host\ to\ execute\ command\ for\ primary\ storage[uuid\:\ %s] = \u627E\u4E0D\u5230\u53EF\u7528\u4E8E\u6267\u884C\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\u547D\u4EE4\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:476
# args: hostUuid
can\ not\ allocate\ storage\ sync\ port\ on\ host\ %s\:\ %s = \u65E0\u6CD5\u5728\u7269\u7406\u673A{0}\u4E0A\u5206\u914D\u5B58\u50A8\u540C\u6B65\u7AEF\u53E3\uFF1A{1}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:622
# args: hostUuids,finalHostUuids
expect\ operate\ on\ hosts[%s]\ but\ only\ host\ %s\ are\ connected\ and\ enabled = \u9884\u671F\u5728\u7269\u7406\u673A[{0}]\u4E0A\u8FD0\u884C\uFF0C\u4F46\u53EA\u6709\u7269\u7406\u673A{1}\u5DF2\u8FDE\u63A5\u5E76\u542F\u7528

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniToZBoxBackupStorageMediator.java:91
# args: msg.getPrimaryStorageUuid()
mini\ storage[uuid\:%s]\ has\ to\ be\ empty\ before\ restoring\ bits\ from\ zbox.\ please\ clean\ it\ up. = \u4ECEZBox\u8FD8\u539F\u4F4D\u4E4B\u524D\uFF0C\u5C0F\u578B\u5B58\u50A8[uuid\uFF1A{0}]\u5FC5\u987B\u4E3A\u7A7A\u3002\u8BF7\u628A\u5B83\u6E05\u7406\u5E72\u51C0\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:46
# args: url,zoneUuid
there\ has\ been\ a\ nfs\ primary\ storage\ having\ url\ as\ %s\ in\ zone[uuid\:%s] = \u533A\u57DF[uuid:{1}]\u5185\u5DF2\u7ECF\u5B58\u5728 url \u4E3A {0} \u7684 NFS \u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:65
# args: 
found\ multiple\ CIDR = \u8FD4\u73B0\u591A\u4E2ACIDR

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:78
# args: cidr
invalid\ CIDR\:\ %s = \u65E0\u6548CIDR: {0}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:82
# args: ipAddr,cidr
IP\ address[%s]\ is\ not\ in\ CIDR[%s] = IP\u5730\u5740[{0}]\u6CA1\u6709\u5728CIDR[{1}]\u5185

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:96
# args: vms.size(),StringUtils.join(vms, "\n")
there\ are\ %s\ running\ VMs\ on\ the\ NFS\ primary\ storage,\ please\ stop\ them\ and\ try\ again\:\n%s\n = \u5728NFS\u4E3B\u5B58\u50A8\u4E0A\u6709{0}\u4E2A\u8FD0\u884C\u4E2D\u7684VM\uFF0C\u8BF7\u5148\u624B\u52A8\u5173\u95ED\u518D\u5C1D\u8BD5: \n{1}\n

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:694
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state\ is\ %s = \u4E91\u4E3B\u673A[uuid:{0}]\u4E0D\u662F\u8FD0\u884C\u4E2D\u3001\u5DF2\u6682\u505C\u6216\u8005\u5DF2\u505C\u6B62\u72B6\u6001\uFF0C\u73B0\u5728\u7684\u72B6\u6001\u662F{1}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:303
# args: 
cannot\ find\ usable\ backend = \u65E0\u6CD5\u627E\u5230\u53EF\u7528\u7684NFS\u4E3B\u5B58\u50A8\u540E\u7AEF

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:362
# args: 
no\ usable\ backend\ found = \u65E0\u6CD5\u627E\u5230\u53EF\u7528\u7684NFS\u4E3B\u5B58\u50A8\u540E\u7AEF

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:520
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getSnapshot().getUuid(),msg.getSnapshot().getName()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s,\ name\:%s] = \u6CA1\u6709\u627E\u5230\u6302\u8F7D\u5230NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u4E14\u5904\u4E8EConnected\u72B6\u6001\u7684\u7269\u7406\u673A\uFF0C\u65E0\u6CD5\u56DE\u9000\u4E91\u76D8[uuid:{2}]\u5230\u5FEB\u7167[uuid:{3}, name:{4}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:551
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getRootImageUuid()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s] = \u6CA1\u6709\u627E\u5230\u6302\u8F7D\u5230NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u4E14\u5904\u4E8EConnected\u72B6\u6001\u7684\u7269\u7406\u673A\uFF0C\u65E0\u6CD5\u56DE\u9000\u4E91\u76D8[uuid:{2}]\u5230\u955C\u50CF[uuid:{3}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:737
# args: self.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ attach\ to\ any\ cluster = \u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:968
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ usable\ host\ to\ create\ the\ data\ volume[uuid\:%s,\ name\:%s] = NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u65E0\u6CD5\u627E\u5230\u4EFB\u4F55\u53EF\u7528\u7684\u7269\u7406\u673A\u4EE5\u521B\u5EFA\u4E91\u76D8[uuid:{2}, name:{3}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1889
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ hosts\ in\ attached\ clusters\ to\ perform\ the\ operation = NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u4E0D\u80FD\u627E\u5230\u7269\u7406\u673A\u6302\u8F7D\u5230\u96C6\u7FA4\uFF0C\u6267\u884C\u6B64\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1726
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}] \u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u4E00\u4E2A\u96C6\u7FA4\uFF0C\u6216\u8005\u6302\u8F7D\u5230\u96C6\u7FA4\u7684\u7269\u7406\u673A\u5747\u65E0\u6CD5\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:115
# args: psUuid,vmUuid,volumeUuid
the\ NFS\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = NFS\u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4\uFF0C\u65E0\u6CD5\u5F7B\u5E95\u5220\u9664VM[uuid:{2}]\u7684\u4E91\u76D8[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:281
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = \u5BF9nfs\u4E3B\u5B58\u50A8[uuid:{0}]\u6765\u8BF4\u4E0D\u80FD\u53D1\u73B0\u4E00\u4E2A\u53EF\u8FDE\u63A5\u7684\u7269\u7406\u673A\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:272
# args: pri.getUuid()
cannot\ find\ a\ connected\ host\ in\ cluster\ which\ ps\ [uuid\:\ %s]\ attached = \u5728PS[uuid\uFF1A{0}]\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u5DF2\u8FDE\u63A5\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:300
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-NFS\ connection\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u4E00\u4E2A\u548CNFS\u4E3B\u5B58\u50A8[uuid:{0}]\u5904\u4E8E\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\u4E3A\u5176\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:804
# args: msg.getVolume().getUuid()
cannot\ get\ root\ image\ of\ volume[uuid\:%s],\ may\ be\ it\ create\ from\ iso = \u65E0\u6CD5\u83B7\u53D6\u5377[uuid\uFF1A{0}]\u7684\u6839\u955C\u50CF\uFF0C\u5B83\u53EF\u80FD\u662F\u4ECEISO\u521B\u5EFA\u7684

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:248
# args: inv.getUuid(),inv.getName(),clusterUuid,versionInCluster,otherVersion,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage[uuid\:%s,\ name\:%s]\ to\ cluster[uuid\:%s].\ Kvm\ host\ in\ the\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ another\ cluster\ that\ has\ kvm\ host\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = \u4E0D\u80FD\u6302\u8F7D\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u5230\u96C6\u7FA4[uuid:{2}].\u96C6\u7FA4\u4E2D\u7684\u7269\u7406\u673A\u5B58\u5728[{3}]\u7248\u672Cqemu-img\uFF1B\u4F46\u662F\u4E3B\u5B58\u50A8\u5DF2\u7ECF\u6302\u8F7D\u5230\u53E6\u4E00\u4E2A\u7269\u7406\u673A\u62E5\u6709[{4}]\u7248\u672Cqemu-img\u7684\u96C6\u7FA4\u3002\u7248\u672C\u5927\u4E8E{5}\u7684qemu-img\u4E0D\u517C\u5BB9\u7248\u672C\u5C0F\u4E8E{6}\uFF0C\u8FD9\u5C06\u4F1A\u9020\u6210\u4E91\u76D8\u5FEB\u7167\u64CD\u4F5C\u5931\u8D25\u3002\u4E3A\u4E86\u9632\u6B62qemu-img\u7248\u672C\u4E0D\u517C\u5BB9\uFF0C\u8BF7\u907F\u514D\u6302\u8F7D\u4E3B\u5B58\u50A8\u5230\u7269\u7406\u673A\u88C5\u6709\u4E0D\u540Clinux\u7248\u672C\u7684\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:323
# args: cmd.getInstallUrl(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ folder[installUrl\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid\uFF1A{1}\uFF0CIP\uFF1A{2}]\u4E0A\u521B\u5EFA\u6587\u4EF6\u5939[InstallUrl\uFF1A{0}]\uFF0C\u539F\u56E0\u662F{3}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:401
# args: inv.getUuid()
no\ host\ in\ is\ Connected\ or\ primary\ storage[uuid\:%s]\ attach\ no\ cluster = \u6CA1\u6709\u7269\u7406\u673A\u5904\u4E8EConnected\u72B6\u6001\uFF0C\u6216\u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:440
# args: psInv.getUuid(),huuid,reply.isSuccess() ? rsp.getError() : reply.getError()
failed\ to\ ping\ nfs\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = \u4ECE\u7269\u7406\u673A[uuid:{1}]Ping NFS\u4E3B\u5B58\u50A8[uuid:{0}]\u5931\u8D25\uFF0C\u539F\u56E0: {2}\u3002\u65AD\u5F00\u8BE5 \u7269\u7406\u673A-\u4E3B\u5B58\u50A8 \u8FDE\u63A5

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:879
# args: msg.getHostUuid()
The\ chosen\ host[uuid\:%s]\ to\ perform\ storage\ migration\ is\ lost = \u51C6\u5907\u5B58\u50A8\u8FC1\u79FB\u7684\u7269\u7406\u673A[uuid:{0}]\u5931\u8054\u4E86

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1017
# args: installPath,inv.getUuid(),rsp.getError()
failed\ to\ check\ existence\ of\ %s\ on\ nfs\ primary\ storage[uuid\:%s],\ %s = \u68C0\u67E5nfs\u4E3B\u5B58\u50A8\u4E2D\u662F\u5426\u5B58\u5728{0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1131
# args: volume.getUuid(),volume.getName(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ empty\ volume[uuid\:%s,\ \ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u4E0D\u80FD\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u521B\u5EFA\u7A7A\u4E91\u76D8[uuid:{0},  name:{1}]\uFF0C\u56E0\u4E3A{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1240
# args: installPath,pinv.getUuid(),rsp.getError()
failed\ to\ delete\ bits[%s]\ on\ nfs\ primary\ storage[uuid\:%s],\ %s,\ will\ clean\ up\ installPath,\ pinv.getUuid(),\ rsp.getError() = \u65E0\u6CD5\u5220\u9664NFS\u4E3B\u5B58\u50A8[uuid\uFF1A{1}]\u4E0A\u7684\u4F4D[{0}]\uFF0C{2}\uFF0C\u5C06\u6E05\u9664InstallPath\u3001PINV.Getuuid\uFF08\uFF09\u3001RSP.GetError\uFF08\uFF09

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1302
# args: vol.getUuid(),sinv.getUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = \u56DE\u6EDA\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u7684\u4E91\u76D8[uuid:{0}]\u5230\u5FEB\u7167[uuid:{1}]\u7684\u72B6\u6001\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1339
# args: vol.getUuid(),vol.getRootImageUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = \u56DE\u6EDA\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u7684\u4E91\u76D8[uuid:{0}]\u5230\u955C\u50CF[uuid:{1}]\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1383
# args: volume.getUuid(),imageCache.getImageUuid(),rsp.getError()
fails\ to\ create\ root\ volume[uuid\:%s]\ from\ cached\ image[path\:%s]\ because\ %s = \u4ECE\u955C\u50CF[path:{1}]\u521B\u5EFA\u4E91\u76D8\u5931\u8D25\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1541
# args: clusterUuid
no\ hosts\ in\ the\ cluster[uuid\:%s]\ are\ connected = \u96C6\u7FA4[uuid\uFF1A{0}]\u4E2D\u6CA1\u6709\u8FDE\u63A5\u4EFB\u4F55\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:109
# args: backupStorageInstallPath,greply.getHostname(),pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download[%s]\ from\ SftpBackupStorage[hostname\:%s]\ to\ nfs\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = \u4ECESftp\u955C\u50CF\u670D\u52A1\u5668[hostname:{1}] \u4E0B\u8F7D[{0}]\u5230nfs\u4E3B\u5B58\u50A8[uuid:{2}, path:{3}]\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:165
# args: pinv.getUuid(),primaryStorageInstallPath,hostname,backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ nfs\ primary\ storage[uuid\:%s,\ path\:%s]\ to\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s],\ %s = \u4ECEnfs\u4E3B\u5B58\u50A8[uuid:{0}, path:{1}]\u4E0A\u4F20\u6570\u636E\u5230STFP\u955C\u50CF\u670D\u52A1\u5668[hostname:{2}, path: {3}]\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/shareblock/ShareBlockHostHeartbeatChecker.java:135
# args: cmd.hostUuid,sentinelHostUuid
shareblock\ says\ host\ %s\ is\ offline\ on\ %s = ShareBlock\u663E\u793A\u7269\u7406\u673A{0}\u5728{1}\u4E0A\u5904\u4E8E\u8131\u673A\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/sharedblock/HaSanlockHostChecker.java:141
# args: cmd.hostIds,sentinelHostUuid
sanlock\ says\ host\ %s\ is\ offline\ on\ %s = SANlock\u6307\u51FA\u7269\u7406\u673A{0}\u5728{1}\u4E0A\u5904\u4E8E\u8131\u673A\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:110
# args: primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = \u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u4EE5\u6267\u884C\u64CD\u4F5C\u7684\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\uFF0C\u6240\u6709\u7684\u5171\u4EAB\u5B58\u50A8[uuid:{0}]\u6302\u8F7D\u7684\u96C6\u7FA4\u4E0B\u7684\u7269\u7406\u673A\u90FD\u5904\u4E8E\u5DF2\u5931\u8054\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:80
# args: 
can\ not\ find\ volume\ need\ to\ operate\ shared\ block\ group\ primary\ storage = \u627E\u4E0D\u5230\u80FD\u8FDB\u884C\u5171\u4EAB\u5757\u5B58\u50A8\u64CD\u4F5C\u7684\u4E91\u76D8

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:88
# args: volumeInventory.getUuid(),primaryStorageUuid
KVM\ host\ which\ volume[uuid%s]\ attached\ disconnected\ with\ the\ shared\ block\ group\ storage[uuid\:%s] = \u4E91\u76D8[uuid:{0}]\u6240\u5904\u7684\u6302\u8F7D\u4E86\u5171\u4EAB\u5757\u5B58\u50A8[uuid:{1}]\u7269\u7406\u673A\u5747\u5904\u4E8E\u5DF2\u5931\u8054\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:98
# args: psUuid
can\ not\ find\ qualified\ kvm\ host\ for\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = \u65E0\u6CD5\u627E\u5230\u6EE1\u8DB3\u6761\u4EF6\u7684\u7269\u7406\u673A\u6765\u5BF9\u5171\u4EAB\u5757\u5B58\u50A8[uuid: {0}]\u8FDB\u884C\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:81
# args: sharedBlockVO.getSharedBlockGroupUuid(),scsiLunVO.getWwid()
primary\ storage[uuid\:\ %s]\ has\ attached\ the\ scsi\ lun[wwid\:\ %s] = \u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5SCSI Lun[WWID\uFF1A{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:105
# args: msg.getVmInstanceUuid()
the\ vm[uuid\:\ %s]\ does\ not\ has\ additional\ qmp\ socket,\ it\ may\ because\ of\ the\ vm\ start\ without\ the\ global\ config[vm.additionalQmp]\ enabled,\ please\ make\ sure\ it\ enabled\ and\ reboot\ vm\ in\ zstack = VM[uuid\uFF1A{0}]\u6CA1\u6709\u5176\u4ED6QMP\u5957\u63A5\u5B57\uFF0C\u8FD9\u53EF\u80FD\u662F\u56E0\u4E3AVM\u5728\u672A\u542F\u7528\u5168\u5C40\u914D\u7F6E[VM.AdditionalQMP]\u7684\u60C5\u51B5\u4E0B\u542F\u52A8\uFF0C\u8BF7\u786E\u4FDD\u5176\u5DF2\u542F\u7528\u5E76\u5728ZStack\u4E2D\u91CD\u65B0\u542F\u52A8VM

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:130
# args: 
must\ specify\ at\ least\ one\ disk\ when\ add\ shared\ block\ group\ primary\ storage = \u6DFB\u52A0\u5171\u4EAB\u5757\u5B58\u50A8\u65F6\u5FC5\u987B\u6307\u5B9A\u81F3\u5C11\u4E00\u4E2A\u4E91\u76D8

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:142
# args: vo.getUuid(),vo.getDiskUuid(),vo.getDescription(),vo.getSharedBlockGroupUuid()
shared\ block[uuid\:%s,\ diskUuid\:%s,\ description\:%s]\ already\ added\ to\ shared\ block\ group[uuid\:%s]in\ new\ shared\ block\ group = \u5171\u4EAB\u5757[uuid:{0}, diskUuid:{1}, \u63CF\u8FF0:{2}]\uFF0C\u5DF2\u7ECF\u6DFB\u52A0\u5230\u5171\u4EAB\u5757\u7EC4[uuid:{3}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:165
# args: msg.getUuid()
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ can\ not\ resize = SharedBlock\u4E3B\u5B58\u50A8\u4E0A\u7684\u5171\u4EAB\u4E91\u76D8[uuid: {0}]\u6682\u65F6\u4E0D\u652F\u6301\u6269\u5BB9

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:234
# args: volumeUuid,notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = SharedBlock\u5B58\u50A8\u4E0A\u7684\u5171\u4EAB\u4E91\u76D8[uuid: {0}]\u52A0\u8F7D\u5230\u4E86\u4E0D\u662F\u505C\u6B62\u72B6\u6001\u7684\u4E91\u4E3B\u673A[uuid: {1}]\uFF0C\u8BF7\u5148\u4ECE\u4E91\u4E3B\u673A\u5378\u8F7D\u6216\u5C06\u4E91\u4E3B\u673A\u505C\u6B62

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1665
# args: psUuid,imageFormat
cannot\ find\ proper\ hypervisorType\ for\ primary\ storage[uuid\:%s]\ to\ handle\ image\ format\ or\ volume\ format[%s] = \u5BF9\u4E3B\u5B58\u50A8[uuid:{0}]\u6765\u8BF4\u4E0D\u80FD\u53D1\u73B0\u5408\u9002\u7684\u7BA1\u7406\u7A0B\u5E8F\u7C7B\u578B\u6765\u5904\u7406\u955C\u50CF\u683C\u5F0F\u6216\u4E91\u76D8\u683C\u5F0F[{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:344
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = \u5171\u4EAB\u6302\u8F7D\u70B9\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u5728\u6302\u8F7D\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u7684\u7269\u7406\u673A\u6765\u5B9E\u4F8B\u5316\u4E91\u76D8

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:697
# args: getSelfInventory().getUuid()
can\ not\ found\ any\ cluster\ attached\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %S] = \u627E\u4E0D\u5230\u4EFB\u4F55\u6302\u8F7D\u4E86\u5171\u4EAB\u5757\u4E3B\u5B58\u50A8[uuid: %S]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1100
# args: self.getUuid(),self.getName()
the\ shared\ block\ group\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = SharedBlock\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}] \u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u4E00\u4E2A\u96C6\u7FA4\uFF0C\u6216\u8005\u6302\u8F7D\u5230\u96C6\u7FA4\u7684\u7269\u7406\u673A\u5747\u65E0\u6CD5\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1179
# args: self.getUuid(),self.getName()
the\ SharedBlock\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = SharedBlock\u4E3B\u5B58\u50A8[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]\u5C1A\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55\u96C6\u7FA4\uFF0C\u6216\u8005\u5DF2\u8FDE\u63A5\u7684\u96C6\u7FA4\u4E2D\u6CA1\u6709\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1369
# args: 
empty\ migrateVolumeStructs\ in\ migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg! = MigrateEvoluesBetweenSharedBlockGroupPrimaryStorageMsg\u4E2D\u7684MigrateEvolumeStructs\u4E3A\u7A7A\uFF01

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1375
# args: 
no\ volume\ in\ migrateVolumeStructs\ in\ migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg! = MigrateEvolumesBetweenSharedBlockGroupPrimaryStorageMsg\u4E2D\u7684MigrateEvolmeStructs\u4E2D\u6CA1\u6709\u5377\uFF01

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:112
# args: newValue
the\ value[%s]\ is\ not\ power\ of\ 2 = \u8F93\u5165\u503C[{0}]\u4E0D\u662F2\u7684\u5E42\u6B21

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:444
# args: pri.getUuid()
cannot\ find\ an\ available\ host\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u52A0\u8F7D\u4E86\u5171\u4EAB\u5757\u5B58\u50A8\u7684[uuid:{0}]\u53EF\u7528\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:468
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ connected\ shared\ block\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u5904\u4E8E\u8FDE\u63A5\u72B6\u6001\u7684\u52A0\u8F7D\u4E86\u5171\u4EAB\u5757\u5B58\u50A8[uuid:{0}]\u7269\u7406\u673A\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:515
# args: vmvo.getHostUuid(),volumeInventory.getUuid(),volumeInventory.getPrimaryStorageUuid()
the\ host[uuid\:\ %s]\ running\ on\ is\ not\ available\ to\ resize\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = \u5171\u4EAB\u5757\u5B58\u50A8[uuid: {2}]\u4E0A\u7684\u4E91\u76D8[uuid : {1}]\u8FD0\u884C\u5728\u7269\u7406\u673A[uuid : {0}]\u4E0A\uFF0C\u4F46\u72B6\u6001\u65E0\u6CD5\u6267\u884C\u6269\u5BB9\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:524
# args: psUuid
primary\ storage[uuid\:%s]\ not\ found = \u627E\u4E0D\u5230\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:541
# args: volUuid
volume[uuid\:%s]\ not\ found = \u672A\u627E\u5230\u5377[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockImageStoreBackend.java:81
# args: volumeUuid
can\ not\ get\ cluster\ uuid\ of\ volume\ %s = \u65E0\u6CD5\u83B7\u53D6\u5377{0}\u7684\u96C6\u7FA4uuid

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1413
# args: img.getUuid(),img.getName(),self.getZoneUuid()
the\ image[uuid\:%s,\ name\:\ %s]\ is\ not\ available\ to\ download\ on\ any\ backup\ storage\:\n1.\ check\ if\ image\ is\ in\ status\ of\ Deleted\n2.\ check\ if\ the\ backup\ storage\ on\ which\ the\ image\ is\ shown\ as\ Ready\ is\ attached\ to\ the\ zone[uuid\:%s] = \u4E0D\u80FD\u4ECE\u955C\u50CF\u670D\u52A1\u5668\u4E2D\u4E0B\u8F7D\u955C\u50CF[uuid:%s, name: %s]\n1.\u68C0\u67E5\u955C\u50CF\u662F\u5426\u5904\u4E8E\u88AB\u5220\u9664\u72B6\u6001\n2.\u68C0\u67E5\u955C\u50CF\u5904\u4E8E\u5C31\u7EEA\u72B6\u6001\u7684\u955C\u50CF\u670D\u52A1\u5668\u662F\u5426\u6302\u8F7D\u5230\u533A\u57DF[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1251
# args: volume.getUuid(),volume.getVmInstanceUuid(),state
the\ volume[uuid;%s]\ is\ attached\ to\ a\ VM[uuid\:%s]\ which\ is\ in\ state\ of\ %s,\ cannot\ do\ the\ snapshot\ merge = \u4E91\u76D8[uuid;{0}] \u6302\u8F7D\u5230\u5904\u4E8E{2}\u72B6\u6001\u7684\u4E91\u4E3B\u673A\uFF0C\u4E0D\u80FD\u5408\u5E76\u5FEB\u7167

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1907
# args: clusterUuid
no\ connected\ host\ found\ in\ the\ cluster[uuid\:%s] = cluster[uuid:{0}]\u4E0D\u5B58\u5728\u5DF2\u8FDE\u63A5\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5893
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state[%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u4E0D\u662F\u8FD0\u884C\u4E2D\u3001\u5DF2\u6682\u505C\u6216\u8005\u5DF2\u505C\u6B62\u72B6\u6001\uFF0C\u73B0\u5728\u7684\u72B6\u6001\u662F[{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2798
# args: backupStorageUuid
cannot\ find\ backup\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u955C\u50CF\u670D\u52A1\u5668[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2260
# args: msg.getVolumeUuid()
can\ not\ find\ volume[uuid\:\ %s] = \u627E\u4E0D\u5230\u4E91\u76D8[uuid: {0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:773
# args: 
shared\ volume\ not\ support\ thin\ provisioning = \u5171\u4EAB\u4E91\u76D8\u4E0D\u652F\u6301\u7CBE\u7B80\u914D\u7F6E

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1340
# args: volume.getUuid()
not\ support\ online\ merge\ snapshot\ for\ shareable\ volume[uuid\:\ %s]\ on\ sharedblock = \u4E0D\u652F\u6301\u5BF9\u5171\u4EAB\u5757\u5B58\u50A8\u4E0A\u7684\u5171\u4EAB\u4E91\u76D8[uuid: {1}]\u505A\u5728\u7EBF\u5408\u5E76\u5FEB\u7167\uFF0C\u8BF7\u5173\u673A\u6216\u5378\u8F7D\u540E\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1429
# args: img.getUuid(),img.getName()
the\ image[uuid\:\ %s,\ name\:%s]\ is\ not\ found\ on\ any\ backup\ storage = \u5728\u4EFB\u4F55\u5907\u4EFD\u5B58\u50A8\u4E0A\u90FD\u627E\u4E0D\u5230\u955C\u50CF[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2043
# args: ret.firstAccessHosts.stream().map( h -> h.hostUuid).collect(Collectors.toList())
hosts[uuid\:%s]\ have\ the\ disk\ uuid\ of\ shared\ block,\ but\ actually\ different\ storage. = \u7269\u7406\u673A[uuid:{0}]\u5DF2\u7ECF\u52A0\u8F7D\u4E86\u76F8\u540Cuuid\u7684\u5171\u4EAB\u5757\uFF0C\u4F46\u5B9E\u9645\u4E0A\u662F\u4E0D\u540C\u7684\u5B58\u50A8

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2400
# args: 
not\ support\ convert\ thin\ volume\ to\ thick\ volume\ yet = \u5C1A\u4E0D\u652F\u6301\u5C06\u7CBE\u7B80\u5377\u8F6C\u6362\u4E3A\u5BC6\u96C6\u5377

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2453
# args: 
expected\ status\ is\ %s\ and\ current\ status = \u9884\u671F\u72B6\u6001\u4E3A{0}\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3409
# args: spec.getVmInventory().getUuid(),String.join(",", psUuids)
VM[uuid\:%s]\ has\ multiple\ ISOs\ from\ different\ primary\ storage\:\ %s = VM[uuid:{0}]\u6302\u8F7D\u4E86\u6765\u81EA\u4E0D\u540C\u4E3B\u5B58\u50A8:{1}\u7684ISO

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3584
# args: volume.getUuid()
QCow2\ shared\ volume[uuid\:%s]\ is\ not\ supported = \u4E0D\u652F\u6301QCOW2\u5171\u4EAB\u4E91\u76D8[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4650
# args: msg.getVolumeUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ take\ snapshot\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = \u65E0\u6CD5\u627E\u5230\u5408\u9002\u7684\u7269\u7406\u673A\u6765\u5BF9\u5171\u4EAB\u5757\u5B58\u50A8[uuid : {1}]\u4E0A\u7684\u4E91\u76D8[uuid: {0}]\u6267\u884C\u5FEB\u7167\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4708
# args: msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ hosts\ both\ connect\ to\ primary\ storage[uuid\:\ %s]\ and\ primary\ storage[uuid\:\ %s] = \u65E0\u6CD5\u627E\u5230\u540C\u65F6\u8FDE\u63A5\u4E3B\u5B58\u50A8[uuid: {0}]\u548C\u4E3B\u5B58\u50A8[uuid: {1}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4663
# args: 
only\ support\ full = \u5171\u4EAB\u5757\u5B58\u50A8\u76EE\u524D\u53EA\u652F\u6301\u5168\u91CF\u5FEB\u7167

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4691
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ volume[uuid\:\ %s]\ between\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = \u65E0\u6CD5\u627E\u5230\u5408\u9002\u7684\u7269\u7406\u673A\u6765\u5C06\u4E91\u76D8[uuid: {0}]\u5728\u5171\u4EAB\u5757\u5B58\u50A8[uuid : {1}]\u548C\u5171\u4EAB\u5757\u5B58\u50A8[uuid: {2}]\u4E4B\u95F4\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4700
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getTargetPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = \u65E0\u6CD5\u627E\u5230\u5408\u9002\u7684\u7269\u7406\u673A\u6765\u5C06\u4E91\u76D8[uuid: {0}]\u5728\u5171\u4EAB\u5757\u5B58\u50A8[uuid : {1}]\u548C\u5171\u4EAB\u5757\u5B58\u50A8[uuid: {2}]\u4E4B\u95F4\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4753
# args: msg.getPrimaryStorageUuid()
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = \u65E0\u6CD5\u627E\u5230\u4EFB\u4F55\u5DF2\u8FDE\u63A5\u7684\u7269\u7406\u673A\u6765\u6267\u884C\u64CD\u4F5C\uFF0C\u6240\u6709\u8FDE\u63A5\u5171\u4EAB\u5757\u5B58\u50A8[uuid: {1}]\u7684\u7269\u7406\u673A\u5747\u5904\u4E8E\u5931\u8054\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4971
# args: snapshotVO.getUuid(),volumeVO.getUuid()
cannot\ shrink\ snapshot\ %s,\ because\ volume\ %s\ not\ ready = \u65E0\u6CD5\u6536\u7F29\u5FEB\u7167{0}\uFF0C\u56E0\u4E3A\u5377{1}\u672A\u5C31\u7EEA

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5147
# args: snapshotVO.getUuid(),instanceVO.getUuid()
cannot\ shrink\ snapshot\ %s,\ beacuse\ vm\ %s\ not\ in\ Running/Stopped\ state = \u65E0\u6CD5\u6536\u7F29\u5FEB\u7167{0}\uFF0C\u56E0\u4E3AVM{1}\u672A\u5904\u4E8E\u6B63\u5728\u8FD0\u884C/\u5DF2\u505C\u6B62\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5394
# args: vmVolumesStruct.vmInstanceVO.getUuid()
get\ null\ install\ path\ in\ snapshot\ for\ vm\ %s = \u5728\u4E91\u4E3B\u673A{0}\u7684\u5FEB\u7167\u4E2D\u83B7\u53D6Null\u5B89\u88C5\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5707
# args: msg.getDstPath(),msg.getVolume().getUuid()
dest\ path\ %s\ not\ belong\ to\ volume\ %s\ any\ snapshot = \u76EE\u6807\u8DEF\u5F84{0}\u4E0D\u5C5E\u4E8E\u4EFB\u4F55\u5FEB\u7167\u7684\u5377{1}

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkCancelMigrateVolumeFlow.java:33
# args: 
migrate\ volume\ without\ snapshot\ on\ shared\ block\ is\ not\ support\ to\ cancel. = \u4E0D\u652F\u6301\u53D6\u6D88\u5728\u5171\u4EAB\u6570\u636E\u5757\u4E0A\u8FC1\u79FB\u4E0D\u5E26\u5FEB\u7167\u7684\u5377\u3002

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:131
# args: reply1.getTrashId(),dstPsUuid,dstVolumeFolderPath,reply1.getResourceUuid()
found\ trashId(%s)\ in\ PrimaryStorage\ [%s]\ for\ the\ migrate\ installPath[%s].\ Please\ clean\ it\ first\ by\ 'APICleanUpTrashOnPrimaryStorageMsg'\ if\ you\ insist\ to\ migrate\ the\ volume[%s] = \u5728\u4E3B\u5B58\u50A8[{1}]\u7684\u56DE\u6536\u6570\u636E({0})\u4E2D\u5DF1\u5B58\u5728\u8981\u8FC1\u79FB\u7684\u76EE\u6807\u8DEF\u5F84[{2}]\uFF0C\u5982\u679C\u8981\u7EE7\u7EED\u8FC1\u79FB\u4E91\u76D8[{3}]\uFF0C\u8BF7\u5148\u8C03\u7528'APICleanUpTrashOnPrimaryStorageMsg'\u6765\u624B\u52A8\u6E05\u7406\u8BE5\u56DE\u6536\u6570\u636E

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:271
# args: volumeUuid,volumeVO.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = \u5BF9\u4E91\u76D8[uuid: {0}]\u5B58\u50A8\u8FC1\u79FB\u9700\u8981\u76EE\u6807\u4E3B\u5B58\u50A8\u5177\u6709\u81F3\u5C11{1}\u7684\u7A7A\u4F59\u5BB9\u91CF\uFF0C\u4F46\u73B0\u5728\u53EA\u6709{2}\u7684\u7A7A\u4F59\u5BB9\u91CF

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:202
# args: imageUuid,zoneUuid,zoneUuid
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ whether\ the\ backup\ storage\ is\ attached\ to\ the\ zone[uuid\:%s]\n2.\ whether\ the\ backup\ storage\ is\ in\ connected\ status;\ try\ to\ reconnect\ it\ if\ not = \u5728\u6240\u6709\u7684\u5DF2\u8FDE\u63A5\u533A\u57DF[uuid:{1}]\u7684\u955C\u50CF\u670D\u52A1\u5668\u672A\u627E\u5230\u955C\u50CF[uuid:{0}]\u3002\u5EFA\u8BAE\u8FDB\u884C\u5982\u4E0B\u68C0\u67E5: \n1.\u955C\u50CF\u670D\u52A1\u5668\u662F\u5426\u8FDE\u63A5\u5230\u533A\u57DF[uuid:{2}]\n2.\u955C\u50CF\u670D\u52A1\u5668\u662F\u5426\u662F\u5DF2\u8FDE\u63A5\u72B6\u6001\uFF0C\u5982\u679C\u4E0D\u662F\u5C1D\u8BD5\u91CD\u65B0\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:225
# args: image.getUuid(),volumeUuid,image.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ image[uuid\:\ %s]\ download\ while\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = \u5BF9\u4E91\u76D8[uuid: {0}]\u5B58\u50A8\u8FC1\u79FB\u9700\u8981\u76EE\u6807\u4E3B\u5B58\u50A8\u5177\u6709\u81F3\u5C11{1}\u7684\u7A7A\u4F59\u5BB9\u91CF\u6765\u4E0B\u8F7D\u955C\u50CFcache\uFF0C\u4F46\u73B0\u5728\u53EA\u6709{2}\u7684\u7A7A\u4F59\u5BB9\u91CF

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkRollbackMigrateVolumeFlow.java:70
# args: srcPsUuid
data\ on\ source\ ps[uuid\:\ %s]\ has\ been\ discarded,\ not\ support\ rollback = \u6E90\u4E3B\u5B58\u50A8[uuid:{0}]\u4E0A\u7684\u6570\u636E\u5DF2\u7ECF\u88AB\u6E05\u7406\uFF0C\u65E0\u6CD5\u56DE\u6EDA

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2415
# args: cmd.volumeUuid,msg.getVolume().getInstallPath(),cmd.srcDir
why\ volume[uuid\:%s,\ installPath\:%s]\ not\ in\ directory\ %s = \u4E3A\u4EC0\u4E48\u5377[uuid\uFF1A{0}\uFF0CInstallPath\uFF1A{1}]\u4E0D\u5728\u76EE\u5F55{2}\u4E2D

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2184
# args: ret.firstAccessHostUuids
hosts[uuid\:%s]\ have\ the\ same\ mount\ path,\ but\ actually\ mount\ different\ storage. = \u7269\u7406\u673A[uuid:{0}]\u6709\u76F8\u540C\u6302\u8F7D\u8DEF\u5F84\uFF0C\u4F46\u662F\u5B9E\u9645\u4E0A\u6302\u8F7D\u5728\u4E0D\u540C\u7684\u5B58\u50A8\u4E0A

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2372
# args: msg.getHostUuid(),msg.getPrimaryStorageUuid()
host[uuid\:%s]\ might\ mount\ storage\ which\ is\ different\ from\ SMP[uuid\:%s],\ please\ check\ it = \u7269\u7406\u673A[uuid\uFF1A{0}]\u53EF\u80FD\u88C5\u8F7D\u4E0ESMP[uuid\uFF1A{1}]\u4E0D\u540C\u7684\u5B58\u50A8\uFF0C\u8BF7\u68C0\u67E5

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:1139
# args: volumeUuid,infos.toString()
volume[uuid\:%s]\ has\ reference\ volume[%s],\ can\ not\ change\ volume\ type\ before\ flatten\ them\ and\ their\ descendants = \u5377[uuid\uFF1A{0}]\u5177\u6709\u5F15\u7528\u5377[{1}]\uFF0C\u5728\u5C55\u5E73\u5B83\u4EEC\u53CA\u5176\u540E\u4EE3\u4E4B\u524D\u65E0\u6CD5\u66F4\u6539\u5377\u7C7B\u578B

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:597
# args: 
not\ supported\ operation = \u4E0D\u652F\u6301\u7684\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:109
# args: psUuid,vmUuid,volumeUuid
the\ SMP\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = SMP\u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4\uFF0C\u65E0\u6CD5\u5F7B\u5E95\u5220\u9664\u4E91\u4E3B\u673A[uuid:{2}]\u7684\u4E91\u76D8[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:303
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u4E00\u4E2A\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\u4E3ASMP\u4E3B\u5B58\u50A8[uuid:{0}]\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:323
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-SMP\ connection\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u4E00\u4E2A\u548CSMP\u4E3B\u5B58\u50A8[uuid:{0}]\u5904\u4E8E\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\u4E3A\u5176\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/smp/SharedMountPointApiInterceptor.java:25
# args: 
\ the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = URL\u5305\u542B\u4E86\u4E00\u4E2A\u65E0\u6548\u7684\u76EE\u5F55[/dev or /proc or /sys]

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:96
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ not\ exists. = \u65E0\u6CD5\u53D6\u6D88\u5220\u9664\u4F5C\u4E1A\u3002\u5377[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\u3002

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:100
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ not\ attached\ to\ any\ vm,\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = \u65E0\u6CD5\u53D6\u6D88\u5220\u9664\u4F5C\u4E1A\u3002\u5377[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230\u4EFB\u4F55VM\uFF0C\u8131\u673A\u5FEB\u7167\u5220\u9664\u4E0D\u652F\u6301\u53D6\u6D88\u3002

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:106
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ attached\ vm\ not\ exists,\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = \u65E0\u6CD5\u53D6\u6D88\u5220\u9664\u4F5C\u4E1A\u3002\u5377[uuid\uFF1A{0}]\u8FDE\u63A5\u7684VM\u4E0D\u5B58\u5728\uFF0C\u8131\u673A\u5FEB\u7167\u5220\u9664\u4E0D\u652F\u6301\u53D6\u6D88\u3002

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:111
# args: VmInstanceState.Running
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ attached\ vm\ not\ in\ state\ %s\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = \u65E0\u6CD5\u53D6\u6D88\u5220\u9664\u4F5C\u4E1A\u3002\u5377[uuid\uFF1A{0}]\u8FDE\u63A5\u7684VM\u672A\u5904\u4E8E\u72B6\u6001{1}\u8131\u673A\u5FEB\u7167\u5220\u9664\u4E0D\u652F\u6301\u53D6\u6D88\u3002

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:100
# args: disabledSnapshotUuids
volume\ snapshot[uuids\:%s]\ is\ in\ state\ Disabled,\ cannot\ revert\ volume\ to\ it = \u5377\u5FEB\u7167[uuid\uFF1A{0}]\u5904\u4E8E\u7981\u7528\u72B6\u6001\uFF0C\u65E0\u6CD5\u5C06\u5377\u6062\u590D\u4E3A\u8BE5\u72B6\u6001

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:121
# args: VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Can\ not\ take\ memory\ snapshot,\ expected\ vm\ states\ are\ [%s,\ %s] = \u65E0\u6CD5\u83B7\u53D6\u5185\u5B58\u5FEB\u7167\uFF0C\u9884\u671F\u7684VM\u72B6\u6001\u4E3A[{0}\uFF0C{1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:188
# args: msg.getUuid(),state
volume\ snapshot[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = \u4E91\u76D8\u5FEB\u7167[uuid:{0}]\u51FA\u4E8E\u72B6\u6001{1}\uFF0C\u4E0D\u80FD\u6062\u590D\u4E91\u76D8\u5230\u8BE5\u5FEB\u7167\u72B6\u6001

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:193
# args: msg.getUuid()
original\ volume\ for\ snapshot[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = \u5FEB\u7167[uuid:{0}]\u7684\u539F\u7248\u4E91\u76D8\u5DF2\u7ECF\u88AB\u5220\u9664\uFF0C\u4E0D\u80FD\u6062\u590D\u4E91\u76D8\u5230\u8BE5\u5FEB\u7167

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:211
# args: msg.getVolumeUuid(),snapshotVO.getVolumeUuid()
not\ support\ delete\ snapshots\ on\ different\ volumes[uuid\:\ %s,\ %s] = \u4E0D\u652F\u6301\u5220\u9664\u4E0D\u540C\u5377\u4E0A\u7684\u5FEB\u7167[uuid\uFF1A{0}\uFF0C{1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:215
# args: msg.getUuids()
can\ not\ find\ volume\ uuid\ for\ snapshosts[uuid\:\ %s] = \u627E\u4E0D\u5230\u5FEB\u7167\u7269\u7406\u673A[uuid\uFF1A{0}]\u7684\u5377uuid

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:834
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),volumeSize
after\ subtracting\ reserved\ capacity[%s],\ there\ is\ no\ primary\ storage\ having\ required\ size[%s\ bytes],\ may\ be\ the\ threshold\ of\ primary\ storage\ physical\ capacity\ setting\ is\ lower = \u51CF\u53BB\u4FDD\u7559\u5BB9\u91CF[{0}]\u540E\uFF0C\u6CA1\u6709\u5177\u6709\u6240\u9700\u5927\u5C0F[{1}\u5B57\u8282]\u7684\u4E3B\u5B58\u50A8\uFF0C\u53EF\u80FD\u662F\u4E3B\u5B58\u50A8\u7269\u7406\u5BB9\u91CF\u8BBE\u7F6E\u7684\u9608\u503C\u8F83\u4F4E

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:617
# args: maxIncrementalSnapshotNum,vo.getVolumeUuid()
Unsupported\ maximum\ snapshot\ number\ (%d)\ for\ volume\ [uuid\:%s] = \u4E0D\u652F\u6301\u5377[uuid\uFF1A{1}]\u7684\u6700\u5927\u5FEB\u7167\u6570\uFF08{0}\uFF09

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1044
# args: primaryStorageUuid,vol.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ support\ volume\ snapshot;\ cannot\ create\ snapshot\ for\ volume[uuid\:%s] = \u4E3B\u5B58\u50A8[uuid:{0}]\u4E0D\u80FD\u652F\u6301\u4E91\u76D8\u5FEB\u7167\uFF0C\u4E0D\u80FD\u4E3A\u4E91\u76D8[uuid:{1}]\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1010
# args: vol.getPrimaryStorageUuid()
cannot\ find\ type\ for\ primaryStorage\ [%s] = \u627E\u4E0D\u5230PrimaryStorage[{0}]\u7684\u7C7B\u578B

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1107
# args: uuid
cannot\ find\ snapshot\:\ %s = \u627E\u4E0D\u5230\u5FEB\u7167\uFF1A{0}

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1176
# args: msg.getResourceType()
this\ resource\ type\ %s\ does\ not\ support\ querying\ memory\ snapshot\ references = \u6B64\u8D44\u6E90\u7C7B\u578B{0}\u4E0D\u652F\u6301\u67E5\u8BE2\u5185\u5B58\u5FEB\u7167\u5F15\u7528

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:162
# args: currentRoot.getUuid(),currentRoot.getName()
cannot\ find\ volume\ snapshot[uuid\:%s,\ name\:%s],\ it\ may\ have\ been\ deleted\ by\ previous\ operation = \u4E0D\u80FD\u521B\u5EFA\u4E91\u76D8\u5FEB\u7167[uuid:{0}, name:{1}]\uFF0C\u8BE5\u5FEB\u7167\u53EF\u80FD\u5DF2\u7ECF\u88AB\u4EE5\u524D\u7684\u64CD\u4F5C\u5220\u9664

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:418
# args: refVolUuids
snapshot\ or\ its\ desendant\ has\ reference\ volume[uuids\:%s] = \u5FEB\u7167\u6216\u5176\u76EE\u6807\u5177\u6709\u5F15\u7528\u5377[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1004
# args: failSnapshot.getUuid(),failSnapshot.getName(),evt
failed\ to\ change\ status\ of\ volume\ snapshot[uuid\:%s,\ name\:%s]\ by\ status\ event[%s] = \u901A\u8FC7\u72B6\u6001\u4E8B\u4EF6[{2}]\u6539\u53D8\u4E91\u76D8\u5FEB\u7167[uuid:{0}, name:{1}]\u5931\u8D25

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1847
# args: volumeInventory.getUuid(),currentRoot.getUuid(),vmUuid,state
unable\ to\ reset\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s],\ the\ vm[uuid\:%s]\ volume\ attached\ to\ is\ not\ in\ Stopped\ state,\ current\ state\ is\ %s = \u4E0D\u80FD\u91CD\u7F6E\u4E91\u76D8[uuid:{0}]\u5230\u5FEB\u7167[uuid:{1}]\u72B6\u6001\uFF0C\u4E91\u76D8\u7684\u4E91\u4E3B\u673A[uuid:{2}]\u672A\u5904\u4E8E\u505C\u6B62\u72B6\u6001\uFF0C\u5F53\u524D\u72B6\u6001\u662F{3}

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:2228
# args: currentRoot.getUuid()
current\ snapshot\:%s\ is\ not\ latest\ snapshot,\ cannot\ mark\ as\ volume = \u5F53\u524D\u5FEB\u7167\uFF1A{0}\u4E0D\u662F\u6700\u65B0\u7684\u5FEB\u7167\uFF0C\u65E0\u6CD5\u6807\u8BB0\u4E3A\u5377

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupBase.java:282
# args: ext.getArchiveBundleCanonicalName()
no\ bundle\ found\ for\ type\:%s = \u672A\u627E\u5230\u7C7B\u578B\u4E3A{0}\u7684\u5305

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:89
# args: String.join(", ", deletedSnapshotInfos)
snapshot(s)\ %s\ in\ the\ group\ has\ been\ deleted,\ can\ only\ revert\ one\ by\ one. = \u5FEB\u7167\u7EC4\u91CC\u7684\u5FEB\u7167{0}\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86\uFF0C\u4EC5\u80FD\u5355\u76D8\u6062\u590D\u3002

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:93
# args: String.join(", ", detachedVolInfos)
volume(s)\ %s\ is\ no\ longer\ attached,\ can\ only\ revert\ one\ by\ one.\ If\ you\ need\ to\ group\ revert,\ please\ re-attach\ it. = \u4E91\u76D8{0}\u5DF2\u88AB\u5378\u8F7D\uFF0C\u4EC5\u80FD\u5355\u76D8\u6062\u590D\uFF1B\u5982\u679C\u9700\u8981\u6574\u7EC4\u6062\u590D\uFF0C\u8BF7\u91CD\u65B0\u52A0\u8F7D\u518D\u6267\u884C\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:101
# args: volInfos
new\ volume(s)\ %s\ attached\ after\ snapshot\ point,\ can\ only\ revert\ one\ by\ one.\ If\ you\ need\ to\ group\ revert,\ please\ detach\ it. = \u5728\u5FEB\u7167\u70B9\u4E4B\u540E\u52A0\u8F7D\u4E86\u65B0\u7684\u4E91\u76D8{0}\uFF0C\u4EC5\u80FD\u5355\u76D8\u6062\u590D\uFF1B\u5982\u679C\u9700\u8981\u6574\u7EC4\u6062\u590D\uFF0C\u8BF7\u5148\u5378\u8F7D\u518D\u6267\u884C\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:292
# args: 
Can't\ attach\ volume\ to\ VM,\ no\ qualified\ cluster = \u4E0D\u80FD\u52A0\u8F7D\u4E91\u76D8\u5230\u4E91\u4E3B\u673A\u4E0A\uFF0C\u6CA1\u6709\u53EF\u7528\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:407
# args: psUuid,msg.getPrimaryStorageUuid()
primaryStorageUuid\ conflict,\ the\ primary\ storage\ specified\ by\ the\ disk\ offering\ is\ %s,\ and\ the\ primary\ storage\ specified\ in\ the\ creation\ parameter\ is\ %s = PrimaryStorageuuid\u51B2\u7A81\uFF0C\u78C1\u76D8\u4EA7\u54C1\u6307\u5B9A\u7684\u4E3B\u5B58\u50A8\u4E3A{0}\uFF0C\u800C\u521B\u5EFA\u53C2\u6570\u4E2D\u6307\u5B9A\u7684\u4E3B\u5B58\u50A8\u4E3A{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:156
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ current\ is\ %s,\ can't\ create\ snapshot = \u4E91\u76D8[uuid:{0}]\u672A\u51FA\u4E8E\u5C31\u7EEA\u72B6\u6001\uFF0C\u5F53\u524D\u662F{1}\uFF0C\u4E0D\u80FD\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:126
# args: msg.getVolumeUuid(),type
volume[uuid\:%s,\ type\:%s],\ can't\ create\ snapshot = \u5377[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]\uFF0C\u65E0\u6CD5\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:131
# args: msg.getVolumeUuid(),state
volume[uuid\:%s]\ is\ not\ in\ state\ Enabled,\ current\ is\ %s,\ can't\ create\ snapshot = \u5377[uuid\uFF1A{0}]\u672A\u5904\u4E8E\u542F\u7528\u72B6\u6001\uFF0C\u5F53\u524D\u4E3A{1}\uFF0C\u65E0\u6CD5\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:150
# args: vmvo.getState().toString(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Can\ not\ take\ memory\ snapshot,\ vm\ current\ state[%s],\ but\ expect\ state\ are\ [%s,\ %s] = \u65E0\u6CD5\u83B7\u53D6\u5185\u5B58\u5FEB\u7167\uFF0CVM\u5F53\u524D\u72B6\u6001\u4E3A[{0}]\uFF0C\u4F46\u9884\u671F\u72B6\u6001\u4E3A[{1}\uFF0C{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:183
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ deleted.\ This\ is\ operation\ is\ to\ recover\ a\ deleted\ data\ volume = \u4E91\u76D8[uuid:{0}]\u672A\u5904\u4E8E\u5220\u9664\u72B6\u6001\u3002\u6B64\u64CD\u4F5C\u5C06\u8986\u76D6\u4E00\u4E2A\u88AB\u5220\u9664\u7684\u4E91\u76D8

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:319
# args: vol.getUuid()
the\ volume[uuid\:%s]\ is\ in\ status\ of\ deleted,\ cannot\ do\ the\ operation = \u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664\uFF0C\u4E0D\u80FD\u6267\u884C\u6B64\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:201
# args: msg.getImageUuid(),ImageMediaType.DataVolumeTemplate,type
image[uuid\:%s]\ is\ not\ %s,\ it's\ %s = \u955C\u50CF[uuid:{0}]\u4E0D\u662F{1}\uFF0C\u800C\u662F{2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:205
# args: img.getUuid(),img.getState()
image[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = \u955C\u50CF\u4E0D\u80FD\u542F\u7528\uFF0C\u6B64\u955C\u50CF\u662F{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:209
# args: img.getUuid(),img.getStatus()
image[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = \u955C\u50CF\u672A\u51C6\u5907\u5C31\u7EEA\uFF0C\u6B64\u955C\u50CF\u662F{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:221
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ Root\ volume,\ can\ not\ be\ attach\ to\ vm = \u4E91\u76D8[uuid:{0}]\u662F\u4E00\u4E2A\u4E91\u76D8\uFF0C\u4E0D\u80FD\u88AB\u624B\u52A8\u6302\u8F7D\u5230\u5176\u4ED6\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:228
# args: msg.getVolumeUuid(),state,VolumeState.Enabled
volume[uuid\:%s]\ is\ in\ state[%s],\ data\ volume\ can\ only\ be\ attached\ when\ state\ is\ %s = \u4E91\u76D8[uuid:{0}]\u5904\u4E8E[{1}]\u72B6\u6001\uFF0C\u4E91\u76D8\u53EA\u80FD\u5728\u5904\u4E8E{2}\u72B6\u6001\u7684\u65F6\u5019\u6302\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:233
# args: msg.getVolumeUuid(),status,VolumeStatus.Ready,VolumeStatus.NotInstantiated
volume[uuid\:%s]\ is\ in\ status[%s],\ data\ volume\ can\ only\ be\ attached\ when\ status\ is\ %s\ or\ %S = \u4E91\u76D8[uuid:{0}]\u5904\u4E8E[{1}]\uFF0C\u4E91\u76D8\u53EA\u80FD\u5728\u5904\u4E8E{2}\u6216%S\u72B6\u6001\u7684\u65F6\u5019\u6302\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:240
# args: msg.getVolumeUuid()
data\ volume[uuid\:%s]\ is\ not\ attached\ to\ any\ vm,\ can't\ detach = \u4E91\u76D8\u6CA1\u6709\u88AB\u6302\u8F7D\u5230\u4EFB\u4F55\u4E91\u4E3B\u673A\u4E0A\uFF0C\u4E0D\u80FD\u5378\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:244
# args: msg.getVolumeUuid()
to\ detach\ shareable\ data\ volume[uuid\:%s],\ vm\ uuid\ is\ needed. = \u5378\u8F7D\u5171\u4EAB\u4E91\u76D8[uuid:{0}]\u9700\u8981\u4E91\u4E3B\u673A\u7684uuid

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:249
# args: vol.getUuid(),vol.getName(),vol.getType()
the\ volume[uuid\:%s,\ name\:%s,\ type\:%s]\ can't\ detach\ it = \u5377[uuid\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}\uFF0C\u7C7B\u578B\uFF1A{2}]\u65E0\u6CD5\u5C06\u5176\u5206\u79BB

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:305
# args: msg.getVmInstanceUuid(),msg.getVolumeUuid()
the\ vm[uuid\:%s]\ doesn't\ support\ to\ online\ attach\ volume[%s]\ on\ the\ basis\ of\ that\ the\ image\ platform\ type\ of\ the\ vm\ is\ other\  = \u4E91\u4E3B\u673A[uuid:{0}]\u4E0D\u652F\u6301\u5728\u7EBF\u6302\u8F7D\u4E91\u76D8[{1}]\u3002\u56E0\u4E3A\u8FD9\u53F0\u4E91\u4E3B\u673A\u7684\u57FA\u7840\u955C\u50CF\u5E73\u53F0\u7C7B\u578B\u4E3A\u201C\u5176\u4ED6\u201D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:310
# args: vol.getUuid(),vol.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ Root\ Volume,\ can't\ attach\ it = \u4E0D\u80FD\u6302\u8F7D\u4E91\u76D8[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:315
# args: vol.getUuid()
data\ volume[uuid\:%s]\ is\ Disabled,\ can't\ attach = \u4E91\u76D8\u5DF2\u88AB\u7981\u7528\uFF0C\u4E0D\u80FD\u6302\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:323
# args: vol.getUuid()
data\ volume[uuid\:%s]\ has\ been\ attached\ to\ some\ vm,\ can't\ attach\ again = \u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u88AB\u52A0\u8F7D\u4E0A\u4E91\u4E3B\u673A\u4E86\uFF0C\u4E0D\u80FD\u518D\u6B21\u52A0\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:328
# args: VolumeStatus.Ready,VolumeStatus.NotInstantiated,vol.getStatus()
data\ volume\ can\ only\ be\ attached\ when\ status\ is\ [%s,\ %s],\ current\ is\ %s = \u4E91\u76D8\u4EC5\u80FD\u5F53\u5904\u4E8E[{0}, {1}]\u72B6\u6001\u6302\u8F7D\uFF0C\u5F53\u524D\u72B6\u6001\u662F{2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:336
# args: vol.getUuid(),vol.getFormat(),hvTypes,msg.getVmInstanceUuid(),hvType
data\ volume[uuid\:%s]\ has\ format[%s]\ that\ can\ only\ be\ attached\ to\ hypervisor[%s],\ but\ vm[uuid\:%s]\ has\ hypervisor\ type[%s].\ Can't\ attach = \u53EA\u6709[{1}]\u683C\u5F0F\u7684\u4E91\u76D8[uuid:{0}]\u624D\u80FD\u88AB\u6302\u8F7D\u5230\u7BA1\u7406\u7A0B\u5E8F[{2}]\uFF0C\u4F46\u662F\u4E91\u4E3B\u673A\u662F[{4}]\u7C7B\u578B\u7684\u7BA1\u7406\u7A0B\u5E8F\uFF0C\u4E91\u76D8\u4E0D\u80FD\u6302\u8F7D\u5230\u8BE5\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:349
# args: hvType,maxDataVolumeNum,count,msg.getVmInstanceUuid()
hypervisor[%s]\ only\ allows\ max\ %s\ data\ volumes\ to\ be\ attached\ to\ a\ single\ vm;\ there\ have\ been\ %s\ data\ volumes\ attached\ to\ vm[uuid\:%s] = [{0}]\u7BA1\u7406\u7A0B\u5E8F\u4EC5\u5141\u8BB8\u6700\u5927\u4E0D\u8D85\u8FC7{1}\u4E91\u76D8\u6302\u8F7D\u5230\u5355\u4E2A\u4E91\u4E3B\u673A\u3002{2} data volumes\u5DF2\u7ECF\u6302\u8F7D\u5230\u4E91\u4E3B\u673A[uuid:{3}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:367
# args: hostUuid,vol.getPrimaryStorageUuid()
Can\ not\ attach\ volume\ to\ vm\ runs\ on\ host[uuid\:\ %s]\ which\ is\ disconnected\ with\ volume's\ storage[uuid\:\ %s] = \u65E0\u6CD5\u5C06\u5377\u9644\u52A0\u5230\u7269\u7406\u673A[uuid\uFF1A{0}]\u4E0A\u8FD0\u884C\u7684VM\uFF0C\u8BE5\u7269\u7406\u673A\u5DF2\u4E0E\u5377\u7684\u5B58\u50A8[uuid\uFF1A{1}]\u65AD\u5F00\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:378
# args: msg.getUuid()
it's\ not\ allowed\ to\ backup\ root\ volume,\ uuid\:%s = \u5907\u4EFD\u4E91\u76D8\u4E0D\u88AB\u5141\u8BB8\uFF0Cuuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:387
# args: 
unexpected\ disk\ size\ settings = \u610F\u5916\u7684\u78C1\u76D8\u5927\u5C0F\u8BBE\u7F6E

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:427
# args: msg.getVolumeUuid(),type
volume[uuid\:%s,\ type\:%s]\ can't\ be\ deleted = \u65E0\u6CD5\u5220\u9664\u5377[uuid\uFF1A{0}\uFF0C\u7C7B\u578B\uFF1A{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:432
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ already\ in\ status\ of\ deleted = \u4E91\u76D8[uuid:{0}]\u65E9\u5DF2\u5904\u4E8E\u88AB\u5220\u9664\u72B6\u6001

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:438
# args: msg.getVolumeUuid(),hostUuid
can\ not\ delete\ volume[%s],\ because\ volume\ attach\ to\ host[%s] = \u65E0\u6CD5\u5220\u9664\u5377[{0}]\uFF0C\u56E0\u4E3A\u5377\u8FDE\u63A5\u5230\u7269\u7406\u673A[{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:453
# args: msg.getUuid()
it's\ not\ allowed\ to\ change\ state\ of\ root\ volume,\ uuid\:%s = \u4E0D\u80FD\u6539\u53D8\u4E91\u76D8\u72B6\u6001\uFF0Cuuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:461
# args: msg.getVolumeUuid(),hostUuid
can\ not\ change\ volume[%s]\ state,\ because\ volume\ attach\ to\ host[%s] = \u65E0\u6CD5\u66F4\u6539\u5377[{0}]\u72B6\u6001\uFF0C\u56E0\u4E3A\u5377\u8FDE\u63A5\u5230\u7269\u7406\u673A[{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:469
# args: msg.getVolumeUuid(),msg.getHostUuid(),hostStatus
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ host[status\:%s]\ is\ not\ connected = \u65E0\u6CD5\u5C06\u4E91\u76D8[{0}]\u6302\u8F7D\u5230\u7269\u7406\u673A[{1}]\uFF0C\u56E0\u4E3A\u7269\u7406\u673A[status:{2}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:474
# args: 
mount\ path\ must\ be\ absolute\ path = \u88C5\u8F7D\u8DEF\u5F84\u5FC5\u987B\u662F\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:491
# args: msg.getVolumeUuid(),msg.getHostUuid(),hostUuid
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ volume\ is\ attaching\ to\ host[%s] = \u65E0\u6CD5\u5C06\u4E91\u76D8[{0}]\u6302\u8F7D\u5230\u7269\u7406\u673A[{1}]\uFF0C\u56E0\u4E3A\u4E91\u76D8\u6B63\u5728\u6302\u8F7D\u5230\u7269\u7406\u673A[{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:495
# args: msg.getVolumeUuid(),msg.getHostUuid(),msg.getVolumeUuid(),mountPath,hostUuid
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ the\ volume[%s]\ occupies\ the\ mount\ path[%s]\ on\ host[%s] = \u65E0\u6CD5\u5C06\u4E91\u76D8[{0}]\u6302\u8F7D\u5230\u7269\u7406\u673A[{1}]\uFF0C\u56E0\u4E3A\u4E91\u76D8[{2}]\u5728\u7269\u7406\u673A[{4}]\u4E0A\u5360\u7528\u4E86\u6302\u8F7D\u8DEF\u5F84[{3}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:505
# args: msg.getVolumeUuid(),msg.getHostUuid(),msg.getMountPath()
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ the\ another\ volume\ occupies\ the\ mount\ path[%s] = \u65E0\u6CD5\u5C06\u4E91\u76D8[{0}]\u6302\u8F7D\u5230\u7269\u7406\u673A[{1}]\uFF0C\u56E0\u4E3A\u53E6\u4E00\u4E2A\u4E91\u76D8\u5360\u7528\u4E86\u6302\u8F7D\u8DEF\u5F84[{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:512
# args: msg.getVolumeUuid()
can\ not\ detach\ volume[%s]\ from\ host.\ it\ may\ have\ been\ detached = \u65E0\u6CD5\u4ECE\u7269\u7406\u673A\u5206\u79BB\u5377[{0}]\u3002\u5B83\u53EF\u80FD\u5DF2\u7ECF\u5206\u79BB\u4E86\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:520
# args: msg.getVolumeUuid()
cannot\ flatten\ a\ shareable\ volume[uuid\:%s] = \u65E0\u6CD5\u5E73\u6574\u53EF\u5171\u4EAB\u7684\u5377[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:531
# args: msg.getUuid()
can\ not\ found\ in\ used\ snapshot\ tree\ of\ volume[uuid\:\ %s] = \u5728\u5377[uuid\uFF1A{0}]\u7684\u5DF2\u4F7F\u7528\u5FEB\u7167\u6811\u4E2D\u627E\u4E0D\u5230

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:541
# args: 
cannot\ undo\ not\ latest\ snapshot = \u65E0\u6CD5\u64A4\u6D88\u4E0D\u662F\u6700\u65B0\u7684\u5FEB\u7167

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:200
# args: self.getRootImageUuid()
cannot\ find\ image\ cache[imageUuid\:\ %s]\ for\ reinit\ volume = \u627E\u4E0D\u5230\u91CD\u65B0\u521D\u59CB\u5316\u5377\u7684\u955C\u50CF\u7F13\u5B58[imageUuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:843
# args: self.getUuid(),self.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ yet,\ can't\ expunge\ it = \u4E91\u76D8[uuid:{0}, name:{1}]\u4ECD\u672A\u88AB\u5220\u9664\uFF0C\u4E0D\u80FD\u6E05\u9664\u8BE5\u4E91\u76D8

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:1780
# args: 
volume[uuid%s]\ should\ be\ attached. = \u5E94\u9644\u52A0\u5377[uuid{0}]\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:1866
# args: 
only\ support\ detached\ volume,\ use\ SetVmBootVolumeMsg\ instead. = \u4EC5\u652F\u6301\u5206\u79BB\u5377\uFF0C\u8BF7\u6539\u7528SetVMBootVolumeMsg\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:166
# args: msg.getPrimaryStorageUuid()
get\ primaryStorage\ %s\ type\ failed = \u83B7\u53D6PrimaryStorage{0}\u7C7B\u578B\u5931\u8D25

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:170
# args: psType
primaryStorage\ type\ [%s]\ not\ support\ shared\ volume\ yet = \u4E3B\u5B58\u50A8\u7C7B\u578B[{0}]\u5C1A\u4E0D\u652F\u6301\u5171\u4EAB\u4E91\u76D8

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:296
# args: template.getUuid(),template.getName()
the\ image[uuid\:%s,\ name\:%s]\ has\ been\ deleted\ on\ all\ backup\ storage = \u955C\u50CF[uuid:{0}, name:{1}]\u5DF2\u7ECF\u4ECE\u6240\u6709\u7684\u955C\u50CF\u670D\u52A1\u5668\u4E2D\u5220\u9664

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:313
# args: template.getUuid(),msg.getPrimaryStorageUuid()
cannot\ find\ a\ backup\ storage\ on\ which\ the\ image[uuid\:%s]\ is\ that\ satisfies\ all\ conditions\ of\:\ 1.\ has\ state\ Enabled\ 2.\ has\ status\ Connected.\ 3\ has\ attached\ to\ zone\ in\ which\ primary\ storage[uuid\:%s]\ is = \u65E0\u6CD5\u627E\u5230\u4E00\u4E2A\u955C\u50CF[uuid:{0}]\u6240\u5728\u7684\u955C\u50CF\u670D\u52A1\u5668\u7B26\u5408\u5168\u90E8\u7684\u4E0B\u5217\u6761\u4EF6: \u72B6\u6001\u542F\u52A8[state:Enabled]\uFF0C\u5DF2\u8FDE\u63A5[status:Connected]\uFF0C\u88AB\u6302\u8F7D\u5230\u4E3B\u5B58\u50A8[uuid:{1}]\u6240\u5728\u7684\u533A\u57DF\u4E2D

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:868
# args: 
target\ volume\ is\ expunged\ during\ volume\ creation = \u76EE\u6807\u5377\u5728\u5377\u521B\u5EFA\u8FC7\u7A0B\u4E2D\u88AB\u5220\u9664

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:1106
# args: VolumeFactory.class.getSimpleName()
there\ should\ not\ be\ more\ than\ one\ %s\ implementation. = \u4E0D\u5141\u8BB8\u8D85\u8FC7\u4E00\u79CD\u5B9E\u73B0

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:231
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ root\ volume = \u4E91\u76D8[uuid:{0}]\u4E0D\u662F\u4E91\u76D8

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:95
# args: IOTHREAD_QEMU_VERSION,qemuVersion,finalHostUuid
iothread\ need\ qemu\ version\ >\=\ %s,\ but\ %s\ on\ host[%s]. = IOThread\u9700\u8981QEMU\u7248\u672C>={0}\uFF0C\u4F46\u7269\u7406\u673A[{2}]\u4E0A\u9700\u8981{1}\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:103
# args: IOTHREAD_LIBVIRT_VERSION,libvirtVersion,finalHostUuid
iothread\ need\ libvirt\ version\ >\=\ %s,\ but\ %s\ on\ host[%s]. = IOThread\u9700\u8981libvirt\u7248\u672C>={0}\uFF0C\u4F46\u7269\u7406\u673A[{2}]\u4E0A\u9700\u8981{1}\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:108
# args: msg.getVolumeUuid()
root\ volume[%s]\ cannot\ set\ iothreadpin. = \u6839\u5377[{0}]\u65E0\u6CD5\u8BBE\u7F6EioThreadPin\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:115
# args: msg.getIoThreadId(),msg.getVolumeUuid(),pinInfo[0]
current\ iothread\ id[%s]\ is\ not\ the\ same\ as\ attached\ vol[%s]\ iothread[%s]. = \u5F53\u524DioThread ID[{0}]\u4E0E\u9644\u52A0\u7684\u5377[{1}]ioThread[{2}]\u4E0D\u540C\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:131
# args: msg.getUuid()
snapshot\ validation\ is\ unsupported\ for\ volume[uuid\:\ %s].\ Volume\ should\ be\ attached\ to\ vm = \u5377[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u5FEB\u7167\u9A8C\u8BC1\u3002\u5377\u5E94\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:139
# args: msg.getUuid(),VmInstanceState.Running,VmInstanceState.Paused
snapshot\ validation\ is\ unsupported\ for\ volume[uuid\:\ %s].\ Attached\ vm\ is\ not\ in\ state\ of\ [%s,\ %s] = \u5377[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u5FEB\u7167\u9A8C\u8BC1\u3002\u8FDE\u63A5\u7684\u4E91\u4E3B\u673A\u672A\u5904\u4E8E[{1}\uFF0C{2}]\u72B6\u6001

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:149
# args: volumeUuid
volume[uuid\:%s]\ can\ not\ found = \u672A\u627E\u5230\u5377[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:156
# args: volumeUuid,volumeVOS.get(0).getUuid(),volumeVO.getVmInstanceUuid(),volumeVOS.get(0).getVmInstanceUuid()
not\ support\ take\ snapshots\ volume[uuid\:%s,\ uuid\:%s]\ on\ different\ vms[uuid\:%s,\ uuid\:%s] = \u4E0D\u652F\u6301\u5728\u4E0D\u540C\u7684\u4E91\u4E3B\u673A[uuid\uFF1A{2}\uFF0Cuuid\uFF1A{3}]\u4E0A\u62CD\u6444\u5377[UUId\uFF1A{0}\uFF0CUUId\uFF1A{1}]\u7684\u5FEB\u7167

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:163
# args: volumeUuid
volume[uuid\:%s]\ is\ not\ ready = \u5377[uuid\uFF1A{0}]\u672A\u5C31\u7EEA

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:178
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
state\ of\ vm[uuid\:\ %s]\ is\ %s,\ not\ allowed\ to\ take\ snapshots = VM[uuid\uFF1A{0}]\u7684\u72B6\u6001\u4E3A{1}\uFF0C\u4E0D\u5141\u8BB8\u62CD\u6444\u5FEB\u7167

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:188
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ data\ volume = \u4E91\u76D8[uuid:{0}]\u4E0D\u662F\u4E91\u76D8

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:198
# args: msg.getVolumeUuid()
can\ not\ resize\ volume[%s],\ because\ volume\ state\ is\ Disabled = \u65E0\u6CD5\u8C03\u6574\u5377[{0}]\u7684\u5927\u5C0F\uFF0C\u56E0\u4E3A\u5377\u72B6\u6001\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:212
# args: 
At\ least\ one\ of\ vmInstanceUuid\ or\ uuid\ should\ be\ set = \u81F3\u5C11\u5E94\u8BBE\u7F6EVMInstanceuuid\u6216uuid\u4E2D\u7684\u4E00\u4E2A

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:227
# args: msg.getUuid(),msg.getVmInstanceUuid()
no\ volume[uuid\:%s,\ vmInstanceUuid\:%s]\ can\ be\ found = \u627E\u4E0D\u5230\u5377[uuid\uFF1A{0}\uFF0CVMInstanceuuid\uFF1A{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:245
# args: 
SharedVolume\ cannot\ be\ set\ bandwidth. = \u5171\u4EAB\u4E91\u76D8\u4E0D\u5141\u8BB8\u8BBE\u7F6E\u5E26\u5BBD

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:254
# args: 
Cannot\ set\ legacy\ params\ and\ new\ params\ at\ the\ same\ time. = \u4E0D\u80FD\u540C\u65F6\u8BBE\u7F6E\u65E7\u53C2\u6570\u548C\u65B0\u53C2\u6570\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:259
# args: 
Cannot\ set\ the\ read/write\ and\ the\ total\ IOPS\ limits\ at\ the\ same\ time. = \u65E0\u6CD5\u540C\u65F6\u8BBE\u7F6E\u8BFB/\u5199\u548C\u603BIOPS\u9650\u5236\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:264
# args: 
Cannot\ set\ the\ read/write\ and\ the\ total\ bandwidth\ limits\ at\ the\ same\ time. = \u65E0\u6CD5\u540C\u65F6\u8BBE\u7F6E\u8BFB/\u5199\u548C\u603B\u5E26\u5BBD\u9650\u5236\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:273
# args: 
The\ volume\ bandwidth\ cannot\ be\ null,\ must\ give\ a\ volume\ bandwidth\ value. = \u5377\u5E26\u5BBD\u4E0D\u80FD\u4E3A\u7A7A\uFF0C\u5FC5\u987B\u63D0\u4F9B\u5377\u5E26\u5BBD\u503C\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:284
# args: vo.getType(),vo.getUuid()
Cannot\ shrink\ [%s]\ volume[uuid\:%s]'s\ size = \u4E0D\u80FD\u7F29\u5C0F\u4E91\u76D8[uuid:{1}]\u7684\u5927\u5C0F

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:291
# args: 
Minimum\ increase\ size\ should\ be\ larger\ than\ 4MB = \u6700\u5C0F\u6269\u5BB9\u91CF\u9700\u8981\u5927\u4E8E4MB

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:315
# args: 
Expansion\ operation\ not\ allowed\ at\ all\ host\ disable = \u6269\u5C55\u64CD\u4F5C\u4E0D\u88AB\u5141\u8BB8\u5728\u6240\u6709\u4E0D\u53EF\u7528\u7684\u7269\u7406\u673A\u4E0A\u8FDB\u884C

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:302
# args: 
Expansion\ operation\ not\ allowed\ at\ host\ disable = \u6269\u5C55\u64CD\u4F5C\u4E0D\u88AB\u5141\u8BB8\u5728\u4E0D\u53EF\u7528\u7684\u7269\u7406\u673A\u4E0A\u8FDB\u884C

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:341
# args: vo.getUuid(),notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = \u5171\u4EAB\u4E91\u76D8[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u672A\u505C\u6B62\u7684\u4E91\u4E3B\u673A\u5B9E\u4F8B[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:79
# args: msg.getResourceType()
no\ resource\ type[%s]\ found\ in\ tag\ system = \u6807\u7B7E\u7CFB\u7EDF\u4E2D\u4E0D\u5B58\u5728[{0}]\u8D44\u6E90\u7C7B\u578B

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:102
# args: msg.getUuid()
tag[uuid\:%s]\ is\ an\ inherent\ system\ tag,\ can\ not\ be\ removed = \u56FA\u6709\u7CFB\u7EDF\u6807\u7B7E[uuid:{0}]\u7981\u6B62\u79FB\u9664

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:128
# args: 
The\ argument\ \:'resourceType'\ doesn't\ match\ uuid = \u53C2\u6570: \u8D44\u6E90\u7C7B\u578B\uFF08resourceType\uFF09\u4E0Euuid\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:239
# args: tag,type,resourceType,resourceUuid
Duplicated\ Tag[tag\:%s,\ type\:%s,\ resourceType\:%s,\ resourceUuid\:%s] = \u6807\u7B7E[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]\u91CD\u590D

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:755
# args: tag,resourceType
no\ system\ tag\ matches[%s]\ for\ resourceType[%s] = \u6CA1\u6709\u7CFB\u7EDF\u6807\u7B7E[{0}]\u4E0E\u8D44\u6E90\u7C7B\u578B[{1}]\u5339\u914D

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:761
# args: tag,resourceType
validate\ system\ tag\ [%s]\ for\ resourceType[%s]\ failed = \u9A8C\u8BC1ResourceType[{1}]\u7684\u7CFB\u7EDF\u6807\u8BB0[{0}]\u5931\u8D25

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:944
# args: tag
no\ system\ tag\ matches\ %s = \u6CA1\u6709\u627E\u5230\u5339\u914D{0}\u7684\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:979
# args: tag
tag[%s]\ is\ only\ for\ admin = \u6807\u8BB0[{0}]\u4EC5\u9002\u7528\u4E8E\u7BA1\u7406\u5458

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:162
# args: invalidUuids,expectAccountUuid
resource[uuids\:%s]\ is\ not\ owned\ by\ account[uuid\:%s] = \u8D44\u6E90[uuid\uFF1A{0}]\u4E0D\u5F52\u5E10\u6237[uuid\uFF1A{1}]\u6240\u6709

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:85
# args: 
cannot\ update\ simple\ tag\ pattern\ format = \u65E0\u6CD5\u66F4\u65B0\u7B80\u5355\u6807\u8BB0\u6A21\u5F0F\u683C\u5F0F

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:83
# args: 
you\ can\ only\ update\ token\ name = \u60A8\u53EA\u80FD\u66F4\u65B0\u4EE4\u724C\u540D\u79F0

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:95
# args: 
simple\ tag\ pattern\ has\ no\ tokens = \u7B80\u5355\u6807\u8BB0\u6A21\u5F0F\u6CA1\u6709\u6807\u8BB0

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:122
# args: sub
illegal\ tag\ uuids\ %s,\ tag\ type\ must\ be\ simple, = \u6807\u8BB0uuid{0}\u975E\u6CD5\uFF0C\u6807\u8BB0\u7C7B\u578B\u5FC5\u987B\u7B80\u5355\u3002

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:133
# args: color
Invalid\ color\ specification[%s],\ must\ like\ #FF00FF = \u989C\u8272\u89C4\u8303[{0}]\u65E0\u6548\uFF0C\u5FC5\u987B\u7C7B\u4F3C\u4E8E#FF00FF

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:139
# args: format
Get\ format[%s],\ format\ must\ like\ that\ name\:\:{tokenName1}\:\:{tokenName2}\ ...\ \:\:{tokenNameN}\ or\ {tokenName1}\:\:{tokenName2}\ ...\ \:\:{tokenNameN}\ Name\ cannot\ contain\ '{}\:' = \u83B7\u53D6\u683C\u5F0F[{0}]\uFF0C\u683C\u5F0F\u5FC5\u987B\u7C7B\u4F3C\u4E8E\u540D\u79F0\uFF1A'{TokenName1}'\uFF1A'{TokenName2}'.\uFF1A'{TOKENNAMEn}'\u6216'{TOKENNAME1}'\uFF1A\uFF1FTokenNAME2}.\uFF1A\uFF1FTokENNAMEn}\u540D\u79F0\u4E0D\u80FD\u5305\u542B\u201C'{}'\uFF1A\u201D

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:151
# args: formatTokens
all\ tokens\ %s\ must\ be\ specify = \u5FC5\u987B\u6307\u5B9A\u6240\u6709\u4EE4\u724C{0}

# at: src/main/java/org/zstack/tag2/TagPatternBase.java:185
# args: resourceUuid,attachedCount
resource[uuid\:%s]\ has\ been\ attached\ %d\ tags,\ cannot\ attach\ any\ more = \u8D44\u6E90[uuid\uFF1A{0}]\u5DF2\u9644\u52A0{1}\u4E2A\u6807\u8BB0\uFF0C\u65E0\u6CD5\u518D\u9644\u52A0

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:79
# args: msg.getTemplateUuid()
unable\ to\ find\ any\ TemplateConfigs\:\ [templateUuid\:\ %s] = \u627E\u4E0D\u5230\u4EFB\u4F55TemplateConfigs\uFF1A[templateUuid\uFF1A{0}]

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:151
# args: msg.getTemplateUuid()
Unable\ to\ find\ any\ TemplateConfigs\:\ [templateUuid\:\ %s] = \u627E\u4E0D\u5230\u4EFB\u4F55TemplateConfigs\uFF1A[templateUuid\uFF1A{0}]

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:128
# args: msg.getCategory(),msg.getName(),msg.getTemplateUuid()
Unable\ to\ find\ TemplateConfig[category\:\ %s,\ name\:\ %s,\ templateUuid\:\ %s] = \u627E\u4E0D\u5230TemplateConfig[\u7C7B\u522B\uFF1A{0}\uFF0C\u540D\u79F0\uFF1A{1}\uFF0CTemplateuuid\uFF1A{2}]

# at: src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java:123
# args: algType
illegal\ argument\ %s = \u975E\u6CD5\u53C2\u6570{0}

# at: src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java:136
# args: 
failed\ to\ decrypt\ data = \u65E0\u6CD5\u89E3\u5BC6\u6570\u636E

# at: src/main/java/org/zstack/testlib/premium/crypto/SecurityMachineSimulator.java:399
# args: e.getMessage(),cipherText
failed\ to\ parse\ MS\ envelope\:\ %s,\ %s = \u65E0\u6CD5\u5206\u6790MS\u4FE1\u5C01\uFF1A{0}\uFF0C{1}

# at: src/main/java/org/zstack/ticket/TicketBase.java:235
# args: self.getUuid(),self.getName(),self.getStatus()
ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ updated\ after\ being\ cancelled,\ current\ status\ is\ %s = \u5DE5\u5355[uuid:{0}, name:{1}]\u5F53\u524D\u72B6\u6001\u4E3A{2}\uFF0C\u4E0D\u652F\u6301\u66F4\u65B0\u64CD\u4F5C

# at: src/main/java/org/zstack/ticket/TicketBase.java:299
# args: operator.operatorUuid
operation\ denied.\ the\ operator\ needs\ to\ be\ done\ by\ account/virtual\ ID[uuid\:%s] = \u64CD\u4F5C\u65E0\u6548\uFF0C\u9700\u8981account/virtual ID[uuid:{0}]\u624D\u80FD\u5B8C\u6210\u64CD\u4F5C

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:97
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ invalid,\ contact\ admin\ to\ correct\ it = \u5F53\u524D\u5DE5\u5355\u6D41\u7A0B[uuid:{0}]\u5931\u6548\uFF0C\u8BF7\u8054\u7CFBadmin\u4FEE\u590D

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:102
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ disable,\ can\ not\ be\ used = \u5DE5\u5355\u6D41\u7A0B[uuid:{0}]\u5904\u4E8E\u7981\u7528\u72B6\u6001\uFF0C\u65E0\u6CD5\u88AB\u4F7F\u7528

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:68
# args: msg.getAccountSystemType()
no\ accountSystemType[%s]\ defined\ in\ system = \u672A\u5B9A\u4E49\u7684accountSystemType[{0}]\u7C7B\u578B

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:74
# args: 
not\ matched\ ticket\ type\ found = \u672A\u627E\u5230\u5339\u914D\u7684\u7968\u8BC1\u7C7B\u578B

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:90
# args: msg.getFlowCollectionUuid(),ticketTypeUuid
Ticket\ flow\ collection[uuid\:%s]\ not\ matches\ ticket\ type[uuid\:%s] = \u7968\u8BC1\u6D41\u96C6\u5408[uuid\uFF1A{0}]\u4E0E\u7968\u8BC1\u7C7B\u578B[uuid\uFF1A{1}]\u4E0D\u5339\u914D

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:83
# args: 
no\ matched\ ticket\ flow\ collection\ or\ no\ default\ ticket\ flow\ collection\ found,\ you\ must\ specify\ the\ flowCollectionUuid\ or\ create\ a\ default\ ticket\ flow\ collection\ in\ system = \u627E\u4E0D\u5230\u5339\u914D\u7684\u7968\u8BC1\u6D41\u96C6\u5408\u6216\u627E\u4E0D\u5230\u9ED8\u8BA4\u7684\u7968\u8BC1\u6D41\u96C6\u5408\uFF0C\u5FC5\u987B\u6307\u5B9AFlowCollectionuuid\u6216\u5728\u7CFB\u7EDF\u4E2D\u521B\u5EFA\u9ED8\u8BA4\u7684\u7968\u8BC1\u6D41\u96C6\u5408

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:110
# args: req.apiName
invalid\ request.\ no\ API[%s]\ found = \u65E0\u6548\u7684\u8BF7\u6C42\u3002\u627E\u4E0D\u5230API[{0}]

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:118
# args: clz,e.getMessage()
invalid\ request,\ cannot\ create\ API[%s]\ from\ apiBody,\ %s = \u65E0\u6548\u7684\u8BF7\u6C42\uFF0C\u65E0\u6CD5\u901A\u8FC7apiBody\u521B\u5EFAAPI[{0}]\uFF0C{1}

# at: src/main/java/org/zstack/ticket/entity/TicketStatus.java:48
# args: this,event
operation\ denied.\ the\ ticket\ is\ in\ status\ of\ %s,\ cannot\ do\ the\ operation[%s] = \u64CD\u4F5C\u65E0\u6548\u3002\u5F53\u524D\u5DE5\u5355\u72B6\u6001\u4E3A{0}\uFF0C\u65E0\u6CD5\u8FDB\u884C\u64CD\u4F5C[{0}]

# at: src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java:43
# args: request.apiName
No\ api\ class[name\:%s]\ is\ found = \u627E\u4E0D\u5230API\u7C7B[\u540D\u79F0\uFF1A{0}]

# at: src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java:70
# args: exception.getMessage()
failed\ to\ get\ value\ from\ event\:\ %s = \u65E0\u6CD5\u4ECE\u4E8B\u4EF6\u4E2D\u83B7\u53D6\u503C\uFF1A{0}

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:44
# args: ctx.getVirtualIDUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ ticket\ submitter[uuid\:%s]\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = \u64CD\u4F5C\u65E0\u6548\u3002\u56E0\u4E3A\u5DE5\u5355\u7684\u63D0\u4EA4\u8005[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664\uFF0C\u5DE5\u5355[uuid:{1}, name:{2}]\u4EC5\u652F\u6301\u5220\u9664\u64CD\u4F5C

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:49
# args: ctx.getProjectUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ project[uuid\:%s]\ of\ the\ ticket\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = \u64CD\u4F5C\u65E0\u6548\u3002\u56E0\u4E3A\u5DE5\u5355\u6240\u5C5E\u7684\u9879\u76EE[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664\uFF0C\u5DE5\u5355[uuid:{1}, name:{2}]\u4EC5\u652F\u6301\u5220\u9664\u64CD\u4F5C

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:61
# args: 
operation\ denied\ because\ flow\ collection[uuid\:%s]\ it\ not\ belong\ the\ project[uuid\:%s] = \u64CD\u4F5C\u65E0\u6548\uFF0C\u56E0\u4E3A\u6D41\u7A0B[uuid:{0}]\u4E0D\u5C5E\u4E8E\u9879\u76EE[uuid:{1}]

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:73
# args: msg.getSession().getUserUuid(),self.getUuid(),self.getName()
the\ virtual\ ID[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ ticket[uuid\:%s,\ name\:%s] = virtual ID[uuid:{0}]\u4E0D\u662F\u5DE5\u5355[uuid:{1}, name:{2}]\u7684\u6240\u6709\u8005

# at: src/main/java/org/zstack/ticket/iam2/IAM2TicketManager.java:194
# args: 
approver\ is\ removed\ from\ project\ or\ deleted,\ flow\ collection\ changed\ to\ invalid,\ reject\ this\ ticket = \u5BA1\u6279\u4EBA\u5DF2\u7ECF\u79BB\u5F00\u9879\u76EE\u6216\u8005\u88AB\u5220\u9664\uFF0C\u6D41\u7A0B\u5931\u6548\uFF0C\u56E0\u6B64\u9A73\u56DE\u5F53\u524D\u5DE5\u5355

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:117
# args: 
at\ least\ one\ flow\ is\ needed\ for\ create\ flow\ collection = \u521B\u5EFA\u6D41\u7A0B\u65F6\u9700\u8981\u81F3\u5C11\u4E00\u4E2A\u6B65\u9AA4

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:124
# args: flow.approverTitle,approveTitles
wrong\ approver\ title\ %s,\ valid\ value\ is\ %s = \u9519\u8BEF\u7684\u5BA1\u6279\u4EBA\u804C\u4F4D{0}, \u6709\u6548\u8F93\u5165\u4E3A{1}

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:140
# args: flow.approverUuid
can\ not\ find\ IAM2VirtualIDVO[uuid\:%s] = \u627E\u4E0D\u5230\u5BF9\u5E94\u7684IAM2VirtualIDVO[uuid:{0}]

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:62
# args: 
name\ is\ needed\ when\ create\ a\ flow = \u521B\u5EFA\u6B65\u9AA4\u65F6\u9700\u8981\u586B\u5199\u540D\u79F0

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:79
# args: 
one\ ticket\ type\ can\ only\ have\ one\ matches\ flow\ collection = \u4E00\u4E2A\u7968\u8BC1\u7C7B\u578B\u53EA\u80FD\u6709\u4E00\u4E2A\u5339\u914D\u6D41\u96C6\u5408

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:102
# args: 
admin\ or\ iam2\ operation\ is\ required\ as\ approver\ of\ the\ last\ flow = \u9700\u8981\u7BA1\u7406\u5458\u6216IAM2\u64CD\u4F5C\u4F5C\u4E3A\u6700\u540E\u4E00\u4E2A\u6D41\u7684\u6279\u51C6\u4EBA

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:128
# args: 
name\ cannot\ be\ null = \u540D\u79F0\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:132
# args: 
approverUuid\ cannot\ be\ null = Approveruuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:147
# args: flow.approverUuid,projectUuid
virtual\ id[uuid\:%s]\ not\ belong\ to\ project[uuid\:%s] = virtual id[uuid:{0}]\u4E0D\u5C5E\u4E8E\u9879\u76EE[uuid:{1}]

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationIAM2Backend.java:42
# args: loginType
Unsupported\ AccountType\uFF1A%s = \u4E0D\u652F\u6301\u7684\u5E10\u6237\u7C7B\u578B\uFF1A{0}

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:124
# args: 
two\ factor\ authenticator\ is\ not\ enabled = \u53CC\u56E0\u5B50\u8BA4\u8BC1\u672A\u542F\u7528

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:484
# args: 
two\ factor\ authentication\ failed\ because\ there\ is\ no\ system\ tags\ in\ msg = \u53CC\u56E0\u7D20\u8EAB\u4EFD\u9A8C\u8BC1\u5931\u8D25\uFF0C\u56E0\u4E3AMSG\u4E2D\u6CA1\u6709\u7CFB\u7EDF\u6807\u8BB0

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:490
# args: 
two\ factor\ authentication\ failed\ because\ there\ is\ no\ token\ in\ msg\ system\ tag = \u53CC\u56E0\u7D20\u8EAB\u4EFD\u9A8C\u8BC1\u5931\u8D25\uFF0C\u56E0\u4E3AMSG\u7CFB\u7EDF\u6807\u8BB0\u4E2D\u6CA1\u6709\u4EE4\u724C

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:497
# args: loginContext.getLoginBackendType(),info.getUserUuid()
two\ factor\ authentication\ failed\ because\ there\ is\ no\ secret\ for\ %s\:%s = \u53CC\u56E0\u7D20\u8EAB\u4EFD\u9A8C\u8BC1\u5931\u8D25\uFF0C\u56E0\u4E3A{0}\u6CA1\u6709\u5BC6\u7801\uFF1A{1}

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:507
# args: 
failed\ to\ verify\ two\ factor\ authentication\ code = \u9A8C\u8BC1\u53CC\u56E0\u7D20\u8EAB\u4EFD\u9A8C\u8BC1\u4EE3\u7801\u5931\u8D25

# at: src/main/java/org/zstack/upgrade/UpgradeManagerImpl.java:148
# args: msg.getClass().getName()
Operation\ [%s]\ is\ forbidden\ during\ grayscale\ upgrade = \u7070\u5EA6\u5347\u7EA7\u671F\u95F4\u7981\u6B62\u64CD\u4F5C[{0}]

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:267
# args: usbInv.getHostUuid()
host[%s]\ has\ started\ more\ than\ 64\ usb\ redirect\ port = \u7269\u7406\u673A[{0}]\u5DF2\u542F\u52A864\u4E2A\u4EE5\u4E0A\u7684USB\u91CD\u5B9A\u5411\u7AEF\u53E3

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:272
# args: host.getUuid()
unable\ to\ start\ usb\ server\ on\ host[%s],\ because\ host\ is\ not\ connected = \u65E0\u6CD5\u542F\u52A8\u7269\u7406\u673A[{0}]\u4E0A\u7684USB\u670D\u52A1\u5668\uFF0C\u56E0\u4E3A\u7269\u7406\u673A\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:294
# args: usbInv.getHostUuid()
failed\ to\ start\ usbredirect\ server\ from\ host[uuid\:%s] = \u65E0\u6CD5\u4ECE\u7269\u7406\u673A[uuid\uFF1A{0}]\u542F\u52A8USBDirect\u670D\u52A1\u5668

# at: src/main/java/org/zstack/usbDevice/UsbDeviceAllocatorFactory.java:83
# args: 
no\ candidate\ host\ with\ the\ usb\ device\ have\ enough\ cpu\ /\ memory\ or\ Enabled/Connected\ status = usb\u8BBE\u5907\u6240\u5728\u7684\u7269\u7406\u673A\u90FD\u4E0D\u6EE1\u8DB3cpu / memory\u6216\u72B6\u6001\u7684\u6761\u4EF6

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:60
# args: msg.getClass().getSimpleName()
%s\ can\ only\ be\ called\ by\ admin\ account = {0}\u53EA\u80FD\u88ABadmin\u8D26\u6237\u8C03\u7528

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:98
# args: UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 1.0\ devices\ to\ one\ vm\ instance. = \u6700\u591A\u53EF\u4EE5\u7ED1\u5B9A{0}\u4E2AUSB 1.0\u8BBE\u5907\u5230\u4E00\u4E2A\u4E91\u4E3B\u673A\u4E0A

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:107
# args: UsbDeviceConstants.MAX_USB_2_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 2.0\ devices\ to\ one\ vm\ instance. = \u6700\u591A\u53EF\u4EE5\u7ED1\u5B9A{0}\u4E2AUSB 2.0\u8BBE\u5907\u5230\u4E00\u4E2A\u4E91\u4E3B\u673A\u4E0A

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:116
# args: UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 3.0\ devices\ to\ one\ vm\ instance. = \u6700\u591A\u53EF\u4EE5\u7ED1\u5B9A{0}\u4E2AUSB 3.0\u8BBE\u5907\u5230\u4E00\u4E2A\u4E91\u4E3B\u673A\u4E0A

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:127
# args: msg.getUsbDeviceUuid(),usb.getVmInstanceUuid()
the\ usb\ device[uuid\:%s]\ has\ already\ been\ attached\ to\ another\ vm[uuid\:%s] = USB\u8BBE\u5907[uuid:{0}]\u5DF2\u7ECF\u88AB\u7ED1\u5B9A\u5728\u5176\u4ED6\u7684\u4E91\u4E3B\u673A[uuid:{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:134
# args: msg.getUsbDeviceUuid(),UsbDeviceState.Enabled
the\ usb\ device[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s = USB\u8BBE\u5907[uuid:{0}]\u4E0D\u5904\u4E8E\u53EF\u7ED1\u5B9A\u7684\u72B6\u6001[{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:142
# args: msg.getVmInstanceUuid(),allowedVmInstanceAttachableState
the\ vm\ instance[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = \u4E91\u4E3B\u673A[uuid:{0}]\u4E0D\u80FD\u7ED1\u5B9A{1}\u72B6\u6001\u7684USB\u8BBE\u5907

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:152
# args: usb.getHostUuid(),msg.getUsbDeviceUuid(),HostState.Enabled,HostStatus.Connected
the\ host\ that\ the\ usb\ device[uuid\:%s]\ pluged\ in\ is\ not\ in\ valid\ state[%s]\ or\ status[%s] = \u63D2\u4E0AUSB\u8BBE\u5907\u7684\u7269\u7406\u673A\u6CA1\u6709\u5904\u4E8E\u4E00\u79CD\u6709\u6548\u7684\u72B6\u6001[{1}\u3001{2}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:165
# args: usb.getUuid(),vm.getUuid()
the\ usb\ device[uuid\:%s]\ has\ different\ hostUuid\ than\ devices\ that\ already\ attached\ to\ the\ vm\ instance[uuid\:%s] = \u4E0E\u5DF2\u7ECF\u7ED1\u5B9A\u4E91\u4E3B\u673A\u5B9E\u4F8B\u76F8\u6BD4\uFF0CUSB\u8BBE\u5907[uuid:{0}]\u6709\u4E0D\u540C\u7684\u7269\u7406\u673Auuid

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:177
# args: usb.getUuid()
the\ usb\ device[uuid\:%s]\ is\ not\ attached\ to\ any\ vm\ instance. = USB\u8BBE\u5907[uuid:{0}]\u4E0D\u80FD\u7ED1\u5B9A\u4EFB\u4F55\u4E91\u4E3B\u673A\u5B9E\u4F8B

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:185
# args: usb.getUuid(),allowedVmInstanceDetachableState
the\ vm\ instance\ that\ the\ usb\ device[uuid\:%s]\ is\ attached\ to\ is\ not\ in\ detachable\ state\ of\ %s = \u7ED1\u5B9A\u4E86USB\u8BBE\u5907[uuid:{0}]\u7684\u4E91\u4E3B\u673A\u5B9E\u4F8B\u5904\u4E8E\u4E00\u79CD\u4E0D\u80FD\u89E3\u7ED1\u7684\u72B6\u6001{1}

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:195
# args: vm.getUuid(),allowedVmInstanceAttachableState
vm\ instance[uuid\:%s]\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = \u4E91\u4E3B\u673A\u5B9E\u4F8B[uuid:{0}]\u5BF9\u4E8EUSB\u8BBE\u5907\u6CA1\u6709\u5904\u4E8E\u4E00\u79CD\u53EF\u7ED1\u5B9A\u7684\u72B6\u6001{1}

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:206
# args: msg.getUuid()
cannot\ disable\ usb\ device[uuid\:%s]\ when\ it's\ attached\ to\ a\ vm\ instance = \u5F53USB\u8BBE\u5907\u7ED1\u5B9A\u5230\u4E91\u4E3B\u673A\u4E0A\u65F6\u4E0D\u80FD\u7981\u7528\u8BE5USB\u8BBE\u5907

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:218
# args: VmInstanceUuid
please\ umount\ all\ usb\ devices\ of\ the\ vm[%s]\ and\ try\ again = \u8BF7\u5378\u8F7D\u4E91\u4E3B\u673A[{0}]\u7684\u6240\u6709USB\u8BBE\u5907\uFF0C\u7136\u540E\u91CD\u8BD5

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:795
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = \u4E91\u4E3B\u673A[uuid:{0}]\u52A0\u8F7D\u4E86pci\u8BBE\u5907\u65E0\u6CD5\u8FC1\u79FB

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:164
# args: msg.getUsbDeviceUuid(),usb.getVmInstanceUuid()
the\ usb\ device[uuid\:%s]\ has\ already\ been\ attached\ to\ vm[uuid\:%s] = USB\u8BBE\u5907[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:181
# args: 
PassThrough\ only\ support\ use\ on\ vm\ running\ host = \u76F4\u901A\u4EC5\u652F\u6301\u5728\u8FD0\u884C\u7269\u7406\u673A\u7684\u4E91\u4E3B\u673A\u4E0A\u4F7F\u7528

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:198
# args: msg.getUsbDeviceUuid(),msg.getVmInstanceUuid()
cannot\ attach\ the\ usb\ device[uuid\:%s]\ to\ vm[uuid\:%s],\ possibly\ reasons\ include\:\ the\ device\ is\ not\ enabled\ or\ had\ been\ attached\ to\ a\ vm,\ or\ the\ device\ and\ the\ vm\ are\ not\ on\ same\ host. = \u65E0\u6CD5\u5C06USB\u8BBE\u5907[uuid\uFF1A{0}]\u8FDE\u63A5\u5230VM[uuid\uFF1A{1}]\uFF0C\u539F\u56E0\u53EF\u80FD\u5305\u62EC\uFF1A\u8BBE\u5907\u672A\u542F\u7528\u6216\u5DF2\u8FDE\u63A5\u5230VM\uFF0C\u6216\u8005\u8BBE\u5907\u548CVM\u4E0D\u5728\u540C\u4E00\u7269\u7406\u673A\u4E0A\u3002

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:558
# args: deviceVO.getVmInstanceUuid()
usb\ is\ already\ bound\ to\ vm[uuid\:%s]\ and\ cannot\ be\ bound\ to\ other\ vm = USB\u5DF2\u7ED1\u5B9A\u5230VM[uuid\uFF1A{0}]\uFF0C\u65E0\u6CD5\u7ED1\u5B9A\u5230\u5176\u4ED6VM

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:731
# args: msg.getVmInstanceUuid()
vm[%s]\ cannot\ start\ because\ usb\ redirect\ host\ is\ not\ connected = \u4E91\u4E3B\u673A[{0}]\u65E0\u6CD5\u542F\u52A8\uFF0C\u56E0\u4E3A\u672A\u8FDE\u63A5USB\u91CD\u5B9A\u5411\u7269\u7406\u673A

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:744
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached\ by\ passthrough = \u4E0D\u80FD\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{0}]\uFF0C\u56E0\u4E3A\u4E91\u4E3B\u673A\u901A\u8FC7\u76F4\u8FDE\u7684\u65B9\u5F0F\u7ED1\u5B9A\u4E86USB\u8BBE\u5907

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:777
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached = \u4E0D\u80FD\u8FC1\u79FB\u4E91\u76D8[uuid:{0}]\uFF0C\u56E0\u4E3AUSB\u8BBE\u5907\u5DF2\u7ECF\u88AB\u7ED1\u5B9A

# at: src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:43
# args: 
not\ the\ time\ to\ clean = \u4E0D\u662F\u6253\u626B\u7684\u65F6\u5019\u3002

# at: src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:48
# args: conversionHost.getUuid(),conversionHost.getHostUuid()
conversionHost[uuid\:%s,\ hostUuid\:%s]\ is\ not\ Connected = ConversionHost[uuid\uFF1A{0}\uFF0CHostuuid\uFF1A{1}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:91
# args: hostUuid,psUuid
waiting\ host[uuid\:%s]\ and\ primaryStorage[uuid\:%s]\ Connected... = \u6B63\u5728\u7B49\u5F85\u7684\u7269\u7406\u673A[uuid\uFF1A{0}]\u548C\u4E3B\u5B58\u50A8[uuid\uFF1A{1}]\u5DF2\u8FDE\u63A5..

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:149
# args: hostUuid
host[uuid\:%s]\ is\ not\ Connected = \u7269\u7406\u673A[uuid\uFF1A{0}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:153
# args: primaryStorageUuid
primaryStorage[uuid%s]\ is\ not\ Connected = \u4E3B\u5B58\u50A8[uuid{0}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:186
# args: duplicateMac.get()
Not\ allowed\ same\ mac\ [%s] = \u4E0D\u5141\u8BB8\u5B58\u5728\u76F8\u540C\u7684MAC\u5730\u5740[{0}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:205
# args: duplicateElements.get(0)
Can't\ add\ same\ uuid\ in\ the\ l3Network,uuid\:\ %s = \u4E0D\u80FD\u6DFB\u52A0\u76F8\u540C\u7684uuid{0}\u5728\u4E09\u5C42\u7F51\u7EDC\u4E2D

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:217
# args: l3Uuid
l3Network[uuid\:%s]\ is\ Disabled,\ can\ not\ create\ vm\ on\ it = \u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E2A\u4E09\u5C42\u7F51\u7EDC\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:220
# args: l3Uuid
l3Network[uuid\:%s]\ is\ system\ network,\ can\ not\ create\ user\ vm\ on\ it = \u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u662F\u7CFB\u7EDF\u7F51\u7EDC\uFF0C\u4E0D\u80FD\u5728\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:252
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = \u533A\u57DF[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5904\u4E8E\u672A\u542F\u7528\u72B6\u6001\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:262
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = \u96C6\u7FA4[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5904\u4E8E\u672A\u542F\u7528\u72B6\u6001\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:273
# args: msg.getHostUuid()
host[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = \u7269\u7406\u673A[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5904\u4E8E\u672A\u542F\u7528\u72B6\u6001\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:278
# args: msg.getHostUuid(),connectionState
host[uuid\:%s]\ is\ specified\ but\ it's\ connection\ status\ is\ %s,\ can\ not\ create\ vm\ from\ it = \u7269\u7406\u673A[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5B83\u7684\u8FDE\u63A5\u72B6\u6001\u662F{1}\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:234
# args: msg.getDefaultL3NetworkUuid(),msg.getL3NetworkUuids()
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids%s = \u9ED8\u8BA4\u4E09\u5C42\u7F51\u7EDC\u7684uuid\u662F[uuid:{0}]\uFF0C\u4E0D\u5728\u4E09\u5C42\u7F51\u7EDCuuid\u4EEC\u4E2D{1}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:230
# args: 
there\ are\ more\ than\ one\ L3\ network\ specified\ in\ l3NetworkUuids,\ but\ defaultL3NetworkUuid\ is\ null = \u5728\u4E09\u5C42\u7F51\u7EDCuuid\u4EEC\u4E2D\u6709\u5F88\u591A\u4E09\u5C42\u7F51\u7EDC\u88AB\u6307\u5B9A\u4E86\uFF0C\u4F46\u662F\u9ED8\u8BA4\u4E09\u5C42\u7F51\u7EDC\u7684uuid\u662F\u7A7A\u7684

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:84
# args: msg.getHostUuid()
the\ status\ of\ host[uuid\:%s]\ must\ be\ Connected = \u7269\u7406\u673A[uuid\uFF1A{0}]\u7684\u72B6\u6001\u5FC5\u987B\u4E3A\u5DF2\u8FDE\u63A5

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:97
# args: 
v2v\ conversion\ host\ storage\ path\ must\ be\ absolute\ path = V2V\u8F6C\u6362\u7269\u7406\u673A\u5B58\u50A8\u8DEF\u5F84\u5FC5\u987B\u4E3A\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:120
# args: msg.getUrl()
invalid\ v2v\ url\:\ %s = \u65E0\u6548\u7684V2V URL\uFF1A{0}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:131
# args: srcVmUuid
vm\ instance[uuid\:%s]\ does\ not\ exist\ or\ is\ not\ a\ vmware\ vm = \u4E91\u4E3B\u673A\u5B9E\u4F8B[uuid\uFF1A{0}]\u4E0D\u5B58\u5728\u6216\u4E0D\u662FVMware\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:138
# args: 
conversionHostUuid\ should\ not\ be\ null = ConversionHostuuid\u4E0D\u5E94\u4E3A\u7A7A

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:148
# args: msg.getConversionHostUuid()
underlying\ host\ of\ conversion\ host[uuid\:%s]\ should\ be\ Connected = \u8FC1\u79FB\u670D\u52A1\u5668[uuid:{0}]\u6240\u5173\u8054\u7684\u7269\u7406\u673A\u5E94\u5904\u4E8E\u5DF1\u8FDE\u63A5\u72B6\u6001

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:164
# args: msg.getConversionHostUuid(),msg.getPrimaryStorageUuid()
conversion\ host[uuid\:%s]\ cannot\ connect\ to\ primary\ storage[uuid\:%s] = \u8F6C\u6362\u7269\u7406\u673A[uuid\uFF1A{0}]\u65E0\u6CD5\u8FDE\u63A5\u5230\u4E3B\u5B58\u50A8[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:197
# args: duplicateMacs
Duplicate\ mac\ address\ %s = \u91CD\u590D\u7684MAC\u5730\u5740{0}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:289
# args: msg.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ is\ not\ supported\ for\ v2v = V2V\u4E0D\u652F\u6301\u4E3B\u5B58\u50A8[uuid\uFF1A{0}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:292
# args: msg.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ is\ neither\ Enabled\ nor\ Connected = \u4E3B\u5B58\u50A8[uuid\uFF1A{0}]\u65E2\u672A\u542F\u7528\u4E5F\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:302
# args: msg.getVolumeUuid(),msg.getHostUuid()
there\ are\ some\ v2v\ jobs\ in\ progress.\ can\ not\ attach\ volume[%s]\ to\ host[%s] = \u6709\u4E00\u4E9BV2V\u4F5C\u4E1A\u6B63\u5728\u8FDB\u884C\u4E2D\u3002\u65E0\u6CD5\u5C06\u5377[{0}]\u9644\u52A0\u5230\u7269\u7406\u673A[{1}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:313
# args: msg.getVolumeUuid(),msg.getHostUuid()
there\ are\ some\ v2v\ jobs\ in\ progress.\ can\ not\ detach\ volume[%s]\ from\ host[%s] = \u6709\u4E00\u4E9BV2V\u4F5C\u4E1A\u6B63\u5728\u8FDB\u884C\u4E2D\u3002\u65E0\u6CD5\u4ECE\u7269\u7406\u673A[{1}]\u5206\u79BB\u5377[{0}]

# at: src/main/java/org/zstack/v2v/V2VConversionHostCapacityUpdater.java:98
# args: reserveSize,conversionHostVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ conversion\ host[uuid\:%s],\ it's\ short\ of\ available\ capacity = \u65E0\u6CD5\u5728\u8F6C\u6362\u7269\u7406\u673A[uuid\uFF1A{1}]\u4E0A\u4FDD\u7559{0}\u5B57\u8282\uFF0C\u53EF\u7528\u5BB9\u91CF\u4E0D\u8DB3

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:597
# args: l3Uuid
Unable\ to\ find\ L3Network[uuid\:%s]\ to\ start\ the\ current\ vm,\ it\ may\ have\ been\ deleted,\ Operation\ suggestion\:\ delete\ this\ vm,\ recreate\ a\ new\ vm = \u627E\u4E0D\u5230\u542F\u52A8\u5F53\u524D\u4E91\u4E3B\u673A\u7684L3Network[uuid\uFF1A{0}]\uFF0C\u8BE5\u4E91\u4E3B\u673A\u53EF\u80FD\u5DF2\u88AB\u5220\u9664\uFF0C\u64CD\u4F5C\u5EFA\u8BAE\uFF1A\u5220\u9664\u8BE5\u4E91\u4E3B\u673A\uFF0C\u91CD\u65B0\u521B\u5EFA\u65B0\u7684\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1207
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ is\ not\ a\ number = \u9519\u8BEF\u7684\u7F51\u7EDC\u5E26\u5BBD[{0}]\uFF0C\u8FD9\u4E0D\u662F\u6570\u5B57

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1204
# args: 
networkInboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = \u8D85\u8FC7\u4E0B\u884C\u7F51\u7EDC\u5E26\u5BBD\u8D85\u8FC7\u6700\u5927\u503C32G bps

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:661
# args: msg.getUrl(),msg.getType()
can\ not\ find\ factory\ for\ src\ vm[url\:%s,\ v2vType\:%s] = \u627E\u4E0D\u5230SRC VM[URL\uFF1A{0}\uFF0Cv2vType\uFF1A{1}]\u7684\u5DE5\u5382

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:921
# args: msg.getHostUuid()
there\ has\ been\ a\ v2v\ conversion\ host\ with\ hostUuid\ %s = \u5DF2\u5B58\u5728Hostuuid\u4E3A{0}\u7684V2V\u8F6C\u6362\u7269\u7406\u673A

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1196
# args: 
invalid\ v2v\ qos\ systemtag = V2V QoS\u7CFB\u7EDF\u6807\u8BB0\u65E0\u6548

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1202
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ or\ equal\ to\ 1048576 = \u7F51\u7EDC\u5E26\u5BBD[{0}]\u65E0\u6548\uFF0C\u5B83\u5FC5\u987B\u5927\u4E8E\u6216\u7B49\u4E8E1048576

# at: src/main/java/org/zstack/v2v/V2VMsgTranslator.java:118
# args: srcVmUrl
can\ not\ find\ type\ for\ src\ vm[url\:%s] = \u627E\u4E0D\u5230SRC VM[URL\uFF1A{0}]\u7684\u7C7B\u578B

# at: src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java:890
# args: 
missing\ VM\ uuid\ in\ 'srcVmUrl' = \u201C srcvmurl \u201D\u4E2D\u7F3A\u5C11VM uuid

# at: src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java:956
# args: srcVmUuid
No\ root\ volume\ found\ for\ VM\:\ %s = \u627E\u4E0D\u5230VM\u7684\u6839\u5377\uFF1A{0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1575
# args: cidr,hostUuid
there\ is\ no\ available\ ip\ found\ in\ cidr\ %s\ on\ host\ %s,\ try\ reconnect\ host\ to\ refresh\ ips = \u5728\u7269\u7406\u673A{1}\u4E0A\u7684CIDR{0}\u4E2D\u627E\u4E0D\u5230\u53EF\u7528\u7684IP\uFF0C\u8BF7\u5C1D\u8BD5\u91CD\u65B0\u8FDE\u63A5\u7269\u7406\u673A\u4EE5\u5237\u65B0IP

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:190
# args: job.getUuid()
v2v\ job[uuid\:%s]\ is\ running = V2V\u8FC1\u79FB\u4EFB\u52A1[uuid:{0}]\u6B63\u5728\u8FD0\u884C

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:808
# args: srcVmUrl
failed\ to\ get\ virt-v2v\ uri\ for\ %s = \u65E0\u6CD5\u83B7\u53D6{0}\u7684virt-v2v URI

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1007
# args: urlBuilder.toString()
Failed\ to\ parse\ url\ %s = \u65E0\u6CD5\u5206\u6790URL{0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1288
# args: NOT_SUPPORTED_SPECIAL_CHARACTER
Target\ vm\ name\ can\ not\ contain\ those\ characters\ %s = \u76EE\u6807VM\u540D\u79F0\u4E0D\u80FD\u5305\u542B\u8FD9\u4E9B\u5B57\u7B26{0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java:120
# args: jobUuid,msg.getUrl()
There\ is\ already\ a\ long\ job[uuid\:%s]\ convert\ vm\ from\ %s = \u5DF2\u6709\u957F\u4F5C\u4E1A[uuid\uFF1A{0}]\u4ECE{1}\u8F6C\u6362VM

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java:145
# args: 
Failed\ to\ update\ conversion\ host\ dependency = \u65E0\u6CD5\u66F4\u65B0\u8F6C\u6362\u7269\u7406\u673A\u4F9D\u8D56\u5173\u7CFB

# at: src/main/java/org/zstack/vmware/ESXHost.java:155
# args: 
host\ is\ not\ connected = \u7269\u7406\u673A\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/vmware/ESXHost.java:244
# args: self.getvCenterUuid()
Syncing\ with\ VCenter[uuid\:%s],\ please\ try\ again\ later. = \u6B63\u5728\u4E0EvCenter[uuid\uFF1A{0}]\u540C\u6B65\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5\u3002

# at: src/main/java/org/zstack/vmware/ESXHost.java:359
# args: vmUuid,self.getUuid()
vmUuid\ [%s]\ not\ found\ in\ ESX\ host\ [%s] = \u5728ESX\u7269\u7406\u673A[{1}]\u4E2D\u627E\u4E0D\u5230VMuuid[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:709
# args: vmUuid
VM\ not\ found\:\ %s = \u627E\u4E0D\u5230VM\uFF1A{0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:635
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ suspend\ VM\ [%s]\:\ %s = \u65E0\u6CD5\u6302\u8D77\u4E91\u4E3B\u673A[{0}]\uFF1A{1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:631
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ suspend\ VM,\ task\ status\:\ %s = \u65E0\u6CD5\u6302\u8D77\u4E91\u4E3B\u673A\uFF0C\u4EFB\u52A1\u72B6\u6001\uFF1A{0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:670
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ resume\ VM\ [%s]\:\ %s = \u65E0\u6CD5\u6062\u590DVM[{0}]\uFF1A{1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:666
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ resume\ VM,\ task\ status\:\ %s = \u65E0\u6CD5\u6062\u590DVM\uFF0C\u4EFB\u52A1\u72B6\u6001\uFF1A{0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:740
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ shutdown\ guest\:\ %s,\ %s = \u65E0\u6CD5\u5173\u95ED\u6765\u5BBE\uFF1A{0}\uFF0C{1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:1370
# args: vmInv.getInstanceOfferingUuid()
instance\ uuid\ [%s]\ not\ found = \u672A\u627E\u5230\u5B9E\u4F8Buuid[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:1380
# args: vmInv.getImageUuid()
Image\ [%s]\ not\ found = \u672A\u627E\u5230\u955C\u50CF[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:1479
# args: vmUuid
VM\ [%s]\ not\ found\ in\ vCenter = \u5728vCenter\u4E2D\u627E\u4E0D\u5230\u4E91\u4E3B\u673A[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:1654
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ power\ on\ VM,\ task\ status\:\ %s = \u65E0\u6CD5\u542F\u52A8\u4E91\u4E3B\u673A\uFF0C\u4EFB\u52A1\u72B6\u6001\uFF1A{0}

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:122
# args: msg.getDriverType()
Nic\ driver\ %s\ not\ support\ yet = NIC\u9A71\u52A8\u7A0B\u5E8F{0}\u5C1A\u4E0D\u652F\u6301

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:67
# args: msg.getUuid(),vCenterVersion
console\ password\ is\ not\ supported\ by\ vm[uuid\:%s]\ on\ vCenter[version\:%s] = vCenter[\u7248\u672C\uFF1A{1}]\u4E0A\u7684VM[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u63A7\u5236\u53F0\u5BC6\u7801

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:73
# args: 
vCenter\ login\ name\ expected. = vCenter\u767B\u5F55\u540D\u79F0\u4E3A\u7A7A

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:77
# args: msg.getDomainName()
domainName[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = \u57DF\u540D[{0}]\u4E0D\u662F\u4E00\u4E2AIPv4\u5730\u5740\u6216\u6709\u6548\u7684\u7269\u7406\u673A\u540D

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:83
# args: msg.getDomainName()
vCenter\ [domainName\:%s]\ has\ been\ added = vCenter[domainName:{0}]\u5DF2\u7ECF\u88AB\u6DFB\u52A0

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:139
# args: clusterUuid,l2uuid
Cluster[uuid\:%s]\ and\ L2[uuid\:%s]\ belongs\ to\ different\ DCs = \u96C6\u7FA4[uuid:{0}]\u548C\u4E8C\u5C42\u7F51\u7EDC[uuid:{1}]\u5C5E\u4E8E\u4E0D\u540C\u7684DC

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:151
# args: clusterUuid
No\ hosts\ found\ within\ cluster\:\ %s = \u5728\u96C6\u7FA4{0}\u4E2D\u672A\u53D1\u73B0\u7269\u7406\u673A

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:184
# args: phyinf,phyinf
vSwitch/dvSwitch\ not\ found\:\ %s,\ or\ vSwitch\:\ %s\ on\ different\ ESX\ host\ doesn't\ has\ same\ portgroup = vSwitch/dvSwitch\u672A\u627E\u5230: {0}, \u6216\u8005vSwitch: {1}\u5728\u4E0D\u540C\u7684ESX Host\u4E0A\u7684portgroup\u914D\u7F6E\u4E0D\u540C

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:198
# args: l2uuid,vcvo.getUuid(),clusterUuid
L2[uuid\:%s]\ doesn't\ belong\ to\ vCenter[uuid\:%s]\ cluster[uuid\:%s] = \u4E8C\u5C42\u7F51\u7EDC[uuid:{0}]\u4E0D\u5C5E\u4E8EvCenter[uuid:{1}]\u96C6\u7FA4[uuid:{2}]

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:68
# args: bsUuid
No\ data-store\ attached\ to\ %s = \u6CA1\u6709\u9644\u52A0\u5230{0}\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:73
# args: bsUuid
Data-store\ not\ found\ for\ %s = \u627E\u4E0D\u5230{0}\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:103
# args: url.getProtocol()
unexpected\ protocol\:\ %s = \u4E0D\u652F\u6301\u7684\u534F\u8BAE\u7C7B\u578B\uFF1A{0}

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:109
# args: iinv.getName()
%s\ already\ exists = {0}\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:153
# args: 
vcenter\ backup\ storage\ do\ not\ support\ to\ cancel\ download\ image = vCenter\u5907\u4EFD\u5B58\u50A8\u4E0D\u652F\u6301\u53D6\u6D88\u4E0B\u8F7D\u955C\u50CF

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:203
# args: 
image\ not\ found\ in\ BS = \u5728\u955C\u50CF\u670D\u52A1\u5668\u4E0A\u672A\u627E\u5230\u76EE\u6807\u955C\u50CF

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:215
# args: 
not\ supported\ yet = \u5C1A\u4E0D\u652F\u6301

# at: src/main/java/org/zstack/vmware/VCenterHostAllocatorFilterExtensionPoint.java:368
# args: 
no\ candidate\ host\ for\ vcenter\ vm = \u627E\u4E0D\u5230VCenter\u7684\u7269\u7406\u673A\u53BB\u542F\u52A8vm

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:2040
# args: 
can't\ sync\ before\ datastores\ are\ separated = \u5728\u5206\u79BB\u4E3B\u5B58\u50A8\u4E4B\u524D\u65E0\u6CD5\u540C\u6B65

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3044
# args: vcvo.getUuid()
There\ are\ tasks\ running\ on\ the\ VCenter[uuid\:%s],\ please\ try\ again\ later. = vCenter[uuid\uFF1A{0}]\u4E0A\u6B63\u5728\u8FD0\u884C\u4EFB\u52A1\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5\u3002

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3134
# args: msg.getVCenterUuid()
VCenter[uuid\:%s]\ not\ found\:\  = VCenter[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3252
# args: 
Login\ failed,\ please\ check\ your\ login\ parameters. = \u767B\u5F55\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7528\u6237\u540D\u5BC6\u7801\u662F\u5426\u6B63\u786E

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3256
# args: msg.getDomainName(),ex.getMessage()
connect\ %s\ failed\:\ %s = \u8FDE\u63A5{0}\u5931\u8D25:{1}

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3262
# args: msg.getDomainName(),msg.getUsername()
Login\ to\ vCenter\ [%s]\ failed\ with\ user\ [%s],please\ check\ your\ network\ connection\ and\ credential. = \u7528\u6237[{1}]\u767B\u5F55vCenter[{0}]\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u60A8\u7684\u7F51\u7EDC\u8FDE\u63A5\u548C\u51ED\u636E

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3269
# args: msg.getDomainName(),msg.getPort() == null ? 443 : msg.getPort()
Parse\ response\ failed\ from\ vCenter\ [%s],please\ check\ the\ port\ number[%d]. = \u89E3\u6790vCenter[{0}]\u54CD\u5E94\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7AEF\u53E3\u53F7[{1}]

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3277
# args: msg.getDomainName()
SSL\ handshake\ failed\ with\ vCenter\ [%s],because\ insecure\ TLS\ 1.0\ is\ used.\ Manually\ enabled\ TLS\ 1.0\ in\ jdk\ configuration\ if\ needed. = \u4E0EvCenter[{0}]\u7684SSL\u63E1\u624B\u5931\u8D25\uFF0C\u56E0\u4E3A\u4F7F\u7528\u4E86\u4E0D\u5B89\u5168\u7684TLS 1.0\u3002\u5982\u679C\u9700\u8981\uFF0C\u5728JDK\u914D\u7F6E\u4E2D\u624B\u52A8\u542F\u7528TLS 1.0\u3002

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3283
# args: msg.getDomainName(),msg.getPort() == null ? 443 : msg.getPort()
SSL\ handshake\ failed\ with\ vCenter\ [%s],please\ check\ the\ port\ number[%d]. = \u4E0EvCenter[{0}]\u7684SSL\u63E1\u624B\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7AEF\u53E3\u53F7[{1}]\u3002

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3359
# args: 
No\ clustered\ compute\ resource\ found = \u672A\u627E\u5230\u96C6\u7FA4\u8D44\u6E90

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3363
# args: 
No\ dvSwitch\ or\ qualified\ vSwitch\ found = \u672A\u627E\u5230\u53EF\u4F7F\u7528\u7684dvSwitch/vSwitch

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3546
# args: dsMorVal,vcUuid
Datastore\ %s\ not\ found\ for\ vCenter\ %s = vCenter{1}\u4E2D\u672A\u627E\u5230Datastore{0}

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3936
# args: 
Missing\ host\ uuid\ in\ message = \u6D88\u606F\u4E2D\u7F3A\u5931\u7269\u7406\u673Auuid

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4035
# args: 
Missing\ destination\ host\ uuid. = \u7F3A\u5C11\u76EE\u6807\u7269\u7406\u673A\u7684uuid

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4040
# args: 
Destination\ host\ is\ not\ ESX\ host. = \u76EE\u6807\u7269\u7406\u673A\u4E0D\u662FEsx\u7C7B\u578B\u7269\u7406\u673A

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4079
# args: vm.getConfig().getName(),hvo.getManagementIp()
Checking\ compatibility\ with\ vm\ %s\ failed\ on\ host\ %s = \u68C0\u67E5\u7269\u7406\u673A{1}\u4E0E\u4E91\u4E3B\u673A{0}\u7684\u517C\u5BB9\u6027\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4075
# args: 
HOST\ CPU/software\ NOT\ compatible = \u7269\u7406\u673A\u7684CPU/software\u4E0D\u517C\u5BB9

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4137
# args: 
Can't\ detach\ nic\ because\ the\ nic\ not\ supported\ to\ hot\ plugin\ in\ vcenter = \u65E0\u6CD5\u5378\u8F7D\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u8BE5\u7F51\u5361\u4E0D\u652F\u6301\u70ED\u62D4\u63D2

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:228
# args: 
No\ virtual\ disk\ manager = \u65E0\u865A\u62DF\u78C1\u76D8\u7BA1\u7406\u5668

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:235
# args: 
No\ file\ manager = \u6CA1\u6709\u6587\u4EF6\u7BA1\u7406\u5668

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:244
# args: 
No\ file\ Datacenter = \u65E0\u6587\u4EF6\u6570\u636E\u4E2D\u5FC3

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:350
# args: vm.getName()
failed\ to\ get\ VM[%s]\ root\ disk\ usage = \u83B7\u53D6VM[{0}]\u6839\u76D8\u4F7F\u7528\u7387\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:346
# args: installPath
failed\ to\ get\ VM\ from\ installPath\:\ %s = \u5728\u8DEF\u5F84{0}\u4E0B\u672A\u627E\u5230\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:258
# args: 
VCenter\ not\ found = \u627E\u4E0D\u5230vCenter

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:262
# args: vcvo.getUuid(),vcvo.getStatus()
VCenter[%s]\ is\ not\ in\ operation\ status,\ current\ status\:\ %s = vCenter[{0}]\u672A\u5904\u4E8E\u64CD\u4F5C\u72B6\u6001\uFF0C\u5F53\u524D\u72B6\u6001\uFF1A{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:328
# args: vCenterUrl,ex.getMessage()
failed\ to\ connect\ to\ vCenter\:\ %s\:\ %s = \u65E0\u6CD5\u8FDE\u63A5\u5230vCenter\uFF1A{0}\uFF1A{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:460
# args: installPath
vdisk\ not\ found\:\ %s = \u672A\u627E\u5230\u865A\u62DF\u78C1\u76D8\uFF1A{0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:536
# args: getVcDomainName(si)
list\ storage\ failed\ for\ %s = {0}\u7684\u5217\u8868\u5B58\u50A8\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:556
# args: vm.getName()
No\ datastore\ found\ for\ VM\:\ %s = \u627E\u4E0D\u5230\u4E91\u4E3B\u673A{0}\u7684\u4E3B\u5B58\u50A8\u533A

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:610
# args: info.getName(),info.getInstanceUuid(),ex.getMessage()
failed\ to\ set\ ESX\ VM\ uuid\ [%s\:%s],\ because[%s] = \u65E0\u6CD5\u8BBE\u7F6EESX VM uuid[{0}\uFF1A{1}]\uFF0C\u56E0\u4E3A[{2}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:709
# args: zsImageUuid
template\ [%s]\ not\ found = \u672A\u627E\u5230\u6A21\u677F[{0}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:786
# args: host.getName()
failed\ to\ search\ resource\ pool\ for\ host\ %s = \u641C\u7D22\u7269\u7406\u673A{0}\u8D44\u6E90\u6C60\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:782
# args: host.getName()
No\ resource\ pool\ found\ for\ host\ %s = \u5728\u7269\u7406\u673A{0}\u4E0A\u672A\u627E\u5230\u8D44\u6E90\u6C60

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2415
# args: installPath
No\ unit\ number\ available\ for\ data\ disk\ %s = \u6CA1\u6709\u53EF\u7528\u4E8E\u6570\u636E\u78C1\u76D8{0}\u7684\u5355\u5143\u53F7

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1546
# args: vm.getName()
guest\ tools\ not\ installed\ or\ running\ for\ VM\:\ %s = \u4E91\u4E3B\u673A{0}\u4E0A\u672A\u5B89\u88C5\u6216\u8FD0\u884Cguest tools

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1581
# args: vm.getName()
upload\ file\ failed\ for\ VM\:\ %s = \u4E91\u4E3B\u673A{0}\u4E0A\u4F20\u6587\u4EF6\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1670
# args: vcvo.getName()
list\ dvSwitch\ failed\ for\ %s = \u4E3A{0}\u5217\u51FAdvSwitch\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1936
# args: clusterUuid
get\ vCenter\ cluster[%s]\ name\ failed = \u83B7\u53D6vCenter\u96C6\u7FA4[{0}]\u540D\u79F0\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2045
# args: dvSwitch
dvSwitch\ name\ [%s]\ not\ unique = dvSwitch\u540D\u79F0[{0}]\u4E0D\u552F\u4E00

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2103
# args: hvo.getName()
create\ portgroup\ failed\ for\ host\ %s = \u7269\u7406\u673A{0}\u521B\u5EFA\u7AEF\u53E3\u7EC4\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2100
# args: hvo.getName(),((OperationFailureException) ex).getErrorCode().getDetails()
create\ portgroup\ failed\ for\ host\ %s\:\ because\ %s = \u7269\u7406\u673A{0}\u521B\u5EFA\u7AEF\u53E3\u7EC4\u5931\u8D25\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2067
# args: hvo.getName(),hvo.getUuid()
Host[%s\:%s]\ not\ found\ on\ vCenter = vCenter\u4E0A\u672A\u627E\u5230\u7269\u7406\u673A[{0}:{1}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2079
# args: pgLabel,hvo.getName(),vlanId
portgroup[%s]\ already\ exists\ on\ host[%s]\ but\ with\ different\ vlanId(%d) = \u7AEF\u53E3\u7EC4[{0}]\u5DF2\u5B58\u5728\u4E8E\u7269\u7406\u673A[{1}]\u4E0A\uFF0C\u4F46\u5177\u6709\u4E0D\u540C\u7684VlanID\uFF08{2}\uFF09

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2083
# args: pgLabel,hvo.getName()
portgroup[%s]\ already\ exists\ on\ host[%s],please\ create\ again\ with\ other\ name\ or\ delete\ portgroup\ manually\ and\ attach\ to\ cluster\ again = \u7AEF\u53E3\u7EC4[{0}]\u5DF2\u7ECF\u5B58\u5728\u4E8E\u7269\u7406\u673A[{1}]\uFF0C\u8BF7\u91CD\u65B0\u4F7F\u7528\u53E6\u5916\u7684\u540D\u5B57\u521B\u5EFA\u6216\u8005\u624B\u52A8\u5220\u9664\u7AEF\u53E3\u7EC4\u7136\u540E\u91CD\u65B0\u52A0\u8F7D\u5230\u96C6\u7FA4

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2142
# args: vcvo.getName()
create\ dvPortGroup\ failed\ for\ %s = \u4E3A{0}\u521B\u5EFADVPortGroup\u5931\u8D25

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2137
# args: dvSwitchName,vcvo.getName()
dvSwitch\ [%s]\ not\ found\ on\ vCenter\ [%s] = \u5728vCenter[{1}]\u4E0A\u627E\u4E0D\u5230dvSwitch[{0}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2335
# args: ds.getName()
no\ dataCenter\ found\ for\ datastore = \u627E\u4E0D\u5230\u4E3B\u5B58\u50A8\u7684\u533A\u57DF

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2340
# args: 
virtual\ disk\ manager\ unavailable = \u865A\u62DF\u78C1\u76D8\u7BA1\u7406\u5668\u4E0D\u53EF\u7528

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2351
# args: installPath,mf.getLocalizedMessage()
delete\ vdisk[%s]\ failed\:\ %s = \u5220\u9664\u865A\u62DF\u78C1\u76D8[{0}]\u5931\u8D25\uFF1A{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2481
# args: dvSwitch.getName(),task.getTaskInfo().getError().getLocalizedMessage()
create\ dvPortGroup\ failed\ for\ dvSwitch\ [%s],\ %s = \u4E3AdvSwitch[{0}]\u521B\u5EFAdvPortGroup\u5931\u8D25\uFF0C{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2593
# args: me.getName(),mor.val,ex.getMessage()
failed\ to\ set\ ZStack\ uuid\ to\ VCenter\ ManagedEntity\ [name\:%s,\ mor\:%s]\ because\ %s = \u5728VCenter ManagedEntity [name\uFF1A{0}\uFF0Cmor\uFF1A{1}]\u4E0A\u8BBE\u7F6EZStack uuid\u5931\u8D25\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/vmware/VncPortAllocatorImpl.java:165
# args: 
No\ VNC\ ports\ available = \u672A\u627E\u5230\u53EF\u7528\u7684VNC\u7AEF\u53E3

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:450
# args: msg.getDns()
dns[%s]\ is\ not\ a\ IP\ address = dns\u5730\u5740[{0}]\u4E0D\u662F\u6709\u6548\u7684IP\u5730\u5740

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:338
# args: l3NetworkVO.getUuid()
no\ ip\ ranges\ attached\ with\ l3\ network[uuid\:%s] = \u5728\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u4E0A\u6CA1\u6709IP\u8303\u56F4\u88AB\u7ED1\u5B9A

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:178
# args: 
management\ network\ can\ not\ be\ detached = \u7BA1\u7406\u7F51\u7EDC\u65E0\u6CD5\u5206\u79BB

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:182
# args: 
default\ route\ network\ can\ not\ be\ detached = \u65E0\u6CD5\u5206\u79BB\u9ED8\u8BA4\u8DEF\u7531\u7F51\u7EDC

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:186
# args: 
original\ public\ network\ can\ not\ be\ detached = \u539F\u6709\u516C\u7F51\u4E0D\u80FD\u8131\u79BB

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:190
# args: vpc.getUuid()
could\ not\ detach\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ its\ state\ is\ not\ running\ or\ stopped = \u65E0\u6CD5\u5C06\u4E09\u5C42\u7F51\u7EDC\u4E0EVPC\u8DEF\u7531\u5668[uuid\uFF1A{0}]\u5206\u79BB\uFF0C\u56E0\u4E3A\u5176\u72B6\u6001\u672A\u8FD0\u884C\u6216\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:198
# args: vpc.getUuid()
could\ not\ detach\ l3\ network\ to\ vpc\ router[uuid\:%s]\ becaus\ the\ states\ of\ the\ master\ and\ slave\ are\ inconsistent = \u65E0\u6CD5\u5C06\u4E09\u5C42\u7F51\u7EDC\u4E0EVPC\u8DEF\u7531\u5668[uuid\uFF1A{0}]\u5206\u79BB\uFF0C\u56E0\u4E3A\u4E3B\u8BBE\u5907\u548C\u4ECE\u8BBE\u5907\u7684\u72B6\u6001\u4E0D\u4E00\u81F4

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:231
# args: l3NetworkVO.getUuid(),vmInstanceVO.getUuid(),vipPeerVOs.stream().map(VipPeerL3NetworkRefVO::getVipUuid).collect(Collectors.toList())
l3\ network[uuid\:%s]\ can\ not\ detach\ from\ vpc\ vrouter[uuid\:%s]\ since\ network\ services\ attached\ vips[%s]\ still\ used\ in\ l3 = \u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u65E0\u6CD5\u4E0EVPC\u865A\u62DF\u8DEF\u7531\u5668[uuid\uFF1A{1}]\u5206\u79BB\uFF0C\u56E0\u4E3A\u7F51\u7EDC\u670D\u52A1\u9644\u52A0\u7684VIP[{2}]\u4ECD\u5728L3\u4E2D\u4F7F\u7528

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:247
# args: l3NetworkVO.getUuid(),vmInstanceVO.getUuid(),vmNicVOS.stream().map(ResourceVO::getUuid).collect(Collectors.toList())
vpc\ l3\ network[uuid\:%s]\ can\ not\ detach\ from\ vpc\ vrouter[uuid\:%s]\ since\ vm\ nics[%s]\ still\ used\ in\ l3 = vpc\u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u65E0\u6CD5\u4ECEvpc\u8DEF\u7531\u5668[uuid:{1}]\u5378\u8F7D, \u4E09\u5C42\u7F51\u7EDC\u8FD8\u5728\u4F7F\u7528\u4EE5\u4E0B\u4E91\u4E3B\u673A\u7F51\u5361[{2}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:257
# args: msg.getVirtualRouterOfferingUuid()
virtual\ router\ offering[uuid\:\ %s]\ is\ not\ enabled = \u4E91\u8DEF\u7531\u89C4\u683C[uuid: {0}]\u662F\u4E0D\u53EF\u7528\u7684

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:284
# args: 
only\ vpc\ l3\ network\ can\ attach\ to\ vpc\ vrouter = \u53EA\u6709VPC\u4E09\u5C42\u7F51\u7EDC\u53EF\u4EE5\u7ED1\u5B9A\u5230VPC\u4E91\u8DEF\u7531

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:292
# args: msg.getL3NetworkUuid(),vmNics.get(0).getVmInstanceUuid()
Vpc\ network\ [uuid\:%s]\ already\ attached\ to\ vpc\ router\ [uuid\:%s] = VPC\u7F51\u7EDC[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:329
# args: msg.getVmInstanceUuid()
could\ not\ attached\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ both\ its\ state\ and\ it\ peer\ state\ is\ not\ running\ or\ stopped = \u65E0\u6CD5\u5C06\u4E09\u5C42\u7F51\u7EDC\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A\u5176\u72B6\u6001\u548C\u5BF9\u7B49\u72B6\u6001\u5747\u672A\u8FD0\u884C\u6216\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:312
# args: msg.getVmInstanceUuid()
could\ not\ attached\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ its\ state\ is\ not\ running\ or\ stopped = \u65E0\u6CD5\u5C06\u4E09\u5C42\u7F51\u7EDC\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A\u5176\u72B6\u6001\u672A\u8FD0\u884C\u6216\u5DF2\u505C\u6B62

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:362
# args: vip.getL3NetworkUuid(),vip.getUuid(),vip.getIp(),msg.getL3NetworkUuid(),vmInstanceVO.getUuid()
public\ network[uuid\:\ %s]\ vip[uuid\:\ %s,\ ip\:\ %s]\ peer\ with\ l3network[uuid\:\ %s]\ not\ on\ vpc\ vr[uuid\:\ %s] = \u5728VPC\u4E91\u8DEF\u7531[uuid: {4}]\u4E0A\uFF0C\u4E09\u5C42\u7F51\u7EDC[uuid: {3}]\u6CA1\u6709\u548C\u516C\u6709\u7F51\u7EDC[uuid: {0}]\u865A\u62DFIP[uuid: {1}, ip: {2}]\u540C\u9636

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:383
# args: gateways,msg.getL3NetworkUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied = \u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u7684\u7F51\u5173[uuid:{0}]\u5DF2\u7ECF\u88AB\u5360\u7528

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:428
# args: msg.getStaticIp(),gateways,l3NetworkVO.getUuid()
the\ static\ ip[%s]\ specified\ in\ message\ not\ equals\ to\ gateway\ ips[%s]\ of\ l3\ network[uuid\:%s] = \u6D88\u606F\u4E2D\u6307\u5B9A\u7684\u9759\u6001IP[{0}]\u4E0D\u7B49\u4E8E\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{2}]\u7684\u7F51\u5173IP[{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:440
# args: vipL3Uuid
l3\ network\ [uuid\:%s]\ must\ be\ attached\ first,\ because\ there\ is\ vip\ on\ that\ l3\ network = \u5FC5\u987B\u9996\u5148\u8FDE\u63A5\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A\u8BE5\u4E09\u5C42\u7F51\u7EDC\u4E0A\u5B58\u5728VIP

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:457
# args: msg.getDns(),msg.getUuid()
dns\ address\ [%s]\ is\ not\ added\ to\ vpc\ router\ [uuid\:%s] = dns\u5730\u5740[{0}]\u672A\u6DFB\u52A0\u5230vpc\u8DEF\u7531[uuid:{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:488
# args: ipr.getL3NetworkUuid(),ipRangeVO.getNetworkCidr(),uuid
could\ not\ add\ ipv6\ range\ to\ l3\ network[uuid\:%s],\ because\ it's\ overlap\ with\ cidr\ [%s]\ of\ vRouter\ [uuid\:%s] = \u65E0\u6CD5\u5C06IPv6\u8303\u56F4\u6DFB\u52A0\u5230\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A\u5B83\u4E0EVRouter[uuid\uFF1A{2}]\u7684CIDR[{1}]\u91CD\u53E0

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:483
# args: ipr.getL3NetworkUuid(),ipRangeVO.getNetworkCidr(),uuid
could\ not\ add\ ip\ range\ to\ l3\ network[uuid\:%s],\ because\ it's\ overlap\ with\ cidr\ [%s]\ of\ vRouter\ [uuid\:%s] = \u65E0\u6CD5\u5C06IP\u8303\u56F4\u6DFB\u52A0\u5230\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\uFF0C\u56E0\u4E3A\u5B83\u4E0EVRouter[uuid\uFF1A{2}]\u7684CIDR[{1}]\u91CD\u53E0

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:859
# args: rsp.getError()
operation\ error,\ because\:%s = \u64CD\u4F5C\u9519\u8BEF\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:558
# args: msg.getUuid()
can\ not\ get\ connections\ of\ distributed\ routing\ to\ virtual\ router\ %s = \u4E0D\u80FD\u83B7\u53D6\u5206\u5E03\u5F0F\u8DEF\u7531\u5230\u4E91\u8DEF\u7531\u7684\u8FDE\u63A5

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:596
# args: vrinv.getUuid()
can\ not\ set\ state\ of\ distributed\ routing\ to\ virtual\ router\ %s = \u4E0D\u80FD\u8BBE\u7F6E\u5206\u5E03\u5F0F\u8DEF\u7531\u5230\u4E91\u8DEF\u7531\u7684\u72B6\u6001

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:720
# args: msg.getNetworkService(),msg.getUuid()
not\ support\ to\ get\ the\ service\ %s\ state\ to\ virtual\ router\ %s = \u8DEF\u7531\u5668 {1} \u4E0D\u652F\u6301\u7F51\u7EDC\u529F\u80FD{0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:855
# args: vrinv.getUuid()
can\ not\ get\ state\ of\ distributed\ routing\ to\ virtual\ router\ %s = \u83B7\u53D6\u8DEF\u7531\u5668 {0} \u5206\u5E03\u5F0F\u8DEF\u7531\u7684\u72B6\u6001\u5931\u8D25

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:934
# args: msg.getNetworkService(),msg.getUuid()
not\ support\ to\ update\ the\ service\ %s\ state\ to\ virtual\ router\ %s = \u8DEF\u7531\u5668 {1} \u4E0D\u652F\u6301\u66F4\u65B0\u7F51\u7EDC\u529F\u80FD{0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:1336
# args: 
vpc\ l3\ network\ must\ attach\ a\ vpc\ vrouter\ first\ before\ do\ anything\ related\ to\ vrouter(like\ start/stop\ vm,\ create\ lb,\ etc.) = \u5728\u505A\u8BBE\u7F6E\u4E91\u8DEF\u7531\u7684\u4EFB\u4F55\u64CD\u4F5C\uFF08\u5982\u542F\u52A8/\u505C\u6B62\u4E91\u4E3B\u673A\u3001\u521B\u5EFA\u8D1F\u8F7D\u5747\u8861\u7B49\uFF09\uFF0CVPC\u4E09\u5C42\u7F51\u7EDC\u5FC5\u987B\u9996\u5148\u7ED1\u5B9A\u4E09\u5C42\u8DEF\u7531

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:1594
# args: msg.getDns(),msg.getVpcRouterUuid()
dns\ address\ [%s]\ has\ bean\ added\ to\ vpc\ router\ [uuid\:%s] = \u5728\u8DEF\u7531\u5668[uuid:{1}]\u4E0A\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2ADNS[{0}]

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:166
# args: vpcUuid
can\ not\ detach\ nic\ from\ vpc\ vr[uuid\:%s] = \u4E0D\u80FD\u4ECEVPC\u4E91\u8DEF\u7531[uuid:{0}]\u89E3\u7ED1\u7F51\u5361

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:473
# args: l3.getUuid()
there\ is\ no\ ip\ range\ for\ l3\ network[uuid\:%s] = \u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u6CA1\u6709IP\u8303\u56F4

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:501
# args: ip.getGateway(),l3.getUuid(),vm.getUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied\ on\ vpc\ vr[uuid\:\ %s] = \u5728VPC\u7684\u4E91\u8DEF\u7531[uuid: {2}]\u4E0A\uFF0C\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u7684\u7F51\u5173[uuid:{0}]\u5DF2\u7ECF\u88AB\u5360\u7528

# at: src/main/java/org/zstack/vpc/VpcVyosDeployZsnAgentFlow.java:133
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ vpc\ router[%s],\ the\ ssh\ port\ seems\ not\ open = \u65E0\u6CD5\u901A\u8FC7SSH\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668[{0}]\uFF0CSSH\u7AEF\u53E3\u4F3C\u4E4E\u672A\u6253\u5F00

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:217
# args: msg.getVmInstanceUuid()
there\ is\ no\ master\ router\ of\ router\ [uuid\:%s] = \u8DEF\u7531\u5668[uuid:{0}]\u7684\u9AD8\u53EF\u7528\u7EC4\u6CA1\u6709\u4E3B\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:130
# args: msg.getVirtualRouterUuid()
Could\ not\ update\ this\ network\ service,\ due\ to\ vpc\ [uuid\:%s]\ is\ not\ support\ update\ network\ service\ version = \u65E0\u6CD5\u66F4\u65B0\u6B64\u7F51\u7EDC\u670D\u52A1\uFF0C\u56E0\u4E3AVPC[uuid\uFF1A{0}]\u4E0D\u652F\u6301\u66F4\u65B0\u7F51\u7EDC\u670D\u52A1\u7248\u672C

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:137
# args: msg.getVirtualRouterUuid(),vo.getKernelVersion()
Could\ not\ update\ this\ network\ service,\ due\ to\ vpc\ [uuid\:%s]\ used\ old\ kernel\ version\:[%s] = \u65E0\u6CD5\u66F4\u65B0\u6B64\u7F51\u7EDC\u670D\u52A1\uFF0C\u56E0\u4E3AVPC[uuid\uFF1A{0}]\u4F7F\u7528\u4E86\u65E7\u5185\u6838\u7248\u672C\uFF1A[{1}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:144
# args: 
Could\ not\ apply\ snat\ with\ non-default\ public\ network,\ due\ to\ multi\ snat\ feature\ is\ disabled = \u65E0\u6CD5\u4F7F\u7528\u975E\u9ED8\u8BA4\u516C\u7528\u7F51\u7EDC\u5E94\u7528SNAT\uFF0C\u56E0\u4E3A\u591ASNAT\u529F\u80FD\u5DF2\u7981\u7528

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:147
# args: msg.getL3NetworkUuid()
Could\ not\ apply\ snat\ with\ this\ L3Network,\ due\ to\ l3\ network\ [uuid\:%s]\ is\ not\ public\ network = \u65E0\u6CD5\u5BF9\u6B64\u4E09\u5C42\u7F51\u7EDC\u5E94\u7528SNAT\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u4E0D\u662F\u516C\u5171\u7F51\u7EDC

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:150
# args: msg.getL3NetworkUuid()
Could\ not\ apply\ snat\ with\ this\ L3Network,\ due\ to\ l3\ network\ [uuid\:%s]\ is\ not\ attached\ to\ vpc\ router = \u65E0\u6CD5\u5BF9\u6B64\u4E09\u5C42\u7F51\u7EDC\u5E94\u7528SNAT\uFF0C\u56E0\u4E3A\u4E09\u5C42\u7F51\u7EDC[uuid\uFF1A{0}]\u672A\u8FDE\u63A5\u5230VPC\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:168
# args: ip
invalid\ monitor\ ip\ address\ [%s] = \u4EF2\u88C1\u5730\u5740[{0}]\u9519\u8BEF

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:205
# args: vpcVo.getUuid()
vpcHaRouter\ [uuid\:%s]\ is\ deleted = \u9AD8\u53EF\u7528\u7EC4[uuid:{0}]\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:235
# args: haUuid
there\ are\ more\ than\ 2\ vpc\ routers\ attached\ to\ haGroup\ [uuid\:%s] = \u9AD8\u53EF\u7528\u7EC4[uuid:{0}]\u7684\u8DEF\u7531\u5668\u6570\u91CF\u5DF2\u7ECF\u8D85\u8FC72

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:266
# args: l3Uuids,offeringL3Uuids
ha\ group\ management\ l3\ and\ public\ l3\ networks[uuid\:%s]\ are\ different\ from\ offering\ l3\ networks\ [uuid\:%s] = \u9AD8\u53EF\u7528\u7EC4\u7684\u7BA1\u7406\u7F51\uFF0C\u516C\u7F51\u7EC4\u5408[uuid:{0}]\u548C\u4E91\u8DEF\u7531\u89C4\u683C\u7684\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E0D\u540C

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:322
# args: vpcL3Uuids,vpcHaGroupL3Uuids
vpc\ router\ l3\ networks\ [uuid\:%s]\ are\ different\ from\ ha\ group\ l3\ networks\ [uuid\:%s],\ !!!\ please\ delete\ this\ router\ and\ recreate\ it = vpc\u8DEF\u7531\u5668\u7684\u4E09\u5C42\u7F51\u8DEF[uuid:{0}]\u548C\u9AD8\u53EF\u7528\u7EC4\u7684\u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u4E0D\u540C

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:330
# args: oldHaUuid
vpc\ router\ has\ been\ attached\ to\ ha\ group\ [uuid\:%s] = vpc\u8DEF\u7531\u5668\u4E0D\u5728\u9AD8\u53EF\u7528\u7EC4[uuid:{0}]\u4E2D

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:334
# args: haUuid
vpc\ ha\ group\ [uuid\:%s]\ is\ not\ existed = \u9AD8\u53EF\u7528\u7EC4[uuid:{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:339
# args: haUuid
there\ are\ more\ than\ 1\ vpc\ routers\ attached\ to\ haGroup\ [uuid\:%s] = \u9AD8\u53EF\u7528\u7EC4[uuid:{0}]\u7684\u8DEF\u7531\u5668\u6570\u91CF\u5DF2\u7ECF\u8D85\u8FC71

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:344
# args: haUuid
vpc\ router\ [uuid\:%s]\ can\ not\ be\ upgraded\ to\ ha\ router\ because\ it\ public\ network\ is\ same\ to\ management\ network = vpc\u8DEF\u7531\u5668[uuid:{0}]\u4E0D\u80FD\u5347\u7EA7\u9AD8\u53EF\u7528\u8DEF\u7531\u5668\u56E0\u4E3A\u5B83\u7684\u7BA1\u7406\u7F51\u548C\u516C\u7F51\u76F8\u540C

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java:611
# args: ha.getName()
create\ affinityGroup\ for\ ha\ group\ [uuid\:%s]\ failed = \u9AD8\u53EF\u7528\u7EC4[uuid:{0}]\u521B\u5EFA\u4EB2\u548C\u7EC4\u5931\u8D25

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java:785
# args: vrName,vrUuid,vpcHaGroupName,vpcHaGroupUuid,old,status
virtualrouter\ %s\ [uuid\:\ %s\ ]\ of\ VPC\ HA\ group\ %s\ [uuid\:\ %s]\ haStatus\ changed\ from\ %s\ to\ %s = VPC\u9AD8\u53EF\u7528\u6027\u7EC4{2}[uuid\uFF1A{3}]\u7684VirtualRouter{0}[uuid\uFF1A{1}]\u7684\u9AD8\u53EF\u7528\u6027\u72B6\u6001\u5DF2\u4ECE{4}\u66F4\u6539\u4E3A{5}

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupVpcVrImpl.java:694
# args: 
ha\ group\ uuid\ nil = \u9AD8\u53EF\u7528\u6027\u7EC4uuid\u65E0

# at: src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java:85
# args: struct.getVmInstanceUuid()
VR[uuid\:\ %s]\ not\ running = VR[uuid\uFF1A{0}]\u672A\u8FD0\u884C

# at: src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java:90
# args: struct.getVmInstanceUuid()
VR[uuid\:\ %s]\ not\ connected = VR[uuid\uFF1A{0}]\u672A\u8FDE\u63A5

# at: src/main/java/org/zstack/vpc/ha/vyos/vyosVpcHaRouterBackendManagerImpl.java:140
# args: vrUuid,ret.getError()
failed\ to\ enable\ ha\ on\ virtual\ router[uuid\:%s],\ %s = \u8DEF\u7531\u5668[uuid:{0}]\u6253\u5F00\u9AD8\u53EF\u7528\u529F\u80FD\u5931\u8D25\uFF0C{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:373
# args: 
only\ tcp\ or\ udp\ protocol\ can\ use\ port = \u53EA\u6709TCP\u6216UDP\u534F\u8BAE\u53EF\u4EE5\u4F7F\u7528\u7AEF\u53E3

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:150
# args: msg.getUuid()
can\ not\ delete\ ruleSet[%s]\ because\ it\ still\ attached\ to\ nic = \u65E0\u6CD5\u5220\u9664\u89C4\u5219\u96C6[{0}]\uFF0C\u56E0\u4E3A\u5B83\u4ECD\u8FDE\u63A5\u5230NIC

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:129
# args: 
can\ not\ detach\ system\ default\ ruleSet = \u65E0\u6CD5\u5206\u79BB\u7CFB\u7EDF\u9ED8\u8BA4\u89C4\u5219\u96C6

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:142
# args: 
only\ system\ ruleSet\ can\ change\ action\ type = \u53EA\u6709\u7CFB\u7EDF\u89C4\u5219\u96C6\u624D\u80FD\u66F4\u6539\u64CD\u4F5C\u7C7B\u578B

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:154
# args: 
can\ not\ delete\ system\ default\ ruleSet = \u65E0\u6CD5\u5220\u9664\u7CFB\u7EDF\u9ED8\u8BA4\u89C4\u5219\u96C6

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:160
# args: 
can\ not\ delete\ system\ default\ rule = \u65E0\u6CD5\u5220\u9664\u7CFB\u7EDF\u9ED8\u8BA4\u89C4\u5219

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:170
# args: vRouteUuid
the\ router\ [uuid\:%s]\ does\ not\ has\ a\ master\ router = \u8DEF\u7531\u5668[uuid\uFF1A{0}]\u6CA1\u6709\u4E3B\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:188
# args: msg.getVpcUuid()
the\ VPC\ Router[uuid\:%s]\ already\ has\ a\ firewall. = VPC\u8DEF\u7531\u5668[uuid\uFF1A{0}]\u5DF2\u6709\u9632\u706B\u5899\u3002

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:378
# args: 
only\ tcp\ protocol\ can\ use\ tcp\ flag = \u53EA\u6709TCP\u534F\u8BAE\u624D\u80FD\u4F7F\u7528TCP\u6807\u5FD7

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:382
# args: 
only\ icmp\ protocol\ can\ use\ icmp\ type = \u53EA\u6709ICMP\u534F\u8BAE\u624D\u80FD\u4F7F\u7528ICMP\u7C7B\u578B

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:239
# args: msg.getName(),msg.getRuleNumber()
already\ has\ a\ rule\ template\ with\ name\ %s = \u5DF2\u6709\u540D\u4E3A{0}\u7684\u89C4\u5219\u6A21\u677F

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:338
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
the\ ruleSet[%s]\ already\ has\ a\ rule\ with\ rule\ number\ %s. = \u89C4\u5219\u96C6[{0}]\u5DF2\u5177\u6709\u89C4\u5219\u7F16\u53F7\u4E3A{1}\u7684\u89C4\u5219\u3002

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:343
# args: msg.getUuid()
can\ not\ update\ default\ rule[%s] = \u65E0\u6CD5\u66F4\u65B0\u9ED8\u8BA4\u89C4\u5219[{0}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:407
# args: msg.getUuid()
the\ rule\ [%s]\ number\ is\ invalid = \u89C4\u5219[{0}]\u7F16\u53F7\u65E0\u6548

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:416
# args: 
can\ not\ attach\ the\ default\ ruleSet\ to\ other\ nic = \u65E0\u6CD5\u5C06\u9ED8\u8BA4\u89C4\u5219\u96C6\u9644\u52A0\u5230\u5176\u4ED6NIC

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:431
# args: msg.getRuleSetUuid(),msg.getL3Uuid()
ruleSet[%s]\ already\ has\ a\ l3[%s] = \u89C4\u5219\u96C6[{0}]\u5DF2\u5177\u6709L3[{1}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:450
# args: duplicateRuleNumbers
already\ has\ a\ rule\ with\ the\ number[%s] = \u5DF2\u5177\u6709\u7F16\u53F7\u4E3A[{0}]\u7684\u89C4\u5219

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:748
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
the\ ruleSet[%s]\ already\ has\ a\ rule\ with\ the\ rule\ number\ %s. = \u89C4\u5219\u96C6[{0}]\u5DF2\u5177\u6709\u89C4\u5219\u7F16\u53F7\u4E3A{1}\u7684\u89C4\u5219\u3002

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:779
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ only\ tcp\ or\ udp\ protocol\ can\ use\ port = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219[{0}]\u53EA\u6709TCP\u6216UDP\u534F\u8BAE\u53EF\u4EE5\u4F7F\u7528\u7AEF\u53E3

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:785
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ only\ tcp\ protocol\ can\ use\ tcp\ flag = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219[{0}]\u53EA\u6709TCP\u534F\u8BAE\u53EF\u4EE5\u4F7F\u7528TCP\u6807\u5FD7

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:790
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ icmp\ protocol\ can\ use\ icmp\ type = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219[{0}]\uFF0C\u56E0\u4E3A\u53EA\u6709ICMP\u534F\u8BAE\u53EF\u4EE5\u4F7F\u7528ICMP\u7C7B\u578B

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:801
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ tcp\ or\ udp\ protocol\ can\ use\ port = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219[{0}]\uFF0C\u56E0\u4E3A\u53EA\u6709TCP\u6216UDP\u534F\u8BAE\u53EF\u4EE5\u4F7F\u7528\u7AEF\u53E3

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:824
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ tcp\ protocol\ can\ use\ tcp\ flag = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219[{0}]\uFF0C\u56E0\u4E3A\u53EA\u6709TCP\u534F\u8BAE\u53EF\u4EE5\u4F7F\u7528TCP\u6807\u5FD7

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:832
# args: msg.getRuleNumber(),error
could\ not\ add\ firewall\ rule[%d]\ because\ %s = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219[{0}]\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:846
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ ruleNo\ %d\ is\ invalid = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219\uFF0C\u56E0\u4E3ARuleNo{0}\u65E0\u6548

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:853
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ there\ is\ no\ action\ for\ ruleNo\:%d = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219\uFF0C\u56E0\u4E3A\u6CA1\u6709\u9488\u5BF9RuleNo\u7684\u64CD\u4F5C\uFF1A{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:867
# args: vo.getSourceIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ source\ IP\ length\:\ %s\ is\ not\ valid\ for\ ruleNo\:%d = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219\uFF0C\u56E0\u4E3A\u6E90IP\u957F\u5EA6{0}\u5BF9RuleNo{1}\u65E0\u6548

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:874
# args: vo.getDestIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ destination\ IP\ length\:\ %s\ is\ not\ valid\ for\ ruleNo\:%d = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219\uFF0C\u56E0\u4E3A\u76EE\u6807IP\u957F\u5EA6{0}\u5BF9RuleNo{1}\u65E0\u6548

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:885
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ there\ is\ no\ state\ for\ ruleNo\:%d = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219\uFF0C\u56E0\u4E3ARuleNo\u6CA1\u6709\u72B6\u6001\uFF1A{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:892
# args: vo.getDestIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ description\ length\ %s\ is\ not\ valid\ for\ ruleNo\:%d = \u65E0\u6CD5\u6DFB\u52A0\u9632\u706B\u5899\u89C4\u5219\uFF0C\u56E0\u4E3A\u63CF\u8FF0\u957F\u5EA6{0}\u5BF9RuleNo\u65E0\u6548\uFF1A{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:942
# args: 
the\ configuration\ file\ has\ format\ error = \u914D\u7F6E\u6587\u4EF6\u6709\u683C\u5F0F\u9519\u8BEF

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:948
# args: errorInfo
the\ firewall\ rules\ in\ the\ configuration\ file\ have\ syntax\ errors\:\ %s = \u914D\u7F6E\u6587\u4EF6\u4E2D\u7684\u9632\u706B\u5899\u89C4\u5219\u6709\u8BED\u6CD5\u9519\u8BEF\uFF1A{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:272
# args: rsp.getError()
sync\ firewall\ config\ failed,because\ %s = \u540C\u6B65\u9632\u706B\u5899\u914D\u7F6E\u5931\u8D25\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:459
# args: rsp.getError()
update\ firewall\ ruleSet\ action\ failed,\ because\ %s = \u66F4\u65B0\u9632\u706B\u5899\u89C4\u5219\u96C6\u64CD\u4F5C\u5931\u8D25\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:492
# args: l3Uuid,vRouterUuid
Can\ not\ find\ l3[%]\ related\ mac\ on\ vRouter[%s] = \u5728VRouter[{0}]\u4E0A\u627E\u4E0D\u5230\u4E0EL3[%]\u76F8\u5173\u7684MAC

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:557
# args: cmd.getRef().getRuleSetInfo().getRules().get(0).getRuleNumber(),rsp.getError()
create\ firewall\ rule[%s]\ failed,\ because\ %s = \u521B\u5EFA\u9632\u706B\u5899\u89C4\u5219[{0}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:645
# args: vRouterUuid,re.getError().getCause()
delete\ firewall\ on\ vRouter[%s],because\ %s = \u5220\u9664VRouter[{0}]\u4E0A\u7684\u9632\u706B\u5899\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:851
# args: vRouterUuid,rsp.getError()
delete\ firewall\ rule\ failed\ on\ vRouter[%s],\ because\ %s = \u5728VRouter[{0}]\u4E0A\u5220\u9664\u9632\u706B\u5899\u89C4\u5219\u5931\u8D25\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:784
# args: cmd.getRuleSet().getName(),re.getError().getCause()
create\ firewall\ ruleSet[%s]\ failed,\ because\ %s = \u521B\u5EFA\u9632\u706B\u5899\u89C4\u5219\u96C6[{0}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:936
# args: vRouterUuid,rsp.getError()
change\ firewall\ rule\ state\ on\ vRouter[%s]\ failed,\ because\ %s = \u66F4\u6539VRouter[{0}]\u4E0A\u7684\u9632\u706B\u5899\u89C4\u5219\u72B6\u6001\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1032
# args: struct.getRuleSetUuid(),re.getError()
attach\ firewall\ ruleSet[%s]\ failed,\ because\ %s = \u9644\u52A0\u9632\u706B\u5899\u89C4\u5219\u96C6[{0}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1063
# args: 
detach\ ruleSet\ failed,\ maybe\ it\ has\ been\ deleted = \u5206\u79BB\u89C4\u5219\u96C6\u5931\u8D25\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1129
# args: struct.getRuleSetUuid(),re.getError().getCause()
detach\ firewall\ ruleSet[%s]\ failed,because\ %s = \u5206\u79BB\u9632\u706B\u5899\u89C4\u5219\u96C6[{0}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:114
# args: msg.getVpcFirewallUuid()
cannot\ find\ vpcFirewall[uuid\:%s]\ related\ vRouter = \u627E\u4E0D\u5230\u4E0EvpcFirewall[uuid\uFF1A{0}]\u76F8\u5173\u7684\u865A\u62DF\u8DEF\u7531\u5668

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:109
# args: msg.getVpcFirewallUuid()
cannot\ find\ vpcFirewall[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230vpcFirewall[uuid\uFF1A{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:125
# args: msg.getRuleSetUuid()
cannot\ find\ vpcFirewallRuleSet[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230VpcFirewallRuleSet[uuid\uFF1A{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:301
# args: msg.getUuid()
cannot\ find\ vpcFirewallIpSetTemplate[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230VpcFireWallipSetTemplate[uuid\uFF1A{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u88AB\u5220\u9664

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:396
# args: msg.getRuleSetUuid(),msg.getL3Uuid(),errorCode.getCause()
attach\ firewall\ ruleSet[%s]\ to\ l3[%s]\ failed,because\ %s = \u5C06\u9632\u706B\u5899\u89C4\u5219\u96C6[{0}]\u9644\u52A0\u5230L3[{1}]\u5931\u8D25\uFF0C\u539F\u56E0\u662F{2}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:424
# args: msg.getL3Uuid(),errorCode.getCause()
detach\ firewall\ ruleSet\ from\ l3[%s]\ failed,because\ %s = \u4ECEL3[{0}]\u5206\u79BB\u9632\u706B\u5899\u89C4\u5219\u96C6\u5931\u8D25\uFF0C\u539F\u56E0\u662F{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:475
# args: duplicateRuleNumber.get(),ref.getVpcFirewallUuid(),ref.getL3NetworkUuid(),ref.getPacketsForwardType()
find\ duplicate\ rule\ numbers\ %s\ on\ firewall[%s],l3[%s],forward[%s] = \u5728\u9632\u706B\u5899[{1}]\u3001L3[{2}]\u3001\u8F6C\u53D1[{3}]\u4E0A\u67E5\u627E\u91CD\u590D\u7684\u89C4\u5219\u7F16\u53F7{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:483
# args: self.getUuid()
no\ changes\ in\ ruleset\ %s = \u89C4\u5219\u96C6{0}\u4E2D\u6CA1\u6709\u66F4\u6539

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:515
# args: firewall.get()
firewall\ %s\ related\ vpc\ not\ in\ running\ state = \u9632\u706B\u5899{0}\u76F8\u5173\u7684VPC\u672A\u5904\u4E8E\u8FD0\u884C\u72B6\u6001

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:753
# args: self.getUuid(),refVOs.size()
default\ ruleset\ %s\ can\ only\ attached\ to\ one\ interface\ forward,\ but\ find\ %s\ related\ interface = \u9ED8\u8BA4\u89C4\u5219\u96C6{0}\u53EA\u80FD\u8F6C\u53D1\u5230\u4E00\u4E2A\u63A5\u53E3\uFF0C\u4F46\u627E\u5230{1}\u4E2A\u76F8\u5173\u63A5\u53E3

# at: src/main/java/org/zstack/vrouterRoute/VRouterRouteApiInterceptor.java:115
# args: msg.getDestination()
destination[%s]\ can\ not\ has\ blackHole\ route\ and\ static\ route\ at\ same\ time = \u76EE\u6807[{0}]\u4E0D\u80FD\u540C\u65F6\u5177\u6709\u9ED1\u6D1E\u8DEF\u7531\u548C\u9759\u6001\u8DEF\u7531

# at: src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java:469
# args: msg.getUuid()
cannot\ find\ the\ route\ table\ [uuid\:%s] = \u627E\u4E0D\u5230\u8DEF\u7531\u8868[uuid:{0}]

# at: src/main/java/org/zstack/xdragon/XDragonFilterExtensionPoint.java:30
# args: 
xdragon\ host\ not\ support\ create\ vm\ using\ an\ iso\ image. = \u795E\u9F99\u670D\u52A1\u5668\u4E0D\u652F\u6301\u4F7F\u7528ISO\u955C\u50CF\u521B\u5EFA\u4E91\u4E3B\u673A\u3002

# at: src/main/java/org/zstack/xdragon/XDragonHostFactory.java:34
# args: msg.getClusterUuid(),XDragonConstant.HYPERVISOR_TYPE
cluster[uuid\:%s]\ hypervisorType\ is\ not\ %s = \u96C6\u7FA4[uuid\uFF1A{0}]\u7BA1\u7406\u7A0B\u5E8F\u7C7B\u578B\u4E0D\u662F{1}

# at: src/main/java/org/zstack/yunshan/util/YunshanClient.java:46
# args: 
the\ url\ is\ null,\ please\ config\ the\ YunShan\ NSP. = URL\u4E3A\u7A7A\uFF0C\u8BF7\u914D\u7F6E\u4E91\u5C71NSP\u3002

# at: src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java:55
# args: msg.getUsbDeviceUuid(),inventory.getVmInstanceUuid()
usb\ device[uuid\:%s]\ has\ been\ attached\ VM[uuid\:%s],\ cannot\ be\ add\ to\ zbox = USB\u8BBE\u5907[uuid\uFF1A{0}]\u5DF2\u8FDE\u63A5\u5230\u4E91\u4E3B\u673A[uuid\uFF1A{1}]\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u5230ZBox

# at: src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java:72
# args: zbox.getName(),zbox.getStatus()
zbox[name\:%s]\ status\ is\ not\ Ready,\ current\ status\ is\ %s = ZBox[\u540D\u79F0\uFF1A{0}]\u72B6\u6001\u672A\u5C31\u7EEA\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:122
# args: msg.getZBoxUuid()
zbox[uuid\:%s]\ is\ still\ in\ use,\ cannot\ eject\ it = ZBox[uuid\uFF1A{0}]\u4ECD\u5728\u4F7F\u7528\uFF0C\u65E0\u6CD5\u5C06\u5176\u5F39\u51FA

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:151
# args: msg.getZBoxUuid()
zbox[uuid\:%s]\ is\ not\ Ready,\ cannot\ sync\ capacity. = ZBox[uuid\uFF1A{0}]\u672A\u5C31\u7EEA\uFF0C\u65E0\u6CD5\u540C\u6B65\u5BB9\u91CF\u3002

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:219
# args: self.getMountPath(),msg.getInstallPath()
only\ file\ on\ zbox[mountPath\:%s]\ can\ be\ deleted.\ but\ pass\ [%s] = \u53EA\u80FD\u5220\u9664ZBox[mountPath\uFF1A{0}]\u4E0A\u7684\u6587\u4EF6\u3002\u4F46\u4F20\u9012[{1}]

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:285
# args: self.getName(),self.getStatus()
zbox[name\:%s]\ state\ is\ not\ Ready,\ current\ state\ is\ %s = ZBox[\u540D\u79F0\uFF1A{0}]\u72B6\u6001\u672A\u5C31\u7EEA\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/zbox/ZBoxFactory.java:57
# args: zbox.getUuid()
zbox[uuid\:\ %s]\ seems\ like\ removed = ZBox[uuid\uFF1A{0}]\u4F3C\u4E4E\u5DF2\u5220\u9664

# at: src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java:140
# args: apiStr
output\ from\ [%s]\ is\ empty = [{0}]\u7684\u8F93\u51FA\u4E3A\u7A7A

# at: src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java:159
# args: apiName,JSONObjectUtil.toJsonString(ob)
call\ action[%s]\ failed,\ cause\:\ %s = \u8C03\u7528\u64CD\u4F5C[{0}]\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A{1}

# at: src/main/java/org/zstack/zql/ast/visitors/OrderByExprVistor.java:14
# args: node.getDirection()
invalid\ order\ by\ clause,\ expect\ direction[asc,desc]\ but\ got\ %s = ORDER BY\u5B50\u53E5\u65E0\u6548\uFF0C\u5E94\u4E3A\u65B9\u5411[ASC\uFF0CDESC]\uFF0C\u4F46\u5F97\u5230{0}

# at: src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java:22
# args: m.simpleInventoryName(),f
invalid\ order\ by\ clause,\ inventory[%s]\ doesn't\ have\ field[%s] = ORDER BY\u5B50\u53E5\u65E0\u6548\uFF0C\u5E93\u5B58[{0}]\u6CA1\u6709\u5B57\u6BB5[{1}]

# at: src/main/java/org/zstack/zql/ast/visitors/plugin/SumPlugin.java:31
# args: 
the\ field\ to\ sum\ must\ be\ specified = \u5FC5\u987B\u6307\u5B9A\u8981\u6C47\u603B\u7684\u5B57\u6BB5

# at: src/main/java/org/zstack/zsv/ZsvManagerImpl.java:95
# args: volume.getUuid(),volume.getLastVmInstanceUuid()
volume\ %s\ still\ have\ snapshot\ group\ on\ vm\ %s,\ cannot\ attach\ to\ other\ vm = \u5377{0}\u5728\u4E91\u4E3B\u673A{1}\u4E0A\u4ECD\u5177\u6709\u5FEB\u7167\u7EC4\uFF0C\u65E0\u6CD5\u8FDE\u63A5\u5230\u5176\u4ED6\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/zsv/ZsvManagerImpl.java:127
# args: volume.getUuid()
volume\ %s\ still\ have\ snapshot\ group,\ cannot\ delete\ it = \u5377{0}\u4ECD\u5177\u6709\u5FEB\u7167\u7EC4\uFF0C\u65E0\u6CD5\u5C06\u5176\u5220\u9664

# at: src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:241
# args: paramName,normalizedExpr
unknown\ parameter[%s]\ in\ zwatch\ return\ with\ clause,\ %s = ZWatch Return WITH\u5B50\u53E5\u4E2D\u7684\u672A\u77E5\u53C2\u6570[{0}]\uFF0C{1}

# at: src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:250
# args: expr,e.getMessage()
invalid\ zwatch\ return\ with\ clause\:\ %s,\ %s = \u65E0\u6548\u7684ZWatch\u8FD4\u56DEWITH\u5B50\u53E5\uFF1A{0}\uFF0C{1}

# at: src/main/java/org/zstack/zwatch/ZWatchManagerImpl.java:1188
# args: 
Some\ messages\ have\ expired.\ The\ expired\ messages\ are\ not\ allowed\ to\ be\ modified.\ The\ system\ will\ automatically\ clean\ up\ the\ expired\ messages.\ Please\ operate\ later = \u90E8\u5206\u6D88\u606F\u5DF2\u8FC7\u671F\uFF0C\u8FC7\u671F\u6D88\u606F\u4E0D\u5141\u8BB8\u4FEE\u6539\u3002\u7CFB\u7EDF\u4F1A\u81EA\u52A8\u6E05\u7406\u8FC7\u671F\u6D88\u606F\uFF0C\u8BF7\u7A0D\u540E\u518D\u64CD\u4F5C

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:162
# args: msg.getKey()
event\ doesn't\ have\ label[%s] = \u62A5\u8B66\u4E8B\u4EF6\u6CA1\u6709\u6807\u7B7E[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:167
# args: msg.getKey()
the\ event\ subscription\ already\ has\ the\ label[%s] = \u4E8B\u4EF6\u8BA2\u9605\u5DF2\u7ECF\u6709\u6807\u7B7E[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:138
# args: msg.getActionUuid(),msg.getSubscriptionUuid()
the\ action[uuid\:%s]\ already\ attached\ to\ the\ event\ subscription[uuid\:%s] = \u62A5\u8B66\u52A8\u4F5C[uuid:{0}]\u5DF2\u7ECF\u88AB\u52A0\u8F7D\u5230\u62A5\u8B66\u65F6\u95F4\u8BA2\u9605[uuid:{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:213
# args: msg.getNamespace()
namespace[%s]\ not\ found = \u627E\u4E0D\u5230\u547D\u540D\u7A7A\u95F4[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:187
# args: ns.getName(),msg.getEventName()
namespace[%s]\ doesn't\ have\ the\ event[%s] = \u547D\u540D\u7A7A\u95F4[{0}]\u4E2D\u6CA1\u6709\u4E8B\u4EF6[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:195
# args: msg.getEventName(),l.getKey()
event[%s]\ doesn't\ have\ the\ label[%s] = \u4E8B\u4EF6[{0}]\u4E0D\u5B58\u5728\u6807\u7B7E[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:361
# args: k,l
duplicate\ key[%s]\ with\ values%s = \u91CD\u590D\u7684\u952E[{0}]\u548C\u952E\u503C{1}

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:222
# args: msg.getMetricName()
Period\ field\ is\ not\ supported\ for\ metric\ [name\:%s] = \u5EA6\u91CF[\u540D\u79F0\uFF1A{0}]\u4E0D\u652F\u6301\u671F\u95F4\u5B57\u6BB5

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:219
# args: msg.getMetricName()
Period\ field\ can\ not\ be\ null\ for\ metric\ [name\:%s] = \u5EA6\u91CF[\u540D\u79F0\uFF1A{0}]\u7684\u671F\u95F4\u5B57\u6BB5\u4E0D\u80FD\u4E3ANull

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:401
# args: msg.getNamespace(),metricName
namespace[%s]\ doesn't\ have\ the\ metric[%s] = \u547D\u540D\u7A7A\u95F4[{0}]\u4E0D\u5305\u542B\u65F6\u5E8F\u6570\u636E[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:405
# args: metric
the\ metric[%s]\ is\ admin\ only,\ not\ available\ for\ current\ user = \u6307\u6807[{0}]\u4EC5\u4F9B\u7BA1\u7406\u5458\u4F7F\u7528\uFF0C\u4E0D\u53EF\u7528\u4E8E\u5F53\u524D\u7528\u6237

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:350
# args: templateVO.getMetricName(),l.getKey()
the\ metric[%s]\ doesn't\ have\ the\ label[%s] = \u65F6\u5E8F\u6570\u636E[{0}]\u6CA1\u6709\u6807\u7B7E[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:273
# args: actionType
invalid\ action\ type[%s] = \u65E0\u6548\u7684\u62A5\u8B66\u52A8\u4F5C\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:278
# args: actionUuid,actionType
action[uuid\:%s,\ type\:%s]\ not\ found = \u627E\u4E0D\u5230\u62A5\u8B66\u52A8\u4F5C[uuid:{0}, \u7C7B\u578B:{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:286
# args: msg.getActionUuid(),msg.getActionType(),msg.getAlarmUuid()
duplicated\ action[uuid\:%s,\ type\:%s]\ for\ the\ alarm[uuid\:%s] = \u62A5\u8B66\u5668[uuid:{2}]\u5DF2\u7ECF\u5B58\u5728\u62A5\u8B66\u52A8\u4F5C[uuid:{0}, \u7C7B\u578B:{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:296
# args: msg.getKey(),msg.getOperator(),msg.getValue(),msg.getAlarmUuid()
duplicate\ label[key\:%s,\ operator\:%s,\ value\:%s]\ for\ the\ alarm[uuid\:%s] = \u62A5\u8B66\u5668[uuid:{2}]\u5DF2\u7ECF\u5B58\u5728\u6807\u7B7E[key:{0}, operator:{1}, value:{2}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:390
# args: msg.getNamespace()
namespace[%s]\ not\ support = \u4E0D\u652F\u6301\u547D\u540D\u7A7A\u95F4[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:110
# args: msg.getSubscriptionUuid()
cannot\ find\ the\ event\ subscription[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230\u4E8B\u4EF6\u8BA2\u9605[uuid:{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:119
# args: msg.getAlarmUuid()
cannot\ find\ the\ alarm[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230\u62A5\u8B66\u5668[uuid:{0}]\uFF0C\u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:525
# args: alarmVO.getMetricName()
the\ metric[%s]\ repeatInterval\ value\ cannot\ be\ less\ than\ 1h = \u65F6\u5E8F\u6570\u636E[{0}]\u7684\u62A5\u8B66\u95F4\u9694\u65F6\u95F4\u4E0D\u80FD\u4F4E\u4E8E1h

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:16
# args: 
InsufficientData = \u6570\u636E\u4E0D\u8DB3

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:14
# args: 
Alarm = \u5DF2\u89E6\u53D1

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:12
# args: 
OK = \u76D1\u63A7\u4E2D

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:55
# args: actionUuid
cannot\ find\ the\ topic[uuid\:%s] = \u627E\u4E0D\u5230\u4E3B\u9898[uuid:{0}]

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:96
# args: msg.getAlarmTextTemplateUuid()
cannot\ find\ SNSTextTemplate[uuid\:%s],\ it\ may\ have\ been\ deleted = \u627E\u4E0D\u5230\u62A5\u8B66\u6587\u672C\u6A21\u677F[uuid:{0}], \u5B83\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:198
# args: vo.getApplicationPlatformType()
invalid\ application\ platform\ type[%s] = \u65E0\u6548\u7684\u5E73\u53F0\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:212
# args: String.join(",\n", errorRecoverParams),String.join(",\n", AbstractTextTemplate.defaultSupportedParams.get(vo.getType()))
parameters\:\n\ %s\ are\ not\ supported\ by\ ZStack,\ available\ values\ are\:\n\ %s = \u53C2\u6570\uFF1A\n{0}\u4E0D\u53D7ZStack\u652F\u6301\uFF0C\u53EF\u7528\u503C\u4E3A\uFF1A\n{1}

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:203
# args: vo.getApplicationPlatformType()
application\ platform/endpoint\ [%s]\ doesn't\ support\ user-defined\ template = \u5E94\u7528\u5E73\u53F0/\u7EC8\u7AEF[{0}]\u4E0D\u652F\u6301\u7528\u6237\u5B9A\u4E49\u6A21\u677F

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:107
# args: sign,sign.length()
The\ length\ of\ aliyun\ sms\ sign\ should\ between\ 2\ to\ 12\ characters.\ Got\ sign\:\ [%s]\ with\ [%d]\ characters. = \u963F\u91CC\u4E91\u77ED\u4FE1\u6807\u8BC6\u7684\u957F\u5EA6\u5E94\u57282-12\u4E2A\u5B57\u7B26\u4E4B\u95F4\u3002\u83B7\u5F97\u7B26\u53F7\uFF1A[{0}]\uFF0C\u5305\u542B[{1}]\u4E2A\u5B57\u7B26\u3002

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:112
# args: alarmTemplateCode,alarmTemplateCode.length()
Sms\ template\ code\ is\ a\ string\ with\ 13\ characters.\ Got\ alarm\ template\ code\:\ [%s]\ with\ [%d]\ characters. = \u77ED\u4FE1\u6A21\u677F\u4EE3\u7801\u662F\u4E00\u4E2A13\u4E2A\u5B57\u7B26\u7684\u5B57\u7B26\u4E32\u3002\u83B7\u53D6\u62A5\u8B66\u6A21\u677F\u4EE3\u7801\uFF1A[{0}]\uFF0C\u5305\u542B[{1}]\u4E2A\u5B57\u7B26\u3002

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:117
# args: eventTemplateCode,eventTemplateCode.length()
Sms\ template\ code\ is\ a\ string\ with\ 13\ characters.\ Got\ event\ template\ code\:\ [%s]\ with\ [%d]\ characters. = \u77ED\u4FE1\u6A21\u677F\u4EE3\u7801\u662F\u4E00\u4E2A13\u4E2A\u5B57\u7B26\u7684\u5B57\u7B26\u4E32\u3002\u83B7\u53D6\u4E8B\u4EF6\u6A21\u677F\u4EE3\u7801\uFF1A[{0}]\uFF0C\u5305\u542B[{1}]\u4E2A\u5B57\u7B26\u3002

# at: src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java:31
# args: type
no\ template\ of\ this\ type\uFF1A%s,\  = \u6CA1\u6709\u6B64\u7C7B\u578B\u7684\u6A21\u677F\uFF1A{0}\uFF0C

# at: src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java:43
# args: e.getMessage()
template\ error\uFF1A%s = \u6A21\u677F\u9519\u8BEF\uFF1A{0}

# at: src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:1471
# args: DATA_DIR_CAPACITY_ALARM_uuid
alarm[uuid\:%s]\ is\ a\ system\ alarm\ which\ cannot\ be\ deleted = \u62A5\u8B66\u5668[uuid:{0}]\u662F\u4E00\u4E2A\u7CFB\u7EDF\u62A5\u8B66\u5668\uFF0C\u4E0D\u80FD\u88AB\u5220\u9664

# at: src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:1482
# args: SNSSystemAlarmTopicManager.SYSTEM_ALARM_TOPIC_uuid,DATA_DIR_CAPACITY_ALARM_uuid
removing\ system\ topic[uuid\:%s]\ from\ system\ alarm[uuid\:%s]\ is\ forbidden = \u7981\u6B62\u4ECE\u7CFB\u7EDF\u62A5\u8B66\u5668[uuid:{1}]\u79FB\u9664\u7CFB\u7EDF\u4E3B\u9898[uuid:{0}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:270
# args: l.getKey(),AuditDataV2.queryableLoginLabels
invalid\ label[%s],\ valid\ queryable\ labels\ are\ %s = \u65E0\u6548\u7684\u6807\u7B7E[{0}]\uFF0C\u6709\u6548\u7684\u53EF\u67E5\u8BE2\u6807\u7B7E\u662F{1}

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:487
# args: startTime,endTime
startTime[%s]\ is\ greater\ than\ endTime[%s] = \u5F00\u59CB\u65F6\u95F4[{0}]\u5927\u4E8E\u7ED3\u675F\u65F6\u95F4[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:162
# args: 
dataUuid\ cannot\ be\ missed = \u4E0D\u80FD\u7F3A\u5C11\u6570\u636E\u7528\u6237ID

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:168
# args: 
dataStartTime\ and\ dataEndTime\ cannot\ be\ missed = DataStartTime\u548CDataEndTime\u4E0D\u80FD\u4E22\u5931

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:172
# args: msg.getDataStartTime(),msg.getDataEndTime()
dataStartTime[%s]\ is\ greater\ than\ dataEndTime[%s] = DataStartTime[{0}]\u5927\u4E8EDataEndTime[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:190
# args: Namespace.ZSTACK_NAMESPACE_PREFIX
namespace\ name\ cannot\ start\ with\ %s\ that\ is\ reserved = \u540D\u5B57\u7A7A\u95F4(namespace)\u4E0D\u80FD\u4EE5{0}\u5F00\u5934

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:396
# args: end,msg.getEndTime(),start,msg.getStartTime()
endTime[%s,\ %sms]\ must\ not\ be\ before\ startTime[%s,\ %sms] = \u505C\u6B62\u65F6\u95F4(endTime)[{0}, {1}ms]\u4E0D\u80FD\u5728\u5F00\u59CB\u65F6\u95F4(startTime)[{2}, {3}ms]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:211
# args: MAX_QUERY_PERIOD
query\ period\ cannot\ exceed\ %s = \u67E5\u8BE2\u671F\u95F4\u4E0D\u80FD\u8D85\u8FC7{0}

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:355
# args: msg.getNamespace()
cannot\ find\ namespace[%s] = \u540D\u5B57\u7A7A\u95F4(namespace[{0}]\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:228
# args: msg.getMetricName(),msg.getNamespace()
cannot\ find\ metric[%s]\ in\ namespace[%s] = \u540D\u5B57\u7A7A\u95F4(namespace[{1}]\u4E2D\u627E\u4E0D\u5230\u65F6\u5E8F\u6570\u636E[{0}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:378
# args: msg.getMetricName(),labels,label.getKey()
metric[%s]'s\ labels[%s]\ does\ not\ include\ [%s] = \u65F6\u5E8F\u6570\u636E[{0}]\u7684\u6807\u7B7E\u5217\u8868[{1}]\u6CA1\u6709\u6307\u5B9A\u7684\u6807\u7B7E[{2}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:253
# args: msg.getMetricName(),l.getValue()
metric[%s]\ does\ not\ has\ filter[%s] = \u65F6\u5E8F\u6570\u636E[{0}]\u4E0D\u5305\u542B\u8FC7\u6EE4\u6761\u4EF6[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:324
# args: msg.getSession().getAccountUuid(),opt.get().getValue()
account[uuid\:\ %s]\ has\ no\ access\ to\ the\ resource[uuid\:\ %s] = \u5E10\u6237[uuid\uFF1A{0}]\u65E0\u6743\u8BBF\u95EE\u8D44\u6E90[uuid\uFF1A{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:346
# args: 
if\ namespace\ is\ all,\ not\ support\ specify\ metric\ and\ labels = \u5982\u679C\u547D\u540D\u7A7A\u95F4\u4E3AALL\uFF0C\u5219\u4E0D\u652F\u6301\u6307\u5B9A\u89C4\u683C\u548C\u6807\u7B7E

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:440
# args: msg.getNamespace()
no\ namespace[%s]\ defined\ in\ the\ system = \u7CFB\u7EDF\u4E2D\u672A\u5B9A\u4E49\u540D\u5B57\u7A7A\u95F4(namespace[{0}])

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:443
# args: msg.getNamespace(),msg.getMetricName()
the\ namespace[%s]\ has\ no\ metric[%s] = \u540D\u5B57\u7A7A\u95F4(namespace[{0}])\u4E0D\u5305\u542B\u65F6\u5E8F\u6570\u636E[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:433
# args: 
The\ url\ format\ is\ invalid,\ the\ beginning\ is\ not\ http = URL\u683C\u5F0F\u65E0\u6548\uFF0C\u5F00\u5934\u4E0D\u662FHTTP

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:449
# args: 
Illegal\ json\ string,\ labelsJsonStr\ format\ is\ invalid = \u975E\u6CD5\u7684JSON\u5B57\u7B26\u4E32\uFF0Clabelsjsonstr\u683C\u5F0F\u65E0\u6548

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:477
# args: url
platform[url\=%s]\ already\ exists = \u5E73\u53F0[URL={0}]\u5DF2\u5B58\u5728

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:498
# args: msg.getAlertDataUuid()
alert\ acknowledgement\ record\ does\ not\ exist = \u8B66\u62A5\u786E\u8BA4\u8BB0\u5F55\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:516
# args: tableName
invalid\ table[%s] = \u8868[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:522
# args: endTime,startTime
endTime[%s]\ must\ not\ be\ before\ startTime[%s] = EndTime[{0}]\u4E0D\u80FD\u65E9\u4E8EStartTime[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:527
# args: maxDurationDay
the\ time\ interval\ exceeds\ %\ days = \u65F6\u95F4\u95F4\u9694\u8D85\u8FC7%\u5929

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:19
# args: 
Normal = \u63D0\u793A

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:17
# args: 
Important = \u4E25\u91CD

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:15
# args: 
Emergent = \u7D27\u6025

# at: src/main/java/org/zstack/zwatch/datatype/Function.java:106
# args: expr,e.getMessage()
invalid\ function\:\ %s,\ %s = \u65E0\u6548\u7684\u65B9\u6CD5: {0}, {1}

# at: src/main/java/org/zstack/zwatch/datatype/Function.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ function\ found = \u65E0\u6548\u7684\u8868\u8FBE\u5F0F: {0}\uFF0C\u627E\u4E0D\u5230\u5BF9\u5E94\u7684\u65B9\u6CD5

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:58
# args: str
the\ label\ string[%s]\ contains\ no\ valid\ operator = \u6807\u7B7E\u4E2D[{0}]\u672A\u5305\u542B\u6709\u6548\u7684\u6BD4\u8F83\u7B26\u53F7(operator)

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:79
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'key'\ field\ cannot\ be\ null.\ %s = \u65E0\u6548\u7684\u6807\u7B7E"key"\u4E0D\u80FD\u4E3A\u7A7A\u3002{0}

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:82
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'op'\ field\ is\ null\ or\ something\ another\ than\ Regex\ and\ Equal.\ %s = \u65E0\u6548\u7684\u6807\u7B7E\uFF0C'op'\u4E3A\u7A7A\u6216\u8005\u662F\u5176\u5B83\u7684\u975E\u6B63\u5219\u6216\u8005\u7B49\u4E8E\u7B26\u53F7\u3002{0}

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:85
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'value'\ field\ cannot\ be\ null.\ %s = \u65E0\u6548\u7684\u6807\u7B7E"value"\u4E0D\u80FD\u4E3A\u7A7A\u3002{0}

# at: src/main/java/org/zstack/zwatch/datatype/ValueCondition.java:73
# args: str
the\ ValueCondition\ string[%s]\ require\ 'value'\ as\ key\  = ValueCondition\u5B57\u7B26\u4E32[{0}]\u9700\u8981\u201C value \u201D\u4F5C\u4E3A\u952E

# at: src/main/java/org/zstack/zwatch/function/ArgumentChecker.java:30
# args: value,name
invalid\ value[%s]\ of\ the\ argument[%s] = \u53C2\u6570[{1}]\u503C(value)[{0}]\u65E0\u6548

# at: src/main/java/org/zstack/zwatch/function/ExtremumFunction.java:24
# args: 
unknown\ arguments = \u672A\u77E5\u53C2\u6570

# at: src/main/java/org/zstack/zwatch/function/ExtremumFunction.java:30
# args: 
missing\ required\ argument = \u7F3A\u5C11\u5FC5\u9700\u7684\u53C2\u6570

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:88
# args: name
missing\ required\ argument[%s] = \u7F3A\u5C11\u53C2\u6570[{0}]

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:101
# args: k
duplicate\ argument[%s] = \u91CD\u590D\u7684\u53C2\u6570[{0}]

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:116
# args: func.getName()
unknown\ function[%s] = \u672A\u77E5\u65B9\u6CD5[{0}]

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:32
# args: v
value[%s]\ is\ not\ a\ Integer\ number = \u503C(value)[{0}]\u4E0D\u662F\u4E00\u4E2A\u6574\u6570

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:19
# args: v
invalid\ argument[limit\:%s],\ it\ can't\ be\ a\ negative\ number = \u65E0\u6548\u7684\u53C2\u6570[limit:{0}]\uFF0C\u4E0D\u80FD\u662F\u8D1F\u6570

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:29
# args: v
invalid\ argument[start\:%s],\ it\ can't\ be\ a\ negative\ number = \u53C2\u6570[\u5F00\u59CB\uFF1A{0}]\u65E0\u6548\uFF0C\u5B83\u4E0D\u80FD\u662F\u8D1F\u6570

# at: src/main/java/org/zstack/zwatch/function/SortFunction.java:42
# args: arg.name
unknown\ argument[%s] = \u672A\u77E5\u53C2\u6570[{0}]

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:62
# args: ret.getError()
unable\ to\ query\ influxdb,\ %s = \u65E0\u6CD5\u67E5\u8BE2InfluxDB\uFF0C{0}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:106
# args: JSONObjectUtil.toJsonString(ret)
invalid\ influxdb\ response\:\ %s,\ no\ name\ found\ in\ columns = InfluxDB\u54CD\u5E94\u65E0\u6548\uFF1A{0}\uFF0C\u5728\u5217\u4E2D\u627E\u4E0D\u5230\u540D\u79F0

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:92
# args: retention,res.getError()
failed\ to\ create\ influxdb\ retention\ '%s',\ %s = \u65E0\u6CD5\u521B\u5EFAInfluxDB\u4FDD\u7559\u201C{0}\u201D\uFF0C{1}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:85
# args: retention,res.getError()
failed\ to\ alter\ influxdb\ retention\ '%s',\ %s = \u65E0\u6CD5\u66F4\u6539InfluxDB\u4FDD\u7559\u201C{0}\u201D\uFF0C{1}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:124
# args: defaultUserName,res.getError()
failed\ to\ create\ influxdb\ default\ user\ '%s',\ %s = \u65E0\u6CD5\u521B\u5EFAInfluxDB\u9ED8\u8BA4\u7528\u6237\u201C{0}\u201D\uFF0C{1}

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:806
# args: name
cannot\ find\ EventFamily[name\:%s] = \u627E\u4E0D\u5230\u4E8B\u4EF6\u65CF[name:{0}]

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:797
# args: name,namespace
cannot\ find\ EventFamily[name\:%s,\ namespace\:%s] = \u627E\u4E0D\u5230\u4E8B\u4EF6\u65CF[name:{0}, namespace:{1}]

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:726
# args: label.getKey(),nameSpaceLabelList
invalid\ query\ label[%s].\ Allowed\ label\ names\ are\ %s = \u65E0\u6548\u7684\u67E5\u8BE2\u6807\u7B7E[{0}]\u3002\u5141\u8BB8\u6807\u7B7E\u540D\u662F {1}

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:627
# args: name.getValue(),InfluxEventDataV2.FIELD_NAMESPACE
there\ are\ multiple\ EventFamily\ with\ the\ name[%s],\ you\ must\ specify\ the\ label[%s] = \u5B58\u5728\u591A\u4E2A\u540D\u4E3A[{0}]\u7684\u4E8B\u4EF6\u65CF\uFF0C\u4F60\u5FC5\u987B\u6307\u5B9A\u6807\u7B7E[{1}]

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:55
# args: msg.getInstanceUuid()
the\ instance[%s]\ is\ already\ in\ the\ group = \u5B9E\u4F8B[{0}]\u5DF2\u5728\u7EC4\u4E2D

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:66
# args: msg.getInstanceUuid()
instance[%s]\ is\ not\ in\ the\ group = \u5B9E\u4F8B[{0}]\u4E0D\u5728\u7EC4\u4E2D

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:76
# args: msg.getGroupUuid()
The\ monitorGroup[%s]\ does\ not\ have\ an\ monitorTemplate\ applied = MonitorGroup[{0}]\u672A\u5E94\u7528MonitorTemplate

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupBase.java:333
# args: 
The\ instance\ in\ the\ group\ has\ reached\ the\ maximum\ limit = \u7EC4\u4E2D\u7684\u5B9E\u4F8B\u5DF2\u8FBE\u5230\u6700\u5927\u9650\u5236

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupManagerImpl.java:607
# args: 
The\ rule\ in\ the\ template\ has\ reached\ the\ maximum\ limit = \u6A21\u677F\u4E2D\u7684\u89C4\u5219\u5DF2\u8FBE\u5230\u6700\u5927\u9650\u5236

# at: src/main/java/org/zstack/zwatch/mysql/MysqlDatabaseDriver.java:51
# args: qo.getNamespaceName()
no\ mysql\ namespace[%s]\ found = \u672A\u627E\u5230MySQL\u547D\u540D\u7A7A\u95F4[{0}]

# at: src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:48
# args: getName(),queryObject.getMetricName()
namespace[%s]\ has\ no\ metric[%s] = \u540D\u5B57\u7A7A\u95F4(namespace)[{0}]\u6CA1\u6709\u4EFB\u4F55\u65F6\u5E8F\u6570\u636E(metric)[{1}]

# at: src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:54
# args: m.getName(),getName(),l.getKey()
metric[%s]\ of\ the\ namespace[%s]\ has\ no\ label\ named\ %s = \u540D\u5B57\u7A7A\u95F4(namespace)[{1}]\u7684\u65F6\u5E8F\u6570\u636E(metric)[{0}]\u6CA1\u6709\u540D\u4E3A{2}\u7684\u6807\u7B7E

# at: src/main/java/org/zstack/zwatch/namespace/NamespaceEventManagerImpl.java:437
# args: 
error\ happened\ but\ reason\ not\ specified = \u53D1\u751F\u4E86\u610F\u60F3\u4E0D\u5230\u7684\u9519\u8BEF

# at: src/main/java/org/zstack/zwatch/namespace/SystemNamespace.java:32
# args: d,Platform.getManagementServerIp()
folder[%s]\ not\ found\ on\ the\ management\ server[%s] = \u5728\u7BA1\u7406\u670D\u52A1\u5668[{1}]\u4E0A\u627E\u4E0D\u5230\u5BF9\u5E94\u7684\u6587\u4EF6\u5939[{0}]

# at: src/main/java/org/zstack/zwatch/prometheus/KvmHostScrape.java:165
# args: rsp.getError()
%s = {0}

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:35
# args: 
LessThanOrEqualTo = \u5C0F\u4E8E\u7B49\u4E8E

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:33
# args: 
LessThan = \u5C0F\u4E8E

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:31
# args: 
GreaterThan = \u5927\u4E8E

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:29
# args: 
GreaterThanOrEqualTo = \u5927\u4E8E\u7B49\u4E8E

# at: src/main/java/org/zstack/zwatch/utils/ResourceVOToNamespaceMappingUtils.java:78
# args: voClassSimpleName
resource[%s]\ doesn't\ support\ zwatch\ return\ with\ clause = \u8D44\u6E90[{0}]\u4E0D\u652F\u6301ZWatch Return WITH\u5B50\u53E5

# at: src/test/java/org/zstack/test/TestSafeWhile.java:80
# args: 
on\ purpose = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:56
# args: item
on\ purpose\ %d = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:39
# args: item
I\ should\ not\ be\ in\ error\ list\ %d = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:40
# args: item
I\ should\ not\ be\ in\ error\ list\ either\ %d = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:63
# args: 
done,\ on\ purpose = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:81
# args: 
I\ should\ not\ be\ errs\ list = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:82
# args: 
I\ should\ not\ be\ errs\ list\ either. = 

# at: src/test/java/org/zstack/test/aop/ManInTheMiddleService.java:40
# args: 
unit\ test\ asks\ it\ to\ fail = 

# at: src/test/java/org/zstack/test/compute/hostallocator/HostAllocateExtension.java:22
# args: 
On\ purpose = 

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:67
# args: 
on\ purpose\ 3 = 

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:75
# args: 
on\ purpose\ 1 = 

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:83
# args: 
on\ purpose\ 2 =

# at: src/main/java/org/zstack/identity/AccountLoginBackend.java:64
# args:
wrong\ account\ name\ or\ password = \u9519\u8BEF\u4FE1\u606F: \u9519\u8BEF\u7684\u5E10\u53F7\u6216\u5BC6\u7801

# at: src/main/java/org/zstack/sns/platform/universalsms/SNSUniversalSmsEndpoint.java:166
# args:
Failed\ to\ validate\ universal\ sms = \u53D1\u9001\u6D4B\u8BD5\u77ED\u4FE1\u5931\u8D25